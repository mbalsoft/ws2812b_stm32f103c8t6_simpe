
ws2812b_stm32f103c8t6_v02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b3c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  08009c48  08009c48  00019c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009efc  08009efc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08009efc  08009efc  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009efc  08009efc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009efc  08009efc  00019efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f00  08009f00  00019f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009f04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000135c  200001e0  0800a0e4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000153c  0800a0e4  0002153c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019198  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b06  00000000  00000000  000393a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  0003cea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa8  00000000  00000000  0003dff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b861  00000000  00000000  0003efa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000150bc  00000000  00000000  0005a801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ea16  00000000  00000000  0006f8bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fe2d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005048  00000000  00000000  000fe328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  00103370  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  00103394  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08009c30 	.word	0x08009c30

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	08009c30 	.word	0x08009c30

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fc0d 	bl	8000970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f84f 	bl	80001f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f93b 	bl	80003d4 <MX_GPIO_Init>
  MX_DMA_Init();
 800015e:	f000 f91b 	bl	8000398 <MX_DMA_Init>
  MX_TIM3_Init();
 8000162:	f000 f8a3 	bl	80002ac <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8000166:	f008 f84d 	bl	8008204 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  ws2812b_init();
 800016a:	f000 fb3b 	bl	80007e4 <ws2812b_init>

  srand((unsigned)time(NULL));
 800016e:	2000      	movs	r0, #0
 8000170:	f008 fd5e 	bl	8008c30 <time>
 8000174:	4603      	mov	r3, r0
 8000176:	4618      	mov	r0, r3
 8000178:	f008 fcec 	bl	8008b54 <srand>
  {
//	uint8_t r = rand();
//	uint8_t g = rand();
//	uint8_t b = rand();

	uint16_t volume = 128; // max 256
 800017c:	2380      	movs	r3, #128	; 0x80
 800017e:	817b      	strh	r3, [r7, #10]
	uint8_t r = gamma8[rand() % volume];
 8000180:	f008 fd16 	bl	8008bb0 <rand>
 8000184:	4602      	mov	r2, r0
 8000186:	897b      	ldrh	r3, [r7, #10]
 8000188:	fb92 f1f3 	sdiv	r1, r2, r3
 800018c:	fb03 f301 	mul.w	r3, r3, r1
 8000190:	1ad3      	subs	r3, r2, r3
 8000192:	4a18      	ldr	r2, [pc, #96]	; (80001f4 <main+0xa8>)
 8000194:	5cd3      	ldrb	r3, [r2, r3]
 8000196:	727b      	strb	r3, [r7, #9]
	uint8_t g = gamma8[rand() % volume];
 8000198:	f008 fd0a 	bl	8008bb0 <rand>
 800019c:	4602      	mov	r2, r0
 800019e:	897b      	ldrh	r3, [r7, #10]
 80001a0:	fb92 f1f3 	sdiv	r1, r2, r3
 80001a4:	fb03 f301 	mul.w	r3, r3, r1
 80001a8:	1ad3      	subs	r3, r2, r3
 80001aa:	4a12      	ldr	r2, [pc, #72]	; (80001f4 <main+0xa8>)
 80001ac:	5cd3      	ldrb	r3, [r2, r3]
 80001ae:	723b      	strb	r3, [r7, #8]
	uint8_t b = gamma8[rand() % volume];
 80001b0:	f008 fcfe 	bl	8008bb0 <rand>
 80001b4:	4602      	mov	r2, r0
 80001b6:	897b      	ldrh	r3, [r7, #10]
 80001b8:	fb92 f1f3 	sdiv	r1, r2, r3
 80001bc:	fb03 f301 	mul.w	r3, r3, r1
 80001c0:	1ad3      	subs	r3, r2, r3
 80001c2:	4a0c      	ldr	r2, [pc, #48]	; (80001f4 <main+0xa8>)
 80001c4:	5cd3      	ldrb	r3, [r2, r3]
 80001c6:	71fb      	strb	r3, [r7, #7]

	for (int led = 0; led < LED_N; led++) {
 80001c8:	2300      	movs	r3, #0
 80001ca:	60fb      	str	r3, [r7, #12]
 80001cc:	e00d      	b.n	80001ea <main+0x9e>
	  ws2812b_set_color(led, r, g, b);
 80001ce:	68f8      	ldr	r0, [r7, #12]
 80001d0:	79fb      	ldrb	r3, [r7, #7]
 80001d2:	7a3a      	ldrb	r2, [r7, #8]
 80001d4:	7a79      	ldrb	r1, [r7, #9]
 80001d6:	f000 fb6f 	bl	80008b8 <ws2812b_set_color>
	  ws2812b_update();
 80001da:	f000 fb33 	bl	8000844 <ws2812b_update>
	  HAL_Delay(100);
 80001de:	2064      	movs	r0, #100	; 0x64
 80001e0:	f000 fc28 	bl	8000a34 <HAL_Delay>
	for (int led = 0; led < LED_N; led++) {
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	3301      	adds	r3, #1
 80001e8:	60fb      	str	r3, [r7, #12]
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	2b07      	cmp	r3, #7
 80001ee:	ddee      	ble.n	80001ce <main+0x82>
  {
 80001f0:	e7c4      	b.n	800017c <main+0x30>
 80001f2:	bf00      	nop
 80001f4:	08009cb0 	.word	0x08009cb0

080001f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b094      	sub	sp, #80	; 0x50
 80001fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000202:	2228      	movs	r2, #40	; 0x28
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f008 fc9c 	bl	8008b44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800020c:	f107 0314 	add.w	r3, r7, #20
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]
 8000214:	605a      	str	r2, [r3, #4]
 8000216:	609a      	str	r2, [r3, #8]
 8000218:	60da      	str	r2, [r3, #12]
 800021a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800021c:	1d3b      	adds	r3, r7, #4
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000228:	2301      	movs	r3, #1
 800022a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800022c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000230:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000232:	2300      	movs	r3, #0
 8000234:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000236:	2301      	movs	r3, #1
 8000238:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023a:	2302      	movs	r3, #2
 800023c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800023e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000242:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000244:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000248:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800024e:	4618      	mov	r0, r3
 8000250:	f002 fd72 	bl	8002d38 <HAL_RCC_OscConfig>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800025a:	f000 f907 	bl	800046c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025e:	230f      	movs	r3, #15
 8000260:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000262:	2302      	movs	r3, #2
 8000264:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800026a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800026e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000270:	2300      	movs	r3, #0
 8000272:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000274:	f107 0314 	add.w	r3, r7, #20
 8000278:	2102      	movs	r1, #2
 800027a:	4618      	mov	r0, r3
 800027c:	f002 ffdc 	bl	8003238 <HAL_RCC_ClockConfig>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000286:	f000 f8f1 	bl	800046c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800028a:	2310      	movs	r3, #16
 800028c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800028e:	2300      	movs	r3, #0
 8000290:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	4618      	mov	r0, r3
 8000296:	f003 f937 	bl	8003508 <HAL_RCCEx_PeriphCLKConfig>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002a0:	f000 f8e4 	bl	800046c <Error_Handler>
  }
}
 80002a4:	bf00      	nop
 80002a6:	3750      	adds	r7, #80	; 0x50
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}

080002ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b08e      	sub	sp, #56	; 0x38
 80002b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002c0:	f107 0320 	add.w	r3, r7, #32
 80002c4:	2200      	movs	r2, #0
 80002c6:	601a      	str	r2, [r3, #0]
 80002c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	605a      	str	r2, [r3, #4]
 80002d2:	609a      	str	r2, [r3, #8]
 80002d4:	60da      	str	r2, [r3, #12]
 80002d6:	611a      	str	r2, [r3, #16]
 80002d8:	615a      	str	r2, [r3, #20]
 80002da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80002dc:	4b2c      	ldr	r3, [pc, #176]	; (8000390 <MX_TIM3_Init+0xe4>)
 80002de:	4a2d      	ldr	r2, [pc, #180]	; (8000394 <MX_TIM3_Init+0xe8>)
 80002e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80002e2:	4b2b      	ldr	r3, [pc, #172]	; (8000390 <MX_TIM3_Init+0xe4>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002e8:	4b29      	ldr	r3, [pc, #164]	; (8000390 <MX_TIM3_Init+0xe4>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 89;
 80002ee:	4b28      	ldr	r3, [pc, #160]	; (8000390 <MX_TIM3_Init+0xe4>)
 80002f0:	2259      	movs	r2, #89	; 0x59
 80002f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002f4:	4b26      	ldr	r3, [pc, #152]	; (8000390 <MX_TIM3_Init+0xe4>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002fa:	4b25      	ldr	r3, [pc, #148]	; (8000390 <MX_TIM3_Init+0xe4>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000300:	4823      	ldr	r0, [pc, #140]	; (8000390 <MX_TIM3_Init+0xe4>)
 8000302:	f003 f9b7 	bl	8003674 <HAL_TIM_Base_Init>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800030c:	f000 f8ae 	bl	800046c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000314:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000316:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800031a:	4619      	mov	r1, r3
 800031c:	481c      	ldr	r0, [pc, #112]	; (8000390 <MX_TIM3_Init+0xe4>)
 800031e:	f003 fcf3 	bl	8003d08 <HAL_TIM_ConfigClockSource>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000328:	f000 f8a0 	bl	800046c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800032c:	4818      	ldr	r0, [pc, #96]	; (8000390 <MX_TIM3_Init+0xe4>)
 800032e:	f003 fa3b 	bl	80037a8 <HAL_TIM_PWM_Init>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000338:	f000 f898 	bl	800046c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800033c:	2300      	movs	r3, #0
 800033e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000340:	2300      	movs	r3, #0
 8000342:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000344:	f107 0320 	add.w	r3, r7, #32
 8000348:	4619      	mov	r1, r3
 800034a:	4811      	ldr	r0, [pc, #68]	; (8000390 <MX_TIM3_Init+0xe4>)
 800034c:	f004 f930 	bl	80045b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000356:	f000 f889 	bl	800046c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800035a:	2360      	movs	r3, #96	; 0x60
 800035c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800035e:	2300      	movs	r3, #0
 8000360:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000362:	2300      	movs	r3, #0
 8000364:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000366:	2300      	movs	r3, #0
 8000368:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	2200      	movs	r2, #0
 800036e:	4619      	mov	r1, r3
 8000370:	4807      	ldr	r0, [pc, #28]	; (8000390 <MX_TIM3_Init+0xe4>)
 8000372:	f003 fc0b 	bl	8003b8c <HAL_TIM_PWM_ConfigChannel>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800037c:	f000 f876 	bl	800046c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000380:	4803      	ldr	r0, [pc, #12]	; (8000390 <MX_TIM3_Init+0xe4>)
 8000382:	f000 f8f9 	bl	8000578 <HAL_TIM_MspPostInit>

}
 8000386:	bf00      	nop
 8000388:	3738      	adds	r7, #56	; 0x38
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	2000051c 	.word	0x2000051c
 8000394:	40000400 	.word	0x40000400

08000398 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800039e:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <MX_DMA_Init+0x38>)
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	4a0b      	ldr	r2, [pc, #44]	; (80003d0 <MX_DMA_Init+0x38>)
 80003a4:	f043 0301 	orr.w	r3, r3, #1
 80003a8:	6153      	str	r3, [r2, #20]
 80003aa:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <MX_DMA_Init+0x38>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	f003 0301 	and.w	r3, r3, #1
 80003b2:	607b      	str	r3, [r7, #4]
 80003b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80003b6:	2200      	movs	r2, #0
 80003b8:	2100      	movs	r1, #0
 80003ba:	2010      	movs	r0, #16
 80003bc:	f000 fc35 	bl	8000c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80003c0:	2010      	movs	r0, #16
 80003c2:	f000 fc4e 	bl	8000c62 <HAL_NVIC_EnableIRQ>

}
 80003c6:	bf00      	nop
 80003c8:	3708      	adds	r7, #8
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	40021000 	.word	0x40021000

080003d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b088      	sub	sp, #32
 80003d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003da:	f107 0310 	add.w	r3, r7, #16
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]
 80003e4:	609a      	str	r2, [r3, #8]
 80003e6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003e8:	4b1e      	ldr	r3, [pc, #120]	; (8000464 <MX_GPIO_Init+0x90>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a1d      	ldr	r2, [pc, #116]	; (8000464 <MX_GPIO_Init+0x90>)
 80003ee:	f043 0310 	orr.w	r3, r3, #16
 80003f2:	6193      	str	r3, [r2, #24]
 80003f4:	4b1b      	ldr	r3, [pc, #108]	; (8000464 <MX_GPIO_Init+0x90>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	f003 0310 	and.w	r3, r3, #16
 80003fc:	60fb      	str	r3, [r7, #12]
 80003fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000400:	4b18      	ldr	r3, [pc, #96]	; (8000464 <MX_GPIO_Init+0x90>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a17      	ldr	r2, [pc, #92]	; (8000464 <MX_GPIO_Init+0x90>)
 8000406:	f043 0320 	orr.w	r3, r3, #32
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b15      	ldr	r3, [pc, #84]	; (8000464 <MX_GPIO_Init+0x90>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f003 0320 	and.w	r3, r3, #32
 8000414:	60bb      	str	r3, [r7, #8]
 8000416:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000418:	4b12      	ldr	r3, [pc, #72]	; (8000464 <MX_GPIO_Init+0x90>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4a11      	ldr	r2, [pc, #68]	; (8000464 <MX_GPIO_Init+0x90>)
 800041e:	f043 0304 	orr.w	r3, r3, #4
 8000422:	6193      	str	r3, [r2, #24]
 8000424:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <MX_GPIO_Init+0x90>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	f003 0304 	and.w	r3, r3, #4
 800042c:	607b      	str	r3, [r7, #4]
 800042e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000436:	480c      	ldr	r0, [pc, #48]	; (8000468 <MX_GPIO_Init+0x94>)
 8000438:	f000 ffa0 	bl	800137c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800043c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000440:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000442:	2301      	movs	r3, #1
 8000444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000446:	2300      	movs	r3, #0
 8000448:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044a:	2302      	movs	r3, #2
 800044c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800044e:	f107 0310 	add.w	r3, r7, #16
 8000452:	4619      	mov	r1, r3
 8000454:	4804      	ldr	r0, [pc, #16]	; (8000468 <MX_GPIO_Init+0x94>)
 8000456:	f000 fe0d 	bl	8001074 <HAL_GPIO_Init>

}
 800045a:	bf00      	nop
 800045c:	3720      	adds	r7, #32
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	40021000 	.word	0x40021000
 8000468:	40011000 	.word	0x40011000

0800046c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000470:	bf00      	nop
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr

08000478 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000478:	b480      	push	{r7}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800047e:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <HAL_MspInit+0x5c>)
 8000480:	699b      	ldr	r3, [r3, #24]
 8000482:	4a14      	ldr	r2, [pc, #80]	; (80004d4 <HAL_MspInit+0x5c>)
 8000484:	f043 0301 	orr.w	r3, r3, #1
 8000488:	6193      	str	r3, [r2, #24]
 800048a:	4b12      	ldr	r3, [pc, #72]	; (80004d4 <HAL_MspInit+0x5c>)
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	f003 0301 	and.w	r3, r3, #1
 8000492:	60bb      	str	r3, [r7, #8]
 8000494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000496:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <HAL_MspInit+0x5c>)
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	4a0e      	ldr	r2, [pc, #56]	; (80004d4 <HAL_MspInit+0x5c>)
 800049c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004a0:	61d3      	str	r3, [r2, #28]
 80004a2:	4b0c      	ldr	r3, [pc, #48]	; (80004d4 <HAL_MspInit+0x5c>)
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004aa:	607b      	str	r3, [r7, #4]
 80004ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004ae:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <HAL_MspInit+0x60>)
 80004b0:	685b      	ldr	r3, [r3, #4]
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004ba:	60fb      	str	r3, [r7, #12]
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004c2:	60fb      	str	r3, [r7, #12]
 80004c4:	4a04      	ldr	r2, [pc, #16]	; (80004d8 <HAL_MspInit+0x60>)
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ca:	bf00      	nop
 80004cc:	3714      	adds	r7, #20
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr
 80004d4:	40021000 	.word	0x40021000
 80004d8:	40010000 	.word	0x40010000

080004dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a1f      	ldr	r2, [pc, #124]	; (8000568 <HAL_TIM_Base_MspInit+0x8c>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d138      	bne.n	8000560 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80004ee:	4b1f      	ldr	r3, [pc, #124]	; (800056c <HAL_TIM_Base_MspInit+0x90>)
 80004f0:	69db      	ldr	r3, [r3, #28]
 80004f2:	4a1e      	ldr	r2, [pc, #120]	; (800056c <HAL_TIM_Base_MspInit+0x90>)
 80004f4:	f043 0302 	orr.w	r3, r3, #2
 80004f8:	61d3      	str	r3, [r2, #28]
 80004fa:	4b1c      	ldr	r3, [pc, #112]	; (800056c <HAL_TIM_Base_MspInit+0x90>)
 80004fc:	69db      	ldr	r3, [r3, #28]
 80004fe:	f003 0302 	and.w	r3, r3, #2
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 8000506:	4b1a      	ldr	r3, [pc, #104]	; (8000570 <HAL_TIM_Base_MspInit+0x94>)
 8000508:	4a1a      	ldr	r2, [pc, #104]	; (8000574 <HAL_TIM_Base_MspInit+0x98>)
 800050a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800050c:	4b18      	ldr	r3, [pc, #96]	; (8000570 <HAL_TIM_Base_MspInit+0x94>)
 800050e:	2210      	movs	r2, #16
 8000510:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8000512:	4b17      	ldr	r3, [pc, #92]	; (8000570 <HAL_TIM_Base_MspInit+0x94>)
 8000514:	2200      	movs	r2, #0
 8000516:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8000518:	4b15      	ldr	r3, [pc, #84]	; (8000570 <HAL_TIM_Base_MspInit+0x94>)
 800051a:	2280      	movs	r2, #128	; 0x80
 800051c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800051e:	4b14      	ldr	r3, [pc, #80]	; (8000570 <HAL_TIM_Base_MspInit+0x94>)
 8000520:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000524:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000526:	4b12      	ldr	r3, [pc, #72]	; (8000570 <HAL_TIM_Base_MspInit+0x94>)
 8000528:	2200      	movs	r2, #0
 800052a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 800052c:	4b10      	ldr	r3, [pc, #64]	; (8000570 <HAL_TIM_Base_MspInit+0x94>)
 800052e:	2200      	movs	r2, #0
 8000530:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8000532:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <HAL_TIM_Base_MspInit+0x94>)
 8000534:	2200      	movs	r2, #0
 8000536:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8000538:	480d      	ldr	r0, [pc, #52]	; (8000570 <HAL_TIM_Base_MspInit+0x94>)
 800053a:	f000 fbad 	bl	8000c98 <HAL_DMA_Init>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <HAL_TIM_Base_MspInit+0x6c>
    {
      Error_Handler();
 8000544:	f7ff ff92 	bl	800046c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	4a09      	ldr	r2, [pc, #36]	; (8000570 <HAL_TIM_Base_MspInit+0x94>)
 800054c:	625a      	str	r2, [r3, #36]	; 0x24
 800054e:	4a08      	ldr	r2, [pc, #32]	; (8000570 <HAL_TIM_Base_MspInit+0x94>)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	4a06      	ldr	r2, [pc, #24]	; (8000570 <HAL_TIM_Base_MspInit+0x94>)
 8000558:	639a      	str	r2, [r3, #56]	; 0x38
 800055a:	4a05      	ldr	r2, [pc, #20]	; (8000570 <HAL_TIM_Base_MspInit+0x94>)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000560:	bf00      	nop
 8000562:	3710      	adds	r7, #16
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40000400 	.word	0x40000400
 800056c:	40021000 	.word	0x40021000
 8000570:	20000564 	.word	0x20000564
 8000574:	4002006c 	.word	0x4002006c

08000578 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000580:	f107 0310 	add.w	r3, r7, #16
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a0f      	ldr	r2, [pc, #60]	; (80005d0 <HAL_TIM_MspPostInit+0x58>)
 8000594:	4293      	cmp	r3, r2
 8000596:	d117      	bne.n	80005c8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000598:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <HAL_TIM_MspPostInit+0x5c>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	4a0d      	ldr	r2, [pc, #52]	; (80005d4 <HAL_TIM_MspPostInit+0x5c>)
 800059e:	f043 0304 	orr.w	r3, r3, #4
 80005a2:	6193      	str	r3, [r2, #24]
 80005a4:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <HAL_TIM_MspPostInit+0x5c>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	f003 0304 	and.w	r3, r3, #4
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80005b0:	2340      	movs	r3, #64	; 0x40
 80005b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b4:	2302      	movs	r3, #2
 80005b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005b8:	2303      	movs	r3, #3
 80005ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005bc:	f107 0310 	add.w	r3, r7, #16
 80005c0:	4619      	mov	r1, r3
 80005c2:	4805      	ldr	r0, [pc, #20]	; (80005d8 <HAL_TIM_MspPostInit+0x60>)
 80005c4:	f000 fd56 	bl	8001074 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80005c8:	bf00      	nop
 80005ca:	3720      	adds	r7, #32
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40000400 	.word	0x40000400
 80005d4:	40021000 	.word	0x40021000
 80005d8:	40010800 	.word	0x40010800

080005dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr

080005e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ec:	e7fe      	b.n	80005ec <HardFault_Handler+0x4>

080005ee <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005ee:	b480      	push	{r7}
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f2:	e7fe      	b.n	80005f2 <MemManage_Handler+0x4>

080005f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <BusFault_Handler+0x4>

080005fa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005fa:	b480      	push	{r7}
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005fe:	e7fe      	b.n	80005fe <UsageFault_Handler+0x4>

08000600 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr

0800060c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr

08000624 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000628:	f000 f9e8 	bl	80009fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}

08000630 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8000634:	4802      	ldr	r0, [pc, #8]	; (8000640 <DMA1_Channel6_IRQHandler+0x10>)
 8000636:	f000 fbe9 	bl	8000e0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000564 	.word	0x20000564

08000644 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000648:	4802      	ldr	r0, [pc, #8]	; (8000654 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800064a:	f000 ffe0 	bl	800160e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20001240 	.word	0x20001240

08000658 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
	return 1;
 800065c:	2301      	movs	r3, #1
}
 800065e:	4618      	mov	r0, r3
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr

08000666 <_kill>:

int _kill(int pid, int sig)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	b082      	sub	sp, #8
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
 800066e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000670:	f008 fa3e 	bl	8008af0 <__errno>
 8000674:	4603      	mov	r3, r0
 8000676:	2216      	movs	r2, #22
 8000678:	601a      	str	r2, [r3, #0]
	return -1;
 800067a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800067e:	4618      	mov	r0, r3
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}

08000686 <_exit>:

void _exit (int status)
{
 8000686:	b580      	push	{r7, lr}
 8000688:	b082      	sub	sp, #8
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800068e:	f04f 31ff 	mov.w	r1, #4294967295
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f7ff ffe7 	bl	8000666 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000698:	e7fe      	b.n	8000698 <_exit+0x12>

0800069a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800069a:	b580      	push	{r7, lr}
 800069c:	b086      	sub	sp, #24
 800069e:	af00      	add	r7, sp, #0
 80006a0:	60f8      	str	r0, [r7, #12]
 80006a2:	60b9      	str	r1, [r7, #8]
 80006a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006a6:	2300      	movs	r3, #0
 80006a8:	617b      	str	r3, [r7, #20]
 80006aa:	e00a      	b.n	80006c2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80006ac:	f3af 8000 	nop.w
 80006b0:	4601      	mov	r1, r0
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	1c5a      	adds	r2, r3, #1
 80006b6:	60ba      	str	r2, [r7, #8]
 80006b8:	b2ca      	uxtb	r2, r1
 80006ba:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	3301      	adds	r3, #1
 80006c0:	617b      	str	r3, [r7, #20]
 80006c2:	697a      	ldr	r2, [r7, #20]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	429a      	cmp	r2, r3
 80006c8:	dbf0      	blt.n	80006ac <_read+0x12>
	}

return len;
 80006ca:	687b      	ldr	r3, [r7, #4]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3718      	adds	r7, #24
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
 80006e4:	e009      	b.n	80006fa <_write+0x26>
	{
		__io_putchar(*ptr++);
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	1c5a      	adds	r2, r3, #1
 80006ea:	60ba      	str	r2, [r7, #8]
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	3301      	adds	r3, #1
 80006f8:	617b      	str	r3, [r7, #20]
 80006fa:	697a      	ldr	r2, [r7, #20]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	429a      	cmp	r2, r3
 8000700:	dbf1      	blt.n	80006e6 <_write+0x12>
	}
	return len;
 8000702:	687b      	ldr	r3, [r7, #4]
}
 8000704:	4618      	mov	r0, r3
 8000706:	3718      	adds	r7, #24
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <_close>:

int _close(int file)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	return -1;
 8000714:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000718:	4618      	mov	r0, r3
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr

08000722 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000722:	b480      	push	{r7}
 8000724:	b083      	sub	sp, #12
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
 800072a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000732:	605a      	str	r2, [r3, #4]
	return 0;
 8000734:	2300      	movs	r3, #0
}
 8000736:	4618      	mov	r0, r3
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr

08000740 <_isatty>:

int _isatty(int file)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	return 1;
 8000748:	2301      	movs	r3, #1
}
 800074a:	4618      	mov	r0, r3
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr

08000754 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
	return 0;
 8000760:	2300      	movs	r3, #0
}
 8000762:	4618      	mov	r0, r3
 8000764:	3714      	adds	r7, #20
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr

0800076c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000774:	4a14      	ldr	r2, [pc, #80]	; (80007c8 <_sbrk+0x5c>)
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <_sbrk+0x60>)
 8000778:	1ad3      	subs	r3, r2, r3
 800077a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000780:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <_sbrk+0x64>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d102      	bne.n	800078e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000788:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <_sbrk+0x64>)
 800078a:	4a12      	ldr	r2, [pc, #72]	; (80007d4 <_sbrk+0x68>)
 800078c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800078e:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <_sbrk+0x64>)
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4413      	add	r3, r2
 8000796:	693a      	ldr	r2, [r7, #16]
 8000798:	429a      	cmp	r2, r3
 800079a:	d207      	bcs.n	80007ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800079c:	f008 f9a8 	bl	8008af0 <__errno>
 80007a0:	4603      	mov	r3, r0
 80007a2:	220c      	movs	r2, #12
 80007a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007a6:	f04f 33ff 	mov.w	r3, #4294967295
 80007aa:	e009      	b.n	80007c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007ac:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <_sbrk+0x64>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007b2:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <_sbrk+0x64>)
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4413      	add	r3, r2
 80007ba:	4a05      	ldr	r2, [pc, #20]	; (80007d0 <_sbrk+0x64>)
 80007bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007be:	68fb      	ldr	r3, [r7, #12]
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3718      	adds	r7, #24
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20005000 	.word	0x20005000
 80007cc:	00000400 	.word	0x00000400
 80007d0:	200001fc 	.word	0x200001fc
 80007d4:	20001540 	.word	0x20001540

080007d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <ws2812b_init>:


static uint8_t led_buffer[RESET_LEN + 24 * LED_N + 1];

void ws2812b_init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
  int i;
  for (i = 0; i < RESET_LEN; i++)
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	e007      	b.n	8000800 <ws2812b_init+0x1c>
    led_buffer[i] = 0;
 80007f0:	4a12      	ldr	r2, [pc, #72]	; (800083c <ws2812b_init+0x58>)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4413      	add	r3, r2
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < RESET_LEN; i++)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	3301      	adds	r3, #1
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2b2f      	cmp	r3, #47	; 0x2f
 8000804:	ddf4      	ble.n	80007f0 <ws2812b_init+0xc>

  for (i = 0; i < 24 * LED_N; i++)
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	e007      	b.n	800081c <ws2812b_init+0x38>
    led_buffer[RESET_LEN + i] = BIT_0_TIME;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	3330      	adds	r3, #48	; 0x30
 8000810:	4a0a      	ldr	r2, [pc, #40]	; (800083c <ws2812b_init+0x58>)
 8000812:	2120      	movs	r1, #32
 8000814:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < 24 * LED_N; i++)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	3301      	adds	r3, #1
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2bbf      	cmp	r3, #191	; 0xbf
 8000820:	ddf4      	ble.n	800080c <ws2812b_init+0x28>

  led_buffer[RESET_LEN + 24 * LED_N] = 90; //100;
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <ws2812b_init+0x58>)
 8000824:	225a      	movs	r2, #90	; 0x5a
 8000826:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0

  HAL_TIM_Base_Start(&htim3);
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <ws2812b_init+0x5c>)
 800082c:	f002 ff72 	bl	8003714 <HAL_TIM_Base_Start>
  ws2812b_update();
 8000830:	f000 f808 	bl	8000844 <ws2812b_update>
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000200 	.word	0x20000200
 8000840:	2000051c 	.word	0x2000051c

08000844 <ws2812b_update>:

void ws2812b_update(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)led_buffer, sizeof(led_buffer));
 8000848:	23f1      	movs	r3, #241	; 0xf1
 800084a:	4a03      	ldr	r2, [pc, #12]	; (8000858 <ws2812b_update+0x14>)
 800084c:	2100      	movs	r1, #0
 800084e:	4803      	ldr	r0, [pc, #12]	; (800085c <ws2812b_update+0x18>)
 8000850:	f003 f802 	bl	8003858 <HAL_TIM_PWM_Start_DMA>
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000200 	.word	0x20000200
 800085c:	2000051c 	.word	0x2000051c

08000860 <set_byte>:
	while (HAL_TIM_GetChannelState(&htim3, TIM_CHANNEL_1) == HAL_TIM_CHANNEL_STATE_BUSY)
		{}
}

static void set_byte(uint32_t pos, uint8_t value)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	460b      	mov	r3, r1
 800086a:	70fb      	strb	r3, [r7, #3]
  int i;
  for (i = 0; i < 8; i++) {
 800086c:	2300      	movs	r3, #0
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	e016      	b.n	80008a0 <set_byte+0x40>
    if (value & 0x80) {
 8000872:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000876:	2b00      	cmp	r3, #0
 8000878:	da06      	bge.n	8000888 <set_byte+0x28>
      led_buffer[pos + i] = BIT_1_TIME;
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4413      	add	r3, r2
 8000880:	4a0c      	ldr	r2, [pc, #48]	; (80008b4 <set_byte+0x54>)
 8000882:	2140      	movs	r1, #64	; 0x40
 8000884:	54d1      	strb	r1, [r2, r3]
 8000886:	e005      	b.n	8000894 <set_byte+0x34>
    } else {
      led_buffer[pos + i] = BIT_0_TIME;
 8000888:	68fa      	ldr	r2, [r7, #12]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4413      	add	r3, r2
 800088e:	4a09      	ldr	r2, [pc, #36]	; (80008b4 <set_byte+0x54>)
 8000890:	2120      	movs	r1, #32
 8000892:	54d1      	strb	r1, [r2, r3]
    }

    value <<= 1;
 8000894:	78fb      	ldrb	r3, [r7, #3]
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	70fb      	strb	r3, [r7, #3]
  for (i = 0; i < 8; i++) {
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	3301      	adds	r3, #1
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	2b07      	cmp	r3, #7
 80008a4:	dde5      	ble.n	8000872 <set_byte+0x12>
  }
}
 80008a6:	bf00      	nop
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	20000200 	.word	0x20000200

080008b8 <ws2812b_set_color>:

void ws2812b_set_color(uint32_t led, uint8_t red, uint8_t green, uint8_t blue)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	4608      	mov	r0, r1
 80008c2:	4611      	mov	r1, r2
 80008c4:	461a      	mov	r2, r3
 80008c6:	4603      	mov	r3, r0
 80008c8:	70fb      	strb	r3, [r7, #3]
 80008ca:	460b      	mov	r3, r1
 80008cc:	70bb      	strb	r3, [r7, #2]
 80008ce:	4613      	mov	r3, r2
 80008d0:	707b      	strb	r3, [r7, #1]
	if (led < LED_N)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2b07      	cmp	r3, #7
 80008d6:	d820      	bhi.n	800091a <ws2812b_set_color+0x62>
	{
		set_byte(RESET_LEN + 24 * led, green);
 80008d8:	687a      	ldr	r2, [r7, #4]
 80008da:	4613      	mov	r3, r2
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	4413      	add	r3, r2
 80008e0:	00db      	lsls	r3, r3, #3
 80008e2:	3330      	adds	r3, #48	; 0x30
 80008e4:	78ba      	ldrb	r2, [r7, #2]
 80008e6:	4611      	mov	r1, r2
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ffb9 	bl	8000860 <set_byte>
		set_byte(RESET_LEN + 24 * led + 8, red);
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	4613      	mov	r3, r2
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	4413      	add	r3, r2
 80008f6:	00db      	lsls	r3, r3, #3
 80008f8:	3338      	adds	r3, #56	; 0x38
 80008fa:	78fa      	ldrb	r2, [r7, #3]
 80008fc:	4611      	mov	r1, r2
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff ffae 	bl	8000860 <set_byte>
		set_byte(RESET_LEN + 24 * led + 16, blue);
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	4613      	mov	r3, r2
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	4413      	add	r3, r2
 800090c:	00db      	lsls	r3, r3, #3
 800090e:	3340      	adds	r3, #64	; 0x40
 8000910:	787a      	ldrb	r2, [r7, #1]
 8000912:	4611      	mov	r1, r2
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ffa3 	bl	8000860 <set_byte>
	}
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000924:	480c      	ldr	r0, [pc, #48]	; (8000958 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000926:	490d      	ldr	r1, [pc, #52]	; (800095c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000928:	4a0d      	ldr	r2, [pc, #52]	; (8000960 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800092c:	e002      	b.n	8000934 <LoopCopyDataInit>

0800092e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000932:	3304      	adds	r3, #4

08000934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000938:	d3f9      	bcc.n	800092e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800093a:	4a0a      	ldr	r2, [pc, #40]	; (8000964 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800093c:	4c0a      	ldr	r4, [pc, #40]	; (8000968 <LoopFillZerobss+0x22>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000940:	e001      	b.n	8000946 <LoopFillZerobss>

08000942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000944:	3204      	adds	r2, #4

08000946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000948:	d3fb      	bcc.n	8000942 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800094a:	f7ff ff45 	bl	80007d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800094e:	f008 f8d5 	bl	8008afc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000952:	f7ff fbfb 	bl	800014c <main>
  bx lr
 8000956:	4770      	bx	lr
  ldr r0, =_sdata
 8000958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800095c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8000960:	08009f04 	.word	0x08009f04
  ldr r2, =_sbss
 8000964:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8000968:	2000153c 	.word	0x2000153c

0800096c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800096c:	e7fe      	b.n	800096c <ADC1_2_IRQHandler>
	...

08000970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <HAL_Init+0x28>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a07      	ldr	r2, [pc, #28]	; (8000998 <HAL_Init+0x28>)
 800097a:	f043 0310 	orr.w	r3, r3, #16
 800097e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000980:	2003      	movs	r0, #3
 8000982:	f000 f947 	bl	8000c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000986:	2000      	movs	r0, #0
 8000988:	f000 f808 	bl	800099c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800098c:	f7ff fd74 	bl	8000478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000990:	2300      	movs	r3, #0
}
 8000992:	4618      	mov	r0, r3
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40022000 	.word	0x40022000

0800099c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <HAL_InitTick+0x54>)
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <HAL_InitTick+0x58>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	4619      	mov	r1, r3
 80009ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 f95f 	bl	8000c7e <HAL_SYSTICK_Config>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
 80009c8:	e00e      	b.n	80009e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2b0f      	cmp	r3, #15
 80009ce:	d80a      	bhi.n	80009e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d0:	2200      	movs	r2, #0
 80009d2:	6879      	ldr	r1, [r7, #4]
 80009d4:	f04f 30ff 	mov.w	r0, #4294967295
 80009d8:	f000 f927 	bl	8000c2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009dc:	4a06      	ldr	r2, [pc, #24]	; (80009f8 <HAL_InitTick+0x5c>)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009e2:	2300      	movs	r3, #0
 80009e4:	e000      	b.n	80009e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000000 	.word	0x20000000
 80009f4:	20000008 	.word	0x20000008
 80009f8:	20000004 	.word	0x20000004

080009fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <HAL_IncTick+0x1c>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	461a      	mov	r2, r3
 8000a06:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <HAL_IncTick+0x20>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	4a03      	ldr	r2, [pc, #12]	; (8000a1c <HAL_IncTick+0x20>)
 8000a0e:	6013      	str	r3, [r2, #0]
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr
 8000a18:	20000008 	.word	0x20000008
 8000a1c:	200005a8 	.word	0x200005a8

08000a20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  return uwTick;
 8000a24:	4b02      	ldr	r3, [pc, #8]	; (8000a30 <HAL_GetTick+0x10>)
 8000a26:	681b      	ldr	r3, [r3, #0]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr
 8000a30:	200005a8 	.word	0x200005a8

08000a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a3c:	f7ff fff0 	bl	8000a20 <HAL_GetTick>
 8000a40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a4c:	d005      	beq.n	8000a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <HAL_Delay+0x44>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	461a      	mov	r2, r3
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	4413      	add	r3, r2
 8000a58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a5a:	bf00      	nop
 8000a5c:	f7ff ffe0 	bl	8000a20 <HAL_GetTick>
 8000a60:	4602      	mov	r2, r0
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	68fa      	ldr	r2, [r7, #12]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d8f7      	bhi.n	8000a5c <HAL_Delay+0x28>
  {
  }
}
 8000a6c:	bf00      	nop
 8000a6e:	bf00      	nop
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000008 	.word	0x20000008

08000a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a92:	68ba      	ldr	r2, [r7, #8]
 8000a94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a98:	4013      	ands	r3, r2
 8000a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aae:	4a04      	ldr	r2, [pc, #16]	; (8000ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	60d3      	str	r3, [r2, #12]
}
 8000ab4:	bf00      	nop
 8000ab6:	3714      	adds	r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bc80      	pop	{r7}
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac8:	4b04      	ldr	r3, [pc, #16]	; (8000adc <__NVIC_GetPriorityGrouping+0x18>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	0a1b      	lsrs	r3, r3, #8
 8000ace:	f003 0307 	and.w	r3, r3, #7
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	db0b      	blt.n	8000b0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	f003 021f 	and.w	r2, r3, #31
 8000af8:	4906      	ldr	r1, [pc, #24]	; (8000b14 <__NVIC_EnableIRQ+0x34>)
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	095b      	lsrs	r3, r3, #5
 8000b00:	2001      	movs	r0, #1
 8000b02:	fa00 f202 	lsl.w	r2, r0, r2
 8000b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr
 8000b14:	e000e100 	.word	0xe000e100

08000b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	6039      	str	r1, [r7, #0]
 8000b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	db0a      	blt.n	8000b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	490c      	ldr	r1, [pc, #48]	; (8000b64 <__NVIC_SetPriority+0x4c>)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	0112      	lsls	r2, r2, #4
 8000b38:	b2d2      	uxtb	r2, r2
 8000b3a:	440b      	add	r3, r1
 8000b3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b40:	e00a      	b.n	8000b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4908      	ldr	r1, [pc, #32]	; (8000b68 <__NVIC_SetPriority+0x50>)
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	f003 030f 	and.w	r3, r3, #15
 8000b4e:	3b04      	subs	r3, #4
 8000b50:	0112      	lsls	r2, r2, #4
 8000b52:	b2d2      	uxtb	r2, r2
 8000b54:	440b      	add	r3, r1
 8000b56:	761a      	strb	r2, [r3, #24]
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000e100 	.word	0xe000e100
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b089      	sub	sp, #36	; 0x24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	f1c3 0307 	rsb	r3, r3, #7
 8000b86:	2b04      	cmp	r3, #4
 8000b88:	bf28      	it	cs
 8000b8a:	2304      	movcs	r3, #4
 8000b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	3304      	adds	r3, #4
 8000b92:	2b06      	cmp	r3, #6
 8000b94:	d902      	bls.n	8000b9c <NVIC_EncodePriority+0x30>
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3b03      	subs	r3, #3
 8000b9a:	e000      	b.n	8000b9e <NVIC_EncodePriority+0x32>
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	43da      	mvns	r2, r3
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	401a      	ands	r2, r3
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbe:	43d9      	mvns	r1, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc4:	4313      	orrs	r3, r2
         );
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3724      	adds	r7, #36	; 0x24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr

08000bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000be0:	d301      	bcc.n	8000be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000be2:	2301      	movs	r3, #1
 8000be4:	e00f      	b.n	8000c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000be6:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <SysTick_Config+0x40>)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bee:	210f      	movs	r1, #15
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	f7ff ff90 	bl	8000b18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <SysTick_Config+0x40>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bfe:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <SysTick_Config+0x40>)
 8000c00:	2207      	movs	r2, #7
 8000c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	e000e010 	.word	0xe000e010

08000c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff ff2d 	bl	8000a7c <__NVIC_SetPriorityGrouping>
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b086      	sub	sp, #24
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	4603      	mov	r3, r0
 8000c32:	60b9      	str	r1, [r7, #8]
 8000c34:	607a      	str	r2, [r7, #4]
 8000c36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c3c:	f7ff ff42 	bl	8000ac4 <__NVIC_GetPriorityGrouping>
 8000c40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	68b9      	ldr	r1, [r7, #8]
 8000c46:	6978      	ldr	r0, [r7, #20]
 8000c48:	f7ff ff90 	bl	8000b6c <NVIC_EncodePriority>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c52:	4611      	mov	r1, r2
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ff5f 	bl	8000b18 <__NVIC_SetPriority>
}
 8000c5a:	bf00      	nop
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	4603      	mov	r3, r0
 8000c6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff35 	bl	8000ae0 <__NVIC_EnableIRQ>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f7ff ffa2 	bl	8000bd0 <SysTick_Config>
 8000c8c:	4603      	mov	r3, r0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d101      	bne.n	8000cae <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e043      	b.n	8000d36 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	4b22      	ldr	r3, [pc, #136]	; (8000d40 <HAL_DMA_Init+0xa8>)
 8000cb6:	4413      	add	r3, r2
 8000cb8:	4a22      	ldr	r2, [pc, #136]	; (8000d44 <HAL_DMA_Init+0xac>)
 8000cba:	fba2 2303 	umull	r2, r3, r2, r3
 8000cbe:	091b      	lsrs	r3, r3, #4
 8000cc0:	009a      	lsls	r2, r3, #2
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a1f      	ldr	r2, [pc, #124]	; (8000d48 <HAL_DMA_Init+0xb0>)
 8000cca:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2202      	movs	r2, #2
 8000cd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000ce2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ce6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000cf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	68db      	ldr	r3, [r3, #12]
 8000cf6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	695b      	ldr	r3, [r3, #20]
 8000d02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d10:	68fa      	ldr	r2, [r7, #12]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2200      	movs	r2, #0
 8000d22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2201      	movs	r2, #1
 8000d28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3714      	adds	r7, #20
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr
 8000d40:	bffdfff8 	.word	0xbffdfff8
 8000d44:	cccccccd 	.word	0xcccccccd
 8000d48:	40020000 	.word	0x40020000

08000d4c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
 8000d58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d101      	bne.n	8000d6c <HAL_DMA_Start_IT+0x20>
 8000d68:	2302      	movs	r3, #2
 8000d6a:	e04a      	b.n	8000e02 <HAL_DMA_Start_IT+0xb6>
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d13a      	bne.n	8000df4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	2202      	movs	r2, #2
 8000d82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f022 0201 	bic.w	r2, r2, #1
 8000d9a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	68b9      	ldr	r1, [r7, #8]
 8000da2:	68f8      	ldr	r0, [r7, #12]
 8000da4:	f000 f938 	bl	8001018 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d008      	beq.n	8000dc2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f042 020e 	orr.w	r2, r2, #14
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	e00f      	b.n	8000de2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f022 0204 	bic.w	r2, r2, #4
 8000dd0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f042 020a 	orr.w	r2, r2, #10
 8000de0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f042 0201 	orr.w	r2, r2, #1
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	e005      	b.n	8000e00 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	2200      	movs	r2, #0
 8000df8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e28:	2204      	movs	r2, #4
 8000e2a:	409a      	lsls	r2, r3
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d04f      	beq.n	8000ed4 <HAL_DMA_IRQHandler+0xc8>
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	f003 0304 	and.w	r3, r3, #4
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d04a      	beq.n	8000ed4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f003 0320 	and.w	r3, r3, #32
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d107      	bne.n	8000e5c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f022 0204 	bic.w	r2, r2, #4
 8000e5a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a66      	ldr	r2, [pc, #408]	; (8000ffc <HAL_DMA_IRQHandler+0x1f0>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d029      	beq.n	8000eba <HAL_DMA_IRQHandler+0xae>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a65      	ldr	r2, [pc, #404]	; (8001000 <HAL_DMA_IRQHandler+0x1f4>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d022      	beq.n	8000eb6 <HAL_DMA_IRQHandler+0xaa>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a63      	ldr	r2, [pc, #396]	; (8001004 <HAL_DMA_IRQHandler+0x1f8>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d01a      	beq.n	8000eb0 <HAL_DMA_IRQHandler+0xa4>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a62      	ldr	r2, [pc, #392]	; (8001008 <HAL_DMA_IRQHandler+0x1fc>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d012      	beq.n	8000eaa <HAL_DMA_IRQHandler+0x9e>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a60      	ldr	r2, [pc, #384]	; (800100c <HAL_DMA_IRQHandler+0x200>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d00a      	beq.n	8000ea4 <HAL_DMA_IRQHandler+0x98>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a5f      	ldr	r2, [pc, #380]	; (8001010 <HAL_DMA_IRQHandler+0x204>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d102      	bne.n	8000e9e <HAL_DMA_IRQHandler+0x92>
 8000e98:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e9c:	e00e      	b.n	8000ebc <HAL_DMA_IRQHandler+0xb0>
 8000e9e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000ea2:	e00b      	b.n	8000ebc <HAL_DMA_IRQHandler+0xb0>
 8000ea4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000ea8:	e008      	b.n	8000ebc <HAL_DMA_IRQHandler+0xb0>
 8000eaa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000eae:	e005      	b.n	8000ebc <HAL_DMA_IRQHandler+0xb0>
 8000eb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eb4:	e002      	b.n	8000ebc <HAL_DMA_IRQHandler+0xb0>
 8000eb6:	2340      	movs	r3, #64	; 0x40
 8000eb8:	e000      	b.n	8000ebc <HAL_DMA_IRQHandler+0xb0>
 8000eba:	2304      	movs	r3, #4
 8000ebc:	4a55      	ldr	r2, [pc, #340]	; (8001014 <HAL_DMA_IRQHandler+0x208>)
 8000ebe:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	f000 8094 	beq.w	8000ff2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000ed2:	e08e      	b.n	8000ff2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed8:	2202      	movs	r2, #2
 8000eda:	409a      	lsls	r2, r3
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d056      	beq.n	8000f92 <HAL_DMA_IRQHandler+0x186>
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d051      	beq.n	8000f92 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f003 0320 	and.w	r3, r3, #32
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d10b      	bne.n	8000f14 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f022 020a 	bic.w	r2, r2, #10
 8000f0a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a38      	ldr	r2, [pc, #224]	; (8000ffc <HAL_DMA_IRQHandler+0x1f0>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d029      	beq.n	8000f72 <HAL_DMA_IRQHandler+0x166>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a37      	ldr	r2, [pc, #220]	; (8001000 <HAL_DMA_IRQHandler+0x1f4>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d022      	beq.n	8000f6e <HAL_DMA_IRQHandler+0x162>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a35      	ldr	r2, [pc, #212]	; (8001004 <HAL_DMA_IRQHandler+0x1f8>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d01a      	beq.n	8000f68 <HAL_DMA_IRQHandler+0x15c>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a34      	ldr	r2, [pc, #208]	; (8001008 <HAL_DMA_IRQHandler+0x1fc>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d012      	beq.n	8000f62 <HAL_DMA_IRQHandler+0x156>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a32      	ldr	r2, [pc, #200]	; (800100c <HAL_DMA_IRQHandler+0x200>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d00a      	beq.n	8000f5c <HAL_DMA_IRQHandler+0x150>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a31      	ldr	r2, [pc, #196]	; (8001010 <HAL_DMA_IRQHandler+0x204>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d102      	bne.n	8000f56 <HAL_DMA_IRQHandler+0x14a>
 8000f50:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f54:	e00e      	b.n	8000f74 <HAL_DMA_IRQHandler+0x168>
 8000f56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f5a:	e00b      	b.n	8000f74 <HAL_DMA_IRQHandler+0x168>
 8000f5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f60:	e008      	b.n	8000f74 <HAL_DMA_IRQHandler+0x168>
 8000f62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f66:	e005      	b.n	8000f74 <HAL_DMA_IRQHandler+0x168>
 8000f68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f6c:	e002      	b.n	8000f74 <HAL_DMA_IRQHandler+0x168>
 8000f6e:	2320      	movs	r3, #32
 8000f70:	e000      	b.n	8000f74 <HAL_DMA_IRQHandler+0x168>
 8000f72:	2302      	movs	r3, #2
 8000f74:	4a27      	ldr	r2, [pc, #156]	; (8001014 <HAL_DMA_IRQHandler+0x208>)
 8000f76:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d034      	beq.n	8000ff2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000f90:	e02f      	b.n	8000ff2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	2208      	movs	r2, #8
 8000f98:	409a      	lsls	r2, r3
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d028      	beq.n	8000ff4 <HAL_DMA_IRQHandler+0x1e8>
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	f003 0308 	and.w	r3, r3, #8
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d023      	beq.n	8000ff4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f022 020e 	bic.w	r2, r2, #14
 8000fba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2201      	movs	r2, #1
 8000fd0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d004      	beq.n	8000ff4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	4798      	blx	r3
    }
  }
  return;
 8000ff2:	bf00      	nop
 8000ff4:	bf00      	nop
}
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40020008 	.word	0x40020008
 8001000:	4002001c 	.word	0x4002001c
 8001004:	40020030 	.word	0x40020030
 8001008:	40020044 	.word	0x40020044
 800100c:	40020058 	.word	0x40020058
 8001010:	4002006c 	.word	0x4002006c
 8001014:	40020000 	.word	0x40020000

08001018 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
 8001024:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800102e:	2101      	movs	r1, #1
 8001030:	fa01 f202 	lsl.w	r2, r1, r2
 8001034:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	2b10      	cmp	r3, #16
 8001044:	d108      	bne.n	8001058 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	68ba      	ldr	r2, [r7, #8]
 8001054:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001056:	e007      	b.n	8001068 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	68ba      	ldr	r2, [r7, #8]
 800105e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	60da      	str	r2, [r3, #12]
}
 8001068:	bf00      	nop
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr
	...

08001074 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001074:	b480      	push	{r7}
 8001076:	b08b      	sub	sp, #44	; 0x2c
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800107e:	2300      	movs	r3, #0
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001082:	2300      	movs	r3, #0
 8001084:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001086:	e169      	b.n	800135c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001088:	2201      	movs	r2, #1
 800108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	69fa      	ldr	r2, [r7, #28]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	f040 8158 	bne.w	8001356 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	4a9a      	ldr	r2, [pc, #616]	; (8001314 <HAL_GPIO_Init+0x2a0>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d05e      	beq.n	800116e <HAL_GPIO_Init+0xfa>
 80010b0:	4a98      	ldr	r2, [pc, #608]	; (8001314 <HAL_GPIO_Init+0x2a0>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d875      	bhi.n	80011a2 <HAL_GPIO_Init+0x12e>
 80010b6:	4a98      	ldr	r2, [pc, #608]	; (8001318 <HAL_GPIO_Init+0x2a4>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d058      	beq.n	800116e <HAL_GPIO_Init+0xfa>
 80010bc:	4a96      	ldr	r2, [pc, #600]	; (8001318 <HAL_GPIO_Init+0x2a4>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d86f      	bhi.n	80011a2 <HAL_GPIO_Init+0x12e>
 80010c2:	4a96      	ldr	r2, [pc, #600]	; (800131c <HAL_GPIO_Init+0x2a8>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d052      	beq.n	800116e <HAL_GPIO_Init+0xfa>
 80010c8:	4a94      	ldr	r2, [pc, #592]	; (800131c <HAL_GPIO_Init+0x2a8>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d869      	bhi.n	80011a2 <HAL_GPIO_Init+0x12e>
 80010ce:	4a94      	ldr	r2, [pc, #592]	; (8001320 <HAL_GPIO_Init+0x2ac>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d04c      	beq.n	800116e <HAL_GPIO_Init+0xfa>
 80010d4:	4a92      	ldr	r2, [pc, #584]	; (8001320 <HAL_GPIO_Init+0x2ac>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d863      	bhi.n	80011a2 <HAL_GPIO_Init+0x12e>
 80010da:	4a92      	ldr	r2, [pc, #584]	; (8001324 <HAL_GPIO_Init+0x2b0>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d046      	beq.n	800116e <HAL_GPIO_Init+0xfa>
 80010e0:	4a90      	ldr	r2, [pc, #576]	; (8001324 <HAL_GPIO_Init+0x2b0>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d85d      	bhi.n	80011a2 <HAL_GPIO_Init+0x12e>
 80010e6:	2b12      	cmp	r3, #18
 80010e8:	d82a      	bhi.n	8001140 <HAL_GPIO_Init+0xcc>
 80010ea:	2b12      	cmp	r3, #18
 80010ec:	d859      	bhi.n	80011a2 <HAL_GPIO_Init+0x12e>
 80010ee:	a201      	add	r2, pc, #4	; (adr r2, 80010f4 <HAL_GPIO_Init+0x80>)
 80010f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f4:	0800116f 	.word	0x0800116f
 80010f8:	08001149 	.word	0x08001149
 80010fc:	0800115b 	.word	0x0800115b
 8001100:	0800119d 	.word	0x0800119d
 8001104:	080011a3 	.word	0x080011a3
 8001108:	080011a3 	.word	0x080011a3
 800110c:	080011a3 	.word	0x080011a3
 8001110:	080011a3 	.word	0x080011a3
 8001114:	080011a3 	.word	0x080011a3
 8001118:	080011a3 	.word	0x080011a3
 800111c:	080011a3 	.word	0x080011a3
 8001120:	080011a3 	.word	0x080011a3
 8001124:	080011a3 	.word	0x080011a3
 8001128:	080011a3 	.word	0x080011a3
 800112c:	080011a3 	.word	0x080011a3
 8001130:	080011a3 	.word	0x080011a3
 8001134:	080011a3 	.word	0x080011a3
 8001138:	08001151 	.word	0x08001151
 800113c:	08001165 	.word	0x08001165
 8001140:	4a79      	ldr	r2, [pc, #484]	; (8001328 <HAL_GPIO_Init+0x2b4>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d013      	beq.n	800116e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001146:	e02c      	b.n	80011a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	623b      	str	r3, [r7, #32]
          break;
 800114e:	e029      	b.n	80011a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	3304      	adds	r3, #4
 8001156:	623b      	str	r3, [r7, #32]
          break;
 8001158:	e024      	b.n	80011a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	3308      	adds	r3, #8
 8001160:	623b      	str	r3, [r7, #32]
          break;
 8001162:	e01f      	b.n	80011a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	330c      	adds	r3, #12
 800116a:	623b      	str	r3, [r7, #32]
          break;
 800116c:	e01a      	b.n	80011a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d102      	bne.n	800117c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001176:	2304      	movs	r3, #4
 8001178:	623b      	str	r3, [r7, #32]
          break;
 800117a:	e013      	b.n	80011a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d105      	bne.n	8001190 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001184:	2308      	movs	r3, #8
 8001186:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	69fa      	ldr	r2, [r7, #28]
 800118c:	611a      	str	r2, [r3, #16]
          break;
 800118e:	e009      	b.n	80011a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001190:	2308      	movs	r3, #8
 8001192:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	69fa      	ldr	r2, [r7, #28]
 8001198:	615a      	str	r2, [r3, #20]
          break;
 800119a:	e003      	b.n	80011a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800119c:	2300      	movs	r3, #0
 800119e:	623b      	str	r3, [r7, #32]
          break;
 80011a0:	e000      	b.n	80011a4 <HAL_GPIO_Init+0x130>
          break;
 80011a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	2bff      	cmp	r3, #255	; 0xff
 80011a8:	d801      	bhi.n	80011ae <HAL_GPIO_Init+0x13a>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	e001      	b.n	80011b2 <HAL_GPIO_Init+0x13e>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3304      	adds	r3, #4
 80011b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	2bff      	cmp	r3, #255	; 0xff
 80011b8:	d802      	bhi.n	80011c0 <HAL_GPIO_Init+0x14c>
 80011ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	e002      	b.n	80011c6 <HAL_GPIO_Init+0x152>
 80011c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c2:	3b08      	subs	r3, #8
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	210f      	movs	r1, #15
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	fa01 f303 	lsl.w	r3, r1, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	401a      	ands	r2, r3
 80011d8:	6a39      	ldr	r1, [r7, #32]
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	fa01 f303 	lsl.w	r3, r1, r3
 80011e0:	431a      	orrs	r2, r3
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f000 80b1 	beq.w	8001356 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011f4:	4b4d      	ldr	r3, [pc, #308]	; (800132c <HAL_GPIO_Init+0x2b8>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	4a4c      	ldr	r2, [pc, #304]	; (800132c <HAL_GPIO_Init+0x2b8>)
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	6193      	str	r3, [r2, #24]
 8001200:	4b4a      	ldr	r3, [pc, #296]	; (800132c <HAL_GPIO_Init+0x2b8>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800120c:	4a48      	ldr	r2, [pc, #288]	; (8001330 <HAL_GPIO_Init+0x2bc>)
 800120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001210:	089b      	lsrs	r3, r3, #2
 8001212:	3302      	adds	r3, #2
 8001214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001218:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800121a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121c:	f003 0303 	and.w	r3, r3, #3
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	220f      	movs	r2, #15
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	4013      	ands	r3, r2
 800122e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a40      	ldr	r2, [pc, #256]	; (8001334 <HAL_GPIO_Init+0x2c0>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d013      	beq.n	8001260 <HAL_GPIO_Init+0x1ec>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a3f      	ldr	r2, [pc, #252]	; (8001338 <HAL_GPIO_Init+0x2c4>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d00d      	beq.n	800125c <HAL_GPIO_Init+0x1e8>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a3e      	ldr	r2, [pc, #248]	; (800133c <HAL_GPIO_Init+0x2c8>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d007      	beq.n	8001258 <HAL_GPIO_Init+0x1e4>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a3d      	ldr	r2, [pc, #244]	; (8001340 <HAL_GPIO_Init+0x2cc>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d101      	bne.n	8001254 <HAL_GPIO_Init+0x1e0>
 8001250:	2303      	movs	r3, #3
 8001252:	e006      	b.n	8001262 <HAL_GPIO_Init+0x1ee>
 8001254:	2304      	movs	r3, #4
 8001256:	e004      	b.n	8001262 <HAL_GPIO_Init+0x1ee>
 8001258:	2302      	movs	r3, #2
 800125a:	e002      	b.n	8001262 <HAL_GPIO_Init+0x1ee>
 800125c:	2301      	movs	r3, #1
 800125e:	e000      	b.n	8001262 <HAL_GPIO_Init+0x1ee>
 8001260:	2300      	movs	r3, #0
 8001262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001264:	f002 0203 	and.w	r2, r2, #3
 8001268:	0092      	lsls	r2, r2, #2
 800126a:	4093      	lsls	r3, r2
 800126c:	68fa      	ldr	r2, [r7, #12]
 800126e:	4313      	orrs	r3, r2
 8001270:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001272:	492f      	ldr	r1, [pc, #188]	; (8001330 <HAL_GPIO_Init+0x2bc>)
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	089b      	lsrs	r3, r3, #2
 8001278:	3302      	adds	r3, #2
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d006      	beq.n	800129a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800128c:	4b2d      	ldr	r3, [pc, #180]	; (8001344 <HAL_GPIO_Init+0x2d0>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	492c      	ldr	r1, [pc, #176]	; (8001344 <HAL_GPIO_Init+0x2d0>)
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	4313      	orrs	r3, r2
 8001296:	600b      	str	r3, [r1, #0]
 8001298:	e006      	b.n	80012a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800129a:	4b2a      	ldr	r3, [pc, #168]	; (8001344 <HAL_GPIO_Init+0x2d0>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	43db      	mvns	r3, r3
 80012a2:	4928      	ldr	r1, [pc, #160]	; (8001344 <HAL_GPIO_Init+0x2d0>)
 80012a4:	4013      	ands	r3, r2
 80012a6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d006      	beq.n	80012c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012b4:	4b23      	ldr	r3, [pc, #140]	; (8001344 <HAL_GPIO_Init+0x2d0>)
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	4922      	ldr	r1, [pc, #136]	; (8001344 <HAL_GPIO_Init+0x2d0>)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	4313      	orrs	r3, r2
 80012be:	604b      	str	r3, [r1, #4]
 80012c0:	e006      	b.n	80012d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012c2:	4b20      	ldr	r3, [pc, #128]	; (8001344 <HAL_GPIO_Init+0x2d0>)
 80012c4:	685a      	ldr	r2, [r3, #4]
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	43db      	mvns	r3, r3
 80012ca:	491e      	ldr	r1, [pc, #120]	; (8001344 <HAL_GPIO_Init+0x2d0>)
 80012cc:	4013      	ands	r3, r2
 80012ce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d006      	beq.n	80012ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012dc:	4b19      	ldr	r3, [pc, #100]	; (8001344 <HAL_GPIO_Init+0x2d0>)
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	4918      	ldr	r1, [pc, #96]	; (8001344 <HAL_GPIO_Init+0x2d0>)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	608b      	str	r3, [r1, #8]
 80012e8:	e006      	b.n	80012f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012ea:	4b16      	ldr	r3, [pc, #88]	; (8001344 <HAL_GPIO_Init+0x2d0>)
 80012ec:	689a      	ldr	r2, [r3, #8]
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	43db      	mvns	r3, r3
 80012f2:	4914      	ldr	r1, [pc, #80]	; (8001344 <HAL_GPIO_Init+0x2d0>)
 80012f4:	4013      	ands	r3, r2
 80012f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d021      	beq.n	8001348 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001304:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <HAL_GPIO_Init+0x2d0>)
 8001306:	68da      	ldr	r2, [r3, #12]
 8001308:	490e      	ldr	r1, [pc, #56]	; (8001344 <HAL_GPIO_Init+0x2d0>)
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	4313      	orrs	r3, r2
 800130e:	60cb      	str	r3, [r1, #12]
 8001310:	e021      	b.n	8001356 <HAL_GPIO_Init+0x2e2>
 8001312:	bf00      	nop
 8001314:	10320000 	.word	0x10320000
 8001318:	10310000 	.word	0x10310000
 800131c:	10220000 	.word	0x10220000
 8001320:	10210000 	.word	0x10210000
 8001324:	10120000 	.word	0x10120000
 8001328:	10110000 	.word	0x10110000
 800132c:	40021000 	.word	0x40021000
 8001330:	40010000 	.word	0x40010000
 8001334:	40010800 	.word	0x40010800
 8001338:	40010c00 	.word	0x40010c00
 800133c:	40011000 	.word	0x40011000
 8001340:	40011400 	.word	0x40011400
 8001344:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001348:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <HAL_GPIO_Init+0x304>)
 800134a:	68da      	ldr	r2, [r3, #12]
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	43db      	mvns	r3, r3
 8001350:	4909      	ldr	r1, [pc, #36]	; (8001378 <HAL_GPIO_Init+0x304>)
 8001352:	4013      	ands	r3, r2
 8001354:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001358:	3301      	adds	r3, #1
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001362:	fa22 f303 	lsr.w	r3, r2, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	f47f ae8e 	bne.w	8001088 <HAL_GPIO_Init+0x14>
  }
}
 800136c:	bf00      	nop
 800136e:	bf00      	nop
 8001370:	372c      	adds	r7, #44	; 0x2c
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr
 8001378:	40010400 	.word	0x40010400

0800137c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	807b      	strh	r3, [r7, #2]
 8001388:	4613      	mov	r3, r2
 800138a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800138c:	787b      	ldrb	r3, [r7, #1]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001392:	887a      	ldrh	r2, [r7, #2]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001398:	e003      	b.n	80013a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800139a:	887b      	ldrh	r3, [r7, #2]
 800139c:	041a      	lsls	r2, r3, #16
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	611a      	str	r2, [r3, #16]
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr

080013ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ae:	b08b      	sub	sp, #44	; 0x2c
 80013b0:	af06      	add	r7, sp, #24
 80013b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e0fd      	b.n	80015ba <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d106      	bne.n	80013d8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f007 f8e2 	bl	800859c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2203      	movs	r2, #3
 80013dc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f003 f967 	bl	80046b8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	687e      	ldr	r6, [r7, #4]
 80013f2:	466d      	mov	r5, sp
 80013f4:	f106 0410 	add.w	r4, r6, #16
 80013f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013fc:	6823      	ldr	r3, [r4, #0]
 80013fe:	602b      	str	r3, [r5, #0]
 8001400:	1d33      	adds	r3, r6, #4
 8001402:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001404:	6838      	ldr	r0, [r7, #0]
 8001406:	f003 f931 	bl	800466c <USB_CoreInit>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d005      	beq.n	800141c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2202      	movs	r2, #2
 8001414:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e0ce      	b.n	80015ba <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f003 f962 	bl	80046ec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001428:	2300      	movs	r3, #0
 800142a:	73fb      	strb	r3, [r7, #15]
 800142c:	e04c      	b.n	80014c8 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	6879      	ldr	r1, [r7, #4]
 8001432:	1c5a      	adds	r2, r3, #1
 8001434:	4613      	mov	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	440b      	add	r3, r1
 800143e:	3301      	adds	r3, #1
 8001440:	2201      	movs	r2, #1
 8001442:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001444:	7bfb      	ldrb	r3, [r7, #15]
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	1c5a      	adds	r2, r3, #1
 800144a:	4613      	mov	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	440b      	add	r3, r1
 8001454:	7bfa      	ldrb	r2, [r7, #15]
 8001456:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001458:	7bfa      	ldrb	r2, [r7, #15]
 800145a:	7bfb      	ldrb	r3, [r7, #15]
 800145c:	b298      	uxth	r0, r3
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	4613      	mov	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	440b      	add	r3, r1
 800146a:	3336      	adds	r3, #54	; 0x36
 800146c:	4602      	mov	r2, r0
 800146e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001470:	7bfb      	ldrb	r3, [r7, #15]
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	1c5a      	adds	r2, r3, #1
 8001476:	4613      	mov	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4413      	add	r3, r2
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	440b      	add	r3, r1
 8001480:	3303      	adds	r3, #3
 8001482:	2200      	movs	r2, #0
 8001484:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001486:	7bfa      	ldrb	r2, [r7, #15]
 8001488:	6879      	ldr	r1, [r7, #4]
 800148a:	4613      	mov	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	440b      	add	r3, r1
 8001494:	3338      	adds	r3, #56	; 0x38
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800149a:	7bfa      	ldrb	r2, [r7, #15]
 800149c:	6879      	ldr	r1, [r7, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	440b      	add	r3, r1
 80014a8:	333c      	adds	r3, #60	; 0x3c
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80014ae:	7bfa      	ldrb	r2, [r7, #15]
 80014b0:	6879      	ldr	r1, [r7, #4]
 80014b2:	4613      	mov	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	440b      	add	r3, r1
 80014bc:	3340      	adds	r3, #64	; 0x40
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
 80014c4:	3301      	adds	r3, #1
 80014c6:	73fb      	strb	r3, [r7, #15]
 80014c8:	7bfa      	ldrb	r2, [r7, #15]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d3ad      	bcc.n	800142e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014d2:	2300      	movs	r3, #0
 80014d4:	73fb      	strb	r3, [r7, #15]
 80014d6:	e044      	b.n	8001562 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014d8:	7bfa      	ldrb	r2, [r7, #15]
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	4613      	mov	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	440b      	add	r3, r1
 80014e6:	f203 1369 	addw	r3, r3, #361	; 0x169
 80014ea:	2200      	movs	r2, #0
 80014ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014ee:	7bfa      	ldrb	r2, [r7, #15]
 80014f0:	6879      	ldr	r1, [r7, #4]
 80014f2:	4613      	mov	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	440b      	add	r3, r1
 80014fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001500:	7bfa      	ldrb	r2, [r7, #15]
 8001502:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001504:	7bfa      	ldrb	r2, [r7, #15]
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	4613      	mov	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4413      	add	r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	440b      	add	r3, r1
 8001512:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001516:	2200      	movs	r2, #0
 8001518:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800151a:	7bfa      	ldrb	r2, [r7, #15]
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	4613      	mov	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	440b      	add	r3, r1
 8001528:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001530:	7bfa      	ldrb	r2, [r7, #15]
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	4613      	mov	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	440b      	add	r3, r1
 800153e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001546:	7bfa      	ldrb	r2, [r7, #15]
 8001548:	6879      	ldr	r1, [r7, #4]
 800154a:	4613      	mov	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	440b      	add	r3, r1
 8001554:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800155c:	7bfb      	ldrb	r3, [r7, #15]
 800155e:	3301      	adds	r3, #1
 8001560:	73fb      	strb	r3, [r7, #15]
 8001562:	7bfa      	ldrb	r2, [r7, #15]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	429a      	cmp	r2, r3
 800156a:	d3b5      	bcc.n	80014d8 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	603b      	str	r3, [r7, #0]
 8001572:	687e      	ldr	r6, [r7, #4]
 8001574:	466d      	mov	r5, sp
 8001576:	f106 0410 	add.w	r4, r6, #16
 800157a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800157c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800157e:	6823      	ldr	r3, [r4, #0]
 8001580:	602b      	str	r3, [r5, #0]
 8001582:	1d33      	adds	r3, r6, #4
 8001584:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001586:	6838      	ldr	r0, [r7, #0]
 8001588:	f003 f8bc 	bl	8004704 <USB_DevInit>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d005      	beq.n	800159e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2202      	movs	r2, #2
 8001596:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e00d      	b.n	80015ba <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2201      	movs	r2, #1
 80015aa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f005 fa2d 	bl	8006a12 <USB_DevDisconnect>

  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015c2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d101      	bne.n	80015d8 <HAL_PCD_Start+0x16>
 80015d4:	2302      	movs	r3, #2
 80015d6:	e016      	b.n	8001606 <HAL_PCD_Start+0x44>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f003 f851 	bl	800468c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80015ea:	2101      	movs	r1, #1
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f007 fa48 	bl	8008a82 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f005 fa01 	bl	80069fe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b088      	sub	sp, #32
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f005 fa03 	bl	8006a26 <USB_ReadInterrupts>
 8001620:	4603      	mov	r3, r0
 8001622:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001626:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800162a:	d102      	bne.n	8001632 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 fb61 	bl	8001cf4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f005 f9f5 	bl	8006a26 <USB_ReadInterrupts>
 800163c:	4603      	mov	r3, r0
 800163e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001646:	d112      	bne.n	800166e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001650:	b29a      	uxth	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800165a:	b292      	uxth	r2, r2
 800165c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f007 f816 	bl	8008692 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001666:	2100      	movs	r1, #0
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 f925 	bl	80018b8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f005 f9d7 	bl	8006a26 <USB_ReadInterrupts>
 8001678:	4603      	mov	r3, r0
 800167a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800167e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001682:	d10b      	bne.n	800169c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800168c:	b29a      	uxth	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001696:	b292      	uxth	r2, r2
 8001698:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f005 f9c0 	bl	8006a26 <USB_ReadInterrupts>
 80016a6:	4603      	mov	r3, r0
 80016a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016b0:	d10b      	bne.n	80016ca <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80016c4:	b292      	uxth	r2, r2
 80016c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f005 f9a9 	bl	8006a26 <USB_ReadInterrupts>
 80016d4:	4603      	mov	r3, r0
 80016d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016de:	d126      	bne.n	800172e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 0204 	bic.w	r2, r2, #4
 80016f2:	b292      	uxth	r2, r2
 80016f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001700:	b29a      	uxth	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 0208 	bic.w	r2, r2, #8
 800170a:	b292      	uxth	r2, r2
 800170c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f006 fff7 	bl	8008704 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800171e:	b29a      	uxth	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001728:	b292      	uxth	r2, r2
 800172a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f005 f977 	bl	8006a26 <USB_ReadInterrupts>
 8001738:	4603      	mov	r3, r0
 800173a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800173e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001742:	f040 8084 	bne.w	800184e <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001746:	2300      	movs	r3, #0
 8001748:	77fb      	strb	r3, [r7, #31]
 800174a:	e011      	b.n	8001770 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	461a      	mov	r2, r3
 8001752:	7ffb      	ldrb	r3, [r7, #31]
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	441a      	add	r2, r3
 8001758:	7ffb      	ldrb	r3, [r7, #31]
 800175a:	8812      	ldrh	r2, [r2, #0]
 800175c:	b292      	uxth	r2, r2
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	f107 0120 	add.w	r1, r7, #32
 8001764:	440b      	add	r3, r1
 8001766:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800176a:	7ffb      	ldrb	r3, [r7, #31]
 800176c:	3301      	adds	r3, #1
 800176e:	77fb      	strb	r3, [r7, #31]
 8001770:	7ffb      	ldrb	r3, [r7, #31]
 8001772:	2b07      	cmp	r3, #7
 8001774:	d9ea      	bls.n	800174c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800177e:	b29a      	uxth	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f042 0201 	orr.w	r2, r2, #1
 8001788:	b292      	uxth	r2, r2
 800178a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001796:	b29a      	uxth	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 0201 	bic.w	r2, r2, #1
 80017a0:	b292      	uxth	r2, r2
 80017a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80017a6:	bf00      	nop
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0f6      	beq.n	80017a8 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017cc:	b292      	uxth	r2, r2
 80017ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80017d2:	2300      	movs	r3, #0
 80017d4:	77fb      	strb	r3, [r7, #31]
 80017d6:	e010      	b.n	80017fa <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80017d8:	7ffb      	ldrb	r3, [r7, #31]
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6812      	ldr	r2, [r2, #0]
 80017de:	4611      	mov	r1, r2
 80017e0:	7ffa      	ldrb	r2, [r7, #31]
 80017e2:	0092      	lsls	r2, r2, #2
 80017e4:	440a      	add	r2, r1
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	f107 0120 	add.w	r1, r7, #32
 80017ec:	440b      	add	r3, r1
 80017ee:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80017f2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80017f4:	7ffb      	ldrb	r3, [r7, #31]
 80017f6:	3301      	adds	r3, #1
 80017f8:	77fb      	strb	r3, [r7, #31]
 80017fa:	7ffb      	ldrb	r3, [r7, #31]
 80017fc:	2b07      	cmp	r3, #7
 80017fe:	d9eb      	bls.n	80017d8 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001808:	b29a      	uxth	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f042 0208 	orr.w	r2, r2, #8
 8001812:	b292      	uxth	r2, r2
 8001814:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001820:	b29a      	uxth	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800182a:	b292      	uxth	r2, r2
 800182c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001838:	b29a      	uxth	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f042 0204 	orr.w	r2, r2, #4
 8001842:	b292      	uxth	r2, r2
 8001844:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f006 ff41 	bl	80086d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f005 f8e7 	bl	8006a26 <USB_ReadInterrupts>
 8001858:	4603      	mov	r3, r0
 800185a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800185e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001862:	d10e      	bne.n	8001882 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800186c:	b29a      	uxth	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001876:	b292      	uxth	r2, r2
 8001878:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f006 fefa 	bl	8008676 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f005 f8cd 	bl	8006a26 <USB_ReadInterrupts>
 800188c:	4603      	mov	r3, r0
 800188e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001896:	d10b      	bne.n	80018b0 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018aa:	b292      	uxth	r2, r2
 80018ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80018b0:	bf00      	nop
 80018b2:	3720      	adds	r7, #32
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	460b      	mov	r3, r1
 80018c2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d101      	bne.n	80018d2 <HAL_PCD_SetAddress+0x1a>
 80018ce:	2302      	movs	r3, #2
 80018d0:	e013      	b.n	80018fa <HAL_PCD_SetAddress+0x42>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2201      	movs	r2, #1
 80018d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	78fa      	ldrb	r2, [r7, #3]
 80018de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	78fa      	ldrb	r2, [r7, #3]
 80018e8:	4611      	mov	r1, r2
 80018ea:	4618      	mov	r0, r3
 80018ec:	f005 f874 	bl	80069d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b084      	sub	sp, #16
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	4608      	mov	r0, r1
 800190c:	4611      	mov	r1, r2
 800190e:	461a      	mov	r2, r3
 8001910:	4603      	mov	r3, r0
 8001912:	70fb      	strb	r3, [r7, #3]
 8001914:	460b      	mov	r3, r1
 8001916:	803b      	strh	r3, [r7, #0]
 8001918:	4613      	mov	r3, r2
 800191a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001920:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001924:	2b00      	cmp	r3, #0
 8001926:	da0e      	bge.n	8001946 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001928:	78fb      	ldrb	r3, [r7, #3]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	1c5a      	adds	r2, r3, #1
 8001930:	4613      	mov	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	4413      	add	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2201      	movs	r2, #1
 8001942:	705a      	strb	r2, [r3, #1]
 8001944:	e00e      	b.n	8001964 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001946:	78fb      	ldrb	r3, [r7, #3]
 8001948:	f003 0207 	and.w	r2, r3, #7
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	4413      	add	r3, r2
 800195c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2200      	movs	r2, #0
 8001962:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001964:	78fb      	ldrb	r3, [r7, #3]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	b2da      	uxtb	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001970:	883a      	ldrh	r2, [r7, #0]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	78ba      	ldrb	r2, [r7, #2]
 800197a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	785b      	ldrb	r3, [r3, #1]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d004      	beq.n	800198e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	b29a      	uxth	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800198e:	78bb      	ldrb	r3, [r7, #2]
 8001990:	2b02      	cmp	r3, #2
 8001992:	d102      	bne.n	800199a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2200      	movs	r2, #0
 8001998:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d101      	bne.n	80019a8 <HAL_PCD_EP_Open+0xa6>
 80019a4:	2302      	movs	r3, #2
 80019a6:	e00e      	b.n	80019c6 <HAL_PCD_EP_Open+0xc4>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	68f9      	ldr	r1, [r7, #12]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f002 fec4 	bl	8004744 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80019c4:	7afb      	ldrb	r3, [r7, #11]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b084      	sub	sp, #16
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
 80019d6:	460b      	mov	r3, r1
 80019d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	da0e      	bge.n	8001a00 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019e2:	78fb      	ldrb	r3, [r7, #3]
 80019e4:	f003 0307 	and.w	r3, r3, #7
 80019e8:	1c5a      	adds	r2, r3, #1
 80019ea:	4613      	mov	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2201      	movs	r2, #1
 80019fc:	705a      	strb	r2, [r3, #1]
 80019fe:	e00e      	b.n	8001a1e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a00:	78fb      	ldrb	r3, [r7, #3]
 8001a02:	f003 0207 	and.w	r2, r3, #7
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001a1e:	78fb      	ldrb	r3, [r7, #3]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d101      	bne.n	8001a38 <HAL_PCD_EP_Close+0x6a>
 8001a34:	2302      	movs	r3, #2
 8001a36:	e00e      	b.n	8001a56 <HAL_PCD_EP_Close+0x88>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68f9      	ldr	r1, [r7, #12]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f003 f9e6 	bl	8004e18 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b086      	sub	sp, #24
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	60f8      	str	r0, [r7, #12]
 8001a66:	607a      	str	r2, [r7, #4]
 8001a68:	603b      	str	r3, [r7, #0]
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a6e:	7afb      	ldrb	r3, [r7, #11]
 8001a70:	f003 0207 	and.w	r2, r3, #7
 8001a74:	4613      	mov	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	4413      	add	r3, r2
 8001a84:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	2200      	movs	r2, #0
 8001a96:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a9e:	7afb      	ldrb	r3, [r7, #11]
 8001aa0:	f003 0307 	and.w	r3, r3, #7
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001aaa:	7afb      	ldrb	r3, [r7, #11]
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d106      	bne.n	8001ac2 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6979      	ldr	r1, [r7, #20]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f003 fb98 	bl	80051f0 <USB_EPStartXfer>
 8001ac0:	e005      	b.n	8001ace <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6979      	ldr	r1, [r7, #20]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f003 fb91 	bl	80051f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001ae4:	78fb      	ldrb	r3, [r7, #3]
 8001ae6:	f003 0207 	and.w	r2, r3, #7
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	4613      	mov	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	440b      	add	r3, r1
 8001af6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001afa:	681b      	ldr	r3, [r3, #0]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bc80      	pop	{r7}
 8001b04:	4770      	bx	lr

08001b06 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b086      	sub	sp, #24
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	60f8      	str	r0, [r7, #12]
 8001b0e:	607a      	str	r2, [r7, #4]
 8001b10:	603b      	str	r3, [r7, #0]
 8001b12:	460b      	mov	r3, r1
 8001b14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b16:	7afb      	ldrb	r3, [r7, #11]
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	1c5a      	adds	r2, r3, #1
 8001b1e:	4613      	mov	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4413      	add	r3, r2
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	4413      	add	r3, r2
 8001b2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b52:	7afb      	ldrb	r3, [r7, #11]
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b5e:	7afb      	ldrb	r3, [r7, #11]
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d106      	bne.n	8001b76 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6979      	ldr	r1, [r7, #20]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f003 fb3e 	bl	80051f0 <USB_EPStartXfer>
 8001b74:	e005      	b.n	8001b82 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6979      	ldr	r1, [r7, #20]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f003 fb37 	bl	80051f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	460b      	mov	r3, r1
 8001b96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b98:	78fb      	ldrb	r3, [r7, #3]
 8001b9a:	f003 0207 	and.w	r2, r3, #7
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d901      	bls.n	8001baa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e04c      	b.n	8001c44 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001baa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	da0e      	bge.n	8001bd0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bb2:	78fb      	ldrb	r3, [r7, #3]
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	1c5a      	adds	r2, r3, #1
 8001bba:	4613      	mov	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	705a      	strb	r2, [r3, #1]
 8001bce:	e00c      	b.n	8001bea <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001bd0:	78fa      	ldrb	r2, [r7, #3]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	4413      	add	r3, r2
 8001be2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2200      	movs	r2, #0
 8001be8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2201      	movs	r2, #1
 8001bee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bf0:	78fb      	ldrb	r3, [r7, #3]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d101      	bne.n	8001c0a <HAL_PCD_EP_SetStall+0x7e>
 8001c06:	2302      	movs	r3, #2
 8001c08:	e01c      	b.n	8001c44 <HAL_PCD_EP_SetStall+0xb8>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68f9      	ldr	r1, [r7, #12]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f004 fde0 	bl	80067de <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c1e:	78fb      	ldrb	r3, [r7, #3]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d108      	bne.n	8001c3a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001c32:	4619      	mov	r1, r3
 8001c34:	4610      	mov	r0, r2
 8001c36:	f004 ff05 	bl	8006a44 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	460b      	mov	r3, r1
 8001c56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c58:	78fb      	ldrb	r3, [r7, #3]
 8001c5a:	f003 020f 	and.w	r2, r3, #15
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d901      	bls.n	8001c6a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e040      	b.n	8001cec <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	da0e      	bge.n	8001c90 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c72:	78fb      	ldrb	r3, [r7, #3]
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	1c5a      	adds	r2, r3, #1
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	705a      	strb	r2, [r3, #1]
 8001c8e:	e00e      	b.n	8001cae <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c90:	78fb      	ldrb	r3, [r7, #3]
 8001c92:	f003 0207 	and.w	r2, r3, #7
 8001c96:	4613      	mov	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d101      	bne.n	8001cce <HAL_PCD_EP_ClrStall+0x82>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	e00e      	b.n	8001cec <HAL_PCD_EP_ClrStall+0xa0>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68f9      	ldr	r1, [r7, #12]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f004 fdce 	bl	800687e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08e      	sub	sp, #56	; 0x38
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001cfc:	e2ec      	b.n	80022d8 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d06:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001d08:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	f003 030f 	and.w	r3, r3, #15
 8001d10:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001d14:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f040 8161 	bne.w	8001fe0 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001d1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d20:	f003 0310 	and.w	r3, r3, #16
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d152      	bne.n	8001dce <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	881b      	ldrh	r3, [r3, #0]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d38:	81fb      	strh	r3, [r7, #14]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	89fb      	ldrh	r3, [r7, #14]
 8001d40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3328      	adds	r3, #40	; 0x28
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	4413      	add	r3, r2
 8001d66:	3302      	adds	r3, #2
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6812      	ldr	r2, [r2, #0]
 8001d6e:	4413      	add	r3, r2
 8001d70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d74:	881b      	ldrh	r3, [r3, #0]
 8001d76:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	695a      	ldr	r2, [r3, #20]
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	441a      	add	r2, r3
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f006 fc57 	bl	8008642 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 829b 	beq.w	80022d8 <PCD_EP_ISR_Handler+0x5e4>
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f040 8296 	bne.w	80022d8 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	b292      	uxth	r2, r2
 8001dc0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001dcc:	e284      	b.n	80022d8 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001dde:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001de0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d034      	beq.n	8001e52 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	461a      	mov	r2, r3
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3306      	adds	r3, #6
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	6812      	ldr	r2, [r2, #0]
 8001e04:	4413      	add	r3, r2
 8001e06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6818      	ldr	r0, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	f004 fe5c 	bl	8006ae4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	881b      	ldrh	r3, [r3, #0]
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e38:	4013      	ands	r3, r2
 8001e3a:	823b      	strh	r3, [r7, #16]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	8a3a      	ldrh	r2, [r7, #16]
 8001e42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e46:	b292      	uxth	r2, r2
 8001e48:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f006 fbcc 	bl	80085e8 <HAL_PCD_SetupStageCallback>
 8001e50:	e242      	b.n	80022d8 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e52:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f280 823e 	bge.w	80022d8 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e68:	4013      	ands	r3, r2
 8001e6a:	83bb      	strh	r3, [r7, #28]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	8bba      	ldrh	r2, [r7, #28]
 8001e72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e76:	b292      	uxth	r2, r2
 8001e78:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	461a      	mov	r2, r3
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	4413      	add	r3, r2
 8001e8e:	3306      	adds	r3, #6
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6812      	ldr	r2, [r2, #0]
 8001e96:	4413      	add	r3, r2
 8001e98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d019      	beq.n	8001ee2 <PCD_EP_ISR_Handler+0x1ee>
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d015      	beq.n	8001ee2 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6818      	ldr	r0, [r3, #0]
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	6959      	ldr	r1, [r3, #20]
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	f004 fe0c 	bl	8006ae4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	695a      	ldr	r2, [r3, #20]
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	441a      	add	r2, r3
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001eda:	2100      	movs	r1, #0
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f006 fb95 	bl	800860c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f040 81f2 	bne.w	80022d8 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	61bb      	str	r3, [r7, #24]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	461a      	mov	r2, r3
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	4413      	add	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001f12:	617b      	str	r3, [r7, #20]
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d112      	bne.n	8001f42 <PCD_EP_ISR_Handler+0x24e>
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	801a      	strh	r2, [r3, #0]
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	881b      	ldrh	r3, [r3, #0]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	801a      	strh	r2, [r3, #0]
 8001f40:	e02f      	b.n	8001fa2 <PCD_EP_ISR_Handler+0x2ae>
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	2b3e      	cmp	r3, #62	; 0x3e
 8001f48:	d813      	bhi.n	8001f72 <PCD_EP_ISR_Handler+0x27e>
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	085b      	lsrs	r3, r3, #1
 8001f50:	633b      	str	r3, [r7, #48]	; 0x30
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d002      	beq.n	8001f64 <PCD_EP_ISR_Handler+0x270>
 8001f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f60:	3301      	adds	r3, #1
 8001f62:	633b      	str	r3, [r7, #48]	; 0x30
 8001f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	029b      	lsls	r3, r3, #10
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	801a      	strh	r2, [r3, #0]
 8001f70:	e017      	b.n	8001fa2 <PCD_EP_ISR_Handler+0x2ae>
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	095b      	lsrs	r3, r3, #5
 8001f78:	633b      	str	r3, [r7, #48]	; 0x30
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	f003 031f 	and.w	r3, r3, #31
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d102      	bne.n	8001f8c <PCD_EP_ISR_Handler+0x298>
 8001f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	633b      	str	r3, [r7, #48]	; 0x30
 8001f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	029b      	lsls	r3, r3, #10
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fb2:	827b      	strh	r3, [r7, #18]
 8001fb4:	8a7b      	ldrh	r3, [r7, #18]
 8001fb6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001fba:	827b      	strh	r3, [r7, #18]
 8001fbc:	8a7b      	ldrh	r3, [r7, #18]
 8001fbe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001fc2:	827b      	strh	r3, [r7, #18]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	8a7b      	ldrh	r3, [r7, #18]
 8001fca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	8013      	strh	r3, [r2, #0]
 8001fde:	e17b      	b.n	80022d8 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	881b      	ldrh	r3, [r3, #0]
 8001ff0:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ff2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f280 80ea 	bge.w	80021d0 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	461a      	mov	r2, r3
 8002002:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	b29a      	uxth	r2, r3
 800200e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002012:	4013      	ands	r3, r2
 8002014:	853b      	strh	r3, [r7, #40]	; 0x28
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	461a      	mov	r2, r3
 800201c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4413      	add	r3, r2
 8002024:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002026:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800202a:	b292      	uxth	r2, r2
 800202c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800202e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002032:	4613      	mov	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	4413      	add	r3, r2
 8002042:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	7b1b      	ldrb	r3, [r3, #12]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d122      	bne.n	8002092 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002054:	b29b      	uxth	r3, r3
 8002056:	461a      	mov	r2, r3
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	4413      	add	r3, r2
 8002060:	3306      	adds	r3, #6
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	4413      	add	r3, r2
 800206a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002074:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002076:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002078:	2b00      	cmp	r3, #0
 800207a:	f000 8087 	beq.w	800218c <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6818      	ldr	r0, [r3, #0]
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	6959      	ldr	r1, [r3, #20]
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	88da      	ldrh	r2, [r3, #6]
 800208a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800208c:	f004 fd2a 	bl	8006ae4 <USB_ReadPMA>
 8002090:	e07c      	b.n	800218c <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	78db      	ldrb	r3, [r3, #3]
 8002096:	2b02      	cmp	r3, #2
 8002098:	d108      	bne.n	80020ac <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800209a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800209c:	461a      	mov	r2, r3
 800209e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 f927 	bl	80022f4 <HAL_PCD_EP_DB_Receive>
 80020a6:	4603      	mov	r3, r0
 80020a8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80020aa:	e06f      	b.n	800218c <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	461a      	mov	r2, r3
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	b29b      	uxth	r3, r3
 80020be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020c6:	847b      	strh	r3, [r7, #34]	; 0x22
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	461a      	mov	r2, r3
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	441a      	add	r2, r3
 80020d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80020d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	461a      	mov	r2, r3
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	881b      	ldrh	r3, [r3, #0]
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d021      	beq.n	800214a <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800210e:	b29b      	uxth	r3, r3
 8002110:	461a      	mov	r2, r3
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4413      	add	r3, r2
 800211a:	3302      	adds	r3, #2
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6812      	ldr	r2, [r2, #0]
 8002122:	4413      	add	r3, r2
 8002124:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800212e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002130:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002132:	2b00      	cmp	r3, #0
 8002134:	d02a      	beq.n	800218c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6818      	ldr	r0, [r3, #0]
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	6959      	ldr	r1, [r3, #20]
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	891a      	ldrh	r2, [r3, #8]
 8002142:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002144:	f004 fcce 	bl	8006ae4 <USB_ReadPMA>
 8002148:	e020      	b.n	800218c <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002152:	b29b      	uxth	r3, r3
 8002154:	461a      	mov	r2, r3
 8002156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	4413      	add	r3, r2
 800215e:	3306      	adds	r3, #6
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6812      	ldr	r2, [r2, #0]
 8002166:	4413      	add	r3, r2
 8002168:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800216c:	881b      	ldrh	r3, [r3, #0]
 800216e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002172:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002174:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002176:	2b00      	cmp	r3, #0
 8002178:	d008      	beq.n	800218c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6818      	ldr	r0, [r3, #0]
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	6959      	ldr	r1, [r3, #20]
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	895a      	ldrh	r2, [r3, #10]
 8002186:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002188:	f004 fcac 	bl	8006ae4 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	69da      	ldr	r2, [r3, #28]
 8002190:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002192:	441a      	add	r2, r3
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	695a      	ldr	r2, [r3, #20]
 800219c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800219e:	441a      	add	r2, r3
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d004      	beq.n	80021b6 <PCD_EP_ISR_Handler+0x4c2>
 80021ac:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d206      	bcs.n	80021c4 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	4619      	mov	r1, r3
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f006 fa25 	bl	800860c <HAL_PCD_DataOutStageCallback>
 80021c2:	e005      	b.n	80021d0 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021ca:	4618      	mov	r0, r3
 80021cc:	f003 f810 	bl	80051f0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80021d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d07e      	beq.n	80022d8 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80021da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021de:	1c5a      	adds	r2, r3, #1
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	4413      	add	r3, r2
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	461a      	mov	r2, r3
 80021f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	b29b      	uxth	r3, r3
 8002200:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002208:	843b      	strh	r3, [r7, #32]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	461a      	mov	r2, r3
 8002210:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	441a      	add	r2, r3
 8002218:	8c3b      	ldrh	r3, [r7, #32]
 800221a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800221e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002222:	b29b      	uxth	r3, r3
 8002224:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	78db      	ldrb	r3, [r3, #3]
 800222a:	2b03      	cmp	r3, #3
 800222c:	d00c      	beq.n	8002248 <PCD_EP_ISR_Handler+0x554>
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	78db      	ldrb	r3, [r3, #3]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d008      	beq.n	8002248 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800223a:	2b02      	cmp	r3, #2
 800223c:	d146      	bne.n	80022cc <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800223e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002244:	2b00      	cmp	r3, #0
 8002246:	d141      	bne.n	80022cc <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002250:	b29b      	uxth	r3, r3
 8002252:	461a      	mov	r2, r3
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	4413      	add	r3, r2
 800225c:	3302      	adds	r3, #2
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6812      	ldr	r2, [r2, #0]
 8002264:	4413      	add	r3, r2
 8002266:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002270:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	699a      	ldr	r2, [r3, #24]
 8002276:	8bfb      	ldrh	r3, [r7, #30]
 8002278:	429a      	cmp	r2, r3
 800227a:	d906      	bls.n	800228a <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	699a      	ldr	r2, [r3, #24]
 8002280:	8bfb      	ldrh	r3, [r7, #30]
 8002282:	1ad2      	subs	r2, r2, r3
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	619a      	str	r2, [r3, #24]
 8002288:	e002      	b.n	8002290 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	2200      	movs	r2, #0
 800228e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d106      	bne.n	80022a6 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	4619      	mov	r1, r3
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f006 f9cf 	bl	8008642 <HAL_PCD_DataInStageCallback>
 80022a4:	e018      	b.n	80022d8 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	695a      	ldr	r2, [r3, #20]
 80022aa:	8bfb      	ldrh	r3, [r7, #30]
 80022ac:	441a      	add	r2, r3
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	69da      	ldr	r2, [r3, #28]
 80022b6:	8bfb      	ldrh	r3, [r7, #30]
 80022b8:	441a      	add	r2, r3
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022c4:	4618      	mov	r0, r3
 80022c6:	f002 ff93 	bl	80051f0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80022ca:	e005      	b.n	80022d8 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80022cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80022ce:	461a      	mov	r2, r3
 80022d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 f91b 	bl	800250e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	b21b      	sxth	r3, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f6ff ad0a 	blt.w	8001cfe <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3738      	adds	r7, #56	; 0x38
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b088      	sub	sp, #32
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	4613      	mov	r3, r2
 8002300:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002302:	88fb      	ldrh	r3, [r7, #6]
 8002304:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d07e      	beq.n	800240a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002314:	b29b      	uxth	r3, r3
 8002316:	461a      	mov	r2, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	4413      	add	r3, r2
 8002320:	3302      	adds	r3, #2
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	4413      	add	r3, r2
 800232a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002334:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	699a      	ldr	r2, [r3, #24]
 800233a:	8b7b      	ldrh	r3, [r7, #26]
 800233c:	429a      	cmp	r2, r3
 800233e:	d306      	bcc.n	800234e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	699a      	ldr	r2, [r3, #24]
 8002344:	8b7b      	ldrh	r3, [r7, #26]
 8002346:	1ad2      	subs	r2, r2, r3
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	619a      	str	r2, [r3, #24]
 800234c:	e002      	b.n	8002354 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	2200      	movs	r2, #0
 8002352:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d123      	bne.n	80023a4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	461a      	mov	r2, r3
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	b29b      	uxth	r3, r3
 800236e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002376:	833b      	strh	r3, [r7, #24]
 8002378:	8b3b      	ldrh	r3, [r7, #24]
 800237a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800237e:	833b      	strh	r3, [r7, #24]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	461a      	mov	r2, r3
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	441a      	add	r2, r3
 800238e:	8b3b      	ldrh	r3, [r7, #24]
 8002390:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002394:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002398:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800239c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023a4:	88fb      	ldrh	r3, [r7, #6]
 80023a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d01f      	beq.n	80023ee <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	461a      	mov	r2, r3
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	881b      	ldrh	r3, [r3, #0]
 80023be:	b29b      	uxth	r3, r3
 80023c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023c8:	82fb      	strh	r3, [r7, #22]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	441a      	add	r2, r3
 80023d8:	8afb      	ldrh	r3, [r7, #22]
 80023da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80023ee:	8b7b      	ldrh	r3, [r7, #26]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 8087 	beq.w	8002504 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6818      	ldr	r0, [r3, #0]
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	6959      	ldr	r1, [r3, #20]
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	891a      	ldrh	r2, [r3, #8]
 8002402:	8b7b      	ldrh	r3, [r7, #26]
 8002404:	f004 fb6e 	bl	8006ae4 <USB_ReadPMA>
 8002408:	e07c      	b.n	8002504 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002412:	b29b      	uxth	r3, r3
 8002414:	461a      	mov	r2, r3
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	4413      	add	r3, r2
 800241e:	3306      	adds	r3, #6
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	6812      	ldr	r2, [r2, #0]
 8002426:	4413      	add	r3, r2
 8002428:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002432:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	699a      	ldr	r2, [r3, #24]
 8002438:	8b7b      	ldrh	r3, [r7, #26]
 800243a:	429a      	cmp	r2, r3
 800243c:	d306      	bcc.n	800244c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	699a      	ldr	r2, [r3, #24]
 8002442:	8b7b      	ldrh	r3, [r7, #26]
 8002444:	1ad2      	subs	r2, r2, r3
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	619a      	str	r2, [r3, #24]
 800244a:	e002      	b.n	8002452 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2200      	movs	r2, #0
 8002450:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d123      	bne.n	80024a2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	461a      	mov	r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	881b      	ldrh	r3, [r3, #0]
 800246a:	b29b      	uxth	r3, r3
 800246c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002474:	83fb      	strh	r3, [r7, #30]
 8002476:	8bfb      	ldrh	r3, [r7, #30]
 8002478:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800247c:	83fb      	strh	r3, [r7, #30]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	461a      	mov	r2, r3
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	441a      	add	r2, r3
 800248c:	8bfb      	ldrh	r3, [r7, #30]
 800248e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002492:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800249a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800249e:	b29b      	uxth	r3, r3
 80024a0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80024a2:	88fb      	ldrh	r3, [r7, #6]
 80024a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d11f      	bne.n	80024ec <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	461a      	mov	r2, r3
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	b29b      	uxth	r3, r3
 80024be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024c6:	83bb      	strh	r3, [r7, #28]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	461a      	mov	r2, r3
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	441a      	add	r2, r3
 80024d6:	8bbb      	ldrh	r3, [r7, #28]
 80024d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80024ec:	8b7b      	ldrh	r3, [r7, #26]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d008      	beq.n	8002504 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6818      	ldr	r0, [r3, #0]
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	6959      	ldr	r1, [r3, #20]
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	895a      	ldrh	r2, [r3, #10]
 80024fe:	8b7b      	ldrh	r3, [r7, #26]
 8002500:	f004 faf0 	bl	8006ae4 <USB_ReadPMA>
    }
  }

  return count;
 8002504:	8b7b      	ldrh	r3, [r7, #26]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3720      	adds	r7, #32
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b0a2      	sub	sp, #136	; 0x88
 8002512:	af00      	add	r7, sp, #0
 8002514:	60f8      	str	r0, [r7, #12]
 8002516:	60b9      	str	r1, [r7, #8]
 8002518:	4613      	mov	r3, r2
 800251a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800251c:	88fb      	ldrh	r3, [r7, #6]
 800251e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 81c7 	beq.w	80028b6 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002530:	b29b      	uxth	r3, r3
 8002532:	461a      	mov	r2, r3
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	4413      	add	r3, r2
 800253c:	3302      	adds	r3, #2
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	6812      	ldr	r2, [r2, #0]
 8002544:	4413      	add	r3, r2
 8002546:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002550:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	699a      	ldr	r2, [r3, #24]
 8002558:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800255c:	429a      	cmp	r2, r3
 800255e:	d907      	bls.n	8002570 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	699a      	ldr	r2, [r3, #24]
 8002564:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002568:	1ad2      	subs	r2, r2, r3
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	619a      	str	r2, [r3, #24]
 800256e:	e002      	b.n	8002576 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	2200      	movs	r2, #0
 8002574:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	2b00      	cmp	r3, #0
 800257c:	f040 80b9 	bne.w	80026f2 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	785b      	ldrb	r3, [r3, #1]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d126      	bne.n	80025d6 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	62bb      	str	r3, [r7, #40]	; 0x28
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002596:	b29b      	uxth	r3, r3
 8002598:	461a      	mov	r2, r3
 800259a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259c:	4413      	add	r3, r2
 800259e:	62bb      	str	r3, [r7, #40]	; 0x28
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	011a      	lsls	r2, r3, #4
 80025a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a8:	4413      	add	r3, r2
 80025aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025ae:	627b      	str	r3, [r7, #36]	; 0x24
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	801a      	strh	r2, [r3, #0]
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	881b      	ldrh	r3, [r3, #0]
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	801a      	strh	r2, [r3, #0]
 80025d4:	e01a      	b.n	800260c <HAL_PCD_EP_DB_Transmit+0xfe>
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	785b      	ldrb	r3, [r3, #1]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d116      	bne.n	800260c <HAL_PCD_EP_DB_Transmit+0xfe>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	633b      	str	r3, [r7, #48]	; 0x30
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	461a      	mov	r2, r3
 80025f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f2:	4413      	add	r3, r2
 80025f4:	633b      	str	r3, [r7, #48]	; 0x30
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	011a      	lsls	r2, r3, #4
 80025fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fe:	4413      	add	r3, r2
 8002600:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002604:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002608:	2200      	movs	r2, #0
 800260a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	623b      	str	r3, [r7, #32]
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	785b      	ldrb	r3, [r3, #1]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d126      	bne.n	8002668 <HAL_PCD_EP_DB_Transmit+0x15a>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	61bb      	str	r3, [r7, #24]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002628:	b29b      	uxth	r3, r3
 800262a:	461a      	mov	r2, r3
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	4413      	add	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	011a      	lsls	r2, r3, #4
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	4413      	add	r3, r2
 800263c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002640:	617b      	str	r3, [r7, #20]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	b29b      	uxth	r3, r3
 8002648:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800264c:	b29a      	uxth	r2, r3
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	801a      	strh	r2, [r3, #0]
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	881b      	ldrh	r3, [r3, #0]
 8002656:	b29b      	uxth	r3, r3
 8002658:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800265c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002660:	b29a      	uxth	r2, r3
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	801a      	strh	r2, [r3, #0]
 8002666:	e017      	b.n	8002698 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	785b      	ldrb	r3, [r3, #1]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d113      	bne.n	8002698 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002678:	b29b      	uxth	r3, r3
 800267a:	461a      	mov	r2, r3
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	4413      	add	r3, r2
 8002680:	623b      	str	r3, [r7, #32]
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	011a      	lsls	r2, r3, #4
 8002688:	6a3b      	ldr	r3, [r7, #32]
 800268a:	4413      	add	r3, r2
 800268c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002690:	61fb      	str	r3, [r7, #28]
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	2200      	movs	r2, #0
 8002696:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	4619      	mov	r1, r3
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f005 ffcf 	bl	8008642 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80026a4:	88fb      	ldrh	r3, [r7, #6]
 80026a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 82d4 	beq.w	8002c58 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	461a      	mov	r2, r3
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4413      	add	r3, r2
 80026be:	881b      	ldrh	r3, [r3, #0]
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ca:	827b      	strh	r3, [r7, #18]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	461a      	mov	r2, r3
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	441a      	add	r2, r3
 80026da:	8a7b      	ldrh	r3, [r7, #18]
 80026dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	8013      	strh	r3, [r2, #0]
 80026f0:	e2b2      	b.n	8002c58 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80026f2:	88fb      	ldrh	r3, [r7, #6]
 80026f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d021      	beq.n	8002740 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	461a      	mov	r2, r3
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	881b      	ldrh	r3, [r3, #0]
 800270c:	b29b      	uxth	r3, r3
 800270e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002716:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	461a      	mov	r2, r3
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	441a      	add	r2, r3
 8002728:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800272c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002730:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002734:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800273c:	b29b      	uxth	r3, r3
 800273e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002746:	2b01      	cmp	r3, #1
 8002748:	f040 8286 	bne.w	8002c58 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	695a      	ldr	r2, [r3, #20]
 8002750:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002754:	441a      	add	r2, r3
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	69da      	ldr	r2, [r3, #28]
 800275e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002762:	441a      	add	r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	6a1a      	ldr	r2, [r3, #32]
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	429a      	cmp	r2, r3
 8002772:	d309      	bcc.n	8002788 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	6a1a      	ldr	r2, [r3, #32]
 800277e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002780:	1ad2      	subs	r2, r2, r3
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	621a      	str	r2, [r3, #32]
 8002786:	e015      	b.n	80027b4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d107      	bne.n	80027a0 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002790:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002794:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800279e:	e009      	b.n	80027b4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	2200      	movs	r2, #0
 80027b2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	785b      	ldrb	r3, [r3, #1]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d155      	bne.n	8002868 <HAL_PCD_EP_DB_Transmit+0x35a>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	461a      	mov	r2, r3
 80027ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d0:	4413      	add	r3, r2
 80027d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	011a      	lsls	r2, r3, #4
 80027da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027dc:	4413      	add	r3, r2
 80027de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027e2:	637b      	str	r3, [r7, #52]	; 0x34
 80027e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d112      	bne.n	8002810 <HAL_PCD_EP_DB_Transmit+0x302>
 80027ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f8:	801a      	strh	r2, [r3, #0]
 80027fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002804:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002808:	b29a      	uxth	r2, r3
 800280a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800280c:	801a      	strh	r2, [r3, #0]
 800280e:	e047      	b.n	80028a0 <HAL_PCD_EP_DB_Transmit+0x392>
 8002810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002812:	2b3e      	cmp	r3, #62	; 0x3e
 8002814:	d811      	bhi.n	800283a <HAL_PCD_EP_DB_Transmit+0x32c>
 8002816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002818:	085b      	lsrs	r3, r3, #1
 800281a:	64bb      	str	r3, [r7, #72]	; 0x48
 800281c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d002      	beq.n	800282c <HAL_PCD_EP_DB_Transmit+0x31e>
 8002826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002828:	3301      	adds	r3, #1
 800282a:	64bb      	str	r3, [r7, #72]	; 0x48
 800282c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800282e:	b29b      	uxth	r3, r3
 8002830:	029b      	lsls	r3, r3, #10
 8002832:	b29a      	uxth	r2, r3
 8002834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002836:	801a      	strh	r2, [r3, #0]
 8002838:	e032      	b.n	80028a0 <HAL_PCD_EP_DB_Transmit+0x392>
 800283a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800283c:	095b      	lsrs	r3, r3, #5
 800283e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002842:	f003 031f 	and.w	r3, r3, #31
 8002846:	2b00      	cmp	r3, #0
 8002848:	d102      	bne.n	8002850 <HAL_PCD_EP_DB_Transmit+0x342>
 800284a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800284c:	3b01      	subs	r3, #1
 800284e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002850:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002852:	b29b      	uxth	r3, r3
 8002854:	029b      	lsls	r3, r3, #10
 8002856:	b29b      	uxth	r3, r3
 8002858:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800285c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002860:	b29a      	uxth	r2, r3
 8002862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002864:	801a      	strh	r2, [r3, #0]
 8002866:	e01b      	b.n	80028a0 <HAL_PCD_EP_DB_Transmit+0x392>
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	785b      	ldrb	r3, [r3, #1]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d117      	bne.n	80028a0 <HAL_PCD_EP_DB_Transmit+0x392>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	643b      	str	r3, [r7, #64]	; 0x40
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800287e:	b29b      	uxth	r3, r3
 8002880:	461a      	mov	r2, r3
 8002882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002884:	4413      	add	r3, r2
 8002886:	643b      	str	r3, [r7, #64]	; 0x40
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	011a      	lsls	r2, r3, #4
 800288e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002890:	4413      	add	r3, r2
 8002892:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002896:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800289a:	b29a      	uxth	r2, r3
 800289c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800289e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6818      	ldr	r0, [r3, #0]
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	6959      	ldr	r1, [r3, #20]
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	891a      	ldrh	r2, [r3, #8]
 80028ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	f004 f8d3 	bl	8006a5a <USB_WritePMA>
 80028b4:	e1d0      	b.n	8002c58 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028be:	b29b      	uxth	r3, r3
 80028c0:	461a      	mov	r2, r3
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	4413      	add	r3, r2
 80028ca:	3306      	adds	r3, #6
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	6812      	ldr	r2, [r2, #0]
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028de:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	699a      	ldr	r2, [r3, #24]
 80028e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d307      	bcc.n	80028fe <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	699a      	ldr	r2, [r3, #24]
 80028f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028f6:	1ad2      	subs	r2, r2, r3
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	619a      	str	r2, [r3, #24]
 80028fc:	e002      	b.n	8002904 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2200      	movs	r2, #0
 8002902:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	2b00      	cmp	r3, #0
 800290a:	f040 80c4 	bne.w	8002a96 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	785b      	ldrb	r3, [r3, #1]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d126      	bne.n	8002964 <HAL_PCD_EP_DB_Transmit+0x456>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002924:	b29b      	uxth	r3, r3
 8002926:	461a      	mov	r2, r3
 8002928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800292a:	4413      	add	r3, r2
 800292c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	011a      	lsls	r2, r3, #4
 8002934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002936:	4413      	add	r3, r2
 8002938:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800293c:	66bb      	str	r3, [r7, #104]	; 0x68
 800293e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	b29b      	uxth	r3, r3
 8002944:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002948:	b29a      	uxth	r2, r3
 800294a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800294c:	801a      	strh	r2, [r3, #0]
 800294e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002950:	881b      	ldrh	r3, [r3, #0]
 8002952:	b29b      	uxth	r3, r3
 8002954:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002958:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800295c:	b29a      	uxth	r2, r3
 800295e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002960:	801a      	strh	r2, [r3, #0]
 8002962:	e01a      	b.n	800299a <HAL_PCD_EP_DB_Transmit+0x48c>
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	785b      	ldrb	r3, [r3, #1]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d116      	bne.n	800299a <HAL_PCD_EP_DB_Transmit+0x48c>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	677b      	str	r3, [r7, #116]	; 0x74
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800297a:	b29b      	uxth	r3, r3
 800297c:	461a      	mov	r2, r3
 800297e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002980:	4413      	add	r3, r2
 8002982:	677b      	str	r3, [r7, #116]	; 0x74
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	011a      	lsls	r2, r3, #4
 800298a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800298c:	4413      	add	r3, r2
 800298e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002992:	673b      	str	r3, [r7, #112]	; 0x70
 8002994:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002996:	2200      	movs	r2, #0
 8002998:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	67bb      	str	r3, [r7, #120]	; 0x78
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	785b      	ldrb	r3, [r3, #1]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d12f      	bne.n	8002a08 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	461a      	mov	r2, r3
 80029bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029c0:	4413      	add	r3, r2
 80029c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	011a      	lsls	r2, r3, #4
 80029cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029d0:	4413      	add	r3, r2
 80029d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80029da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029de:	881b      	ldrh	r3, [r3, #0]
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029ec:	801a      	strh	r2, [r3, #0]
 80029ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a04:	801a      	strh	r2, [r3, #0]
 8002a06:	e017      	b.n	8002a38 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	785b      	ldrb	r3, [r3, #1]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d113      	bne.n	8002a38 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a1e:	4413      	add	r3, r2
 8002a20:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	011a      	lsls	r2, r3, #4
 8002a28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a30:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a34:	2200      	movs	r2, #0
 8002a36:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f005 fdff 	bl	8008642 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a44:	88fb      	ldrh	r3, [r7, #6]
 8002a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f040 8104 	bne.w	8002c58 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	461a      	mov	r2, r3
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	881b      	ldrh	r3, [r3, #0]
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a6a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	461a      	mov	r2, r3
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	441a      	add	r2, r3
 8002a7c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002a80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	8013      	strh	r3, [r2, #0]
 8002a94:	e0e0      	b.n	8002c58 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a96:	88fb      	ldrh	r3, [r7, #6]
 8002a98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d121      	bne.n	8002ae4 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	881b      	ldrh	r3, [r3, #0]
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aba:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	441a      	add	r2, r3
 8002acc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002ad0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ad4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ad8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	f040 80b4 	bne.w	8002c58 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	695a      	ldr	r2, [r3, #20]
 8002af4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002af8:	441a      	add	r2, r3
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	69da      	ldr	r2, [r3, #28]
 8002b02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b06:	441a      	add	r2, r3
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	6a1a      	ldr	r2, [r3, #32]
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d309      	bcc.n	8002b2c <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	6a1a      	ldr	r2, [r3, #32]
 8002b22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b24:	1ad2      	subs	r2, r2, r3
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	621a      	str	r2, [r3, #32]
 8002b2a:	e015      	b.n	8002b58 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d107      	bne.n	8002b44 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002b34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b38:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002b42:	e009      	b.n	8002b58 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	667b      	str	r3, [r7, #100]	; 0x64
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	785b      	ldrb	r3, [r3, #1]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d155      	bne.n	8002c12 <HAL_PCD_EP_DB_Transmit+0x704>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	461a      	mov	r2, r3
 8002b78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b7a:	4413      	add	r3, r2
 8002b7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	011a      	lsls	r2, r3, #4
 8002b84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b86:	4413      	add	r3, r2
 8002b88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d112      	bne.n	8002bba <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002b94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b96:	881b      	ldrh	r3, [r3, #0]
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ba2:	801a      	strh	r2, [r3, #0]
 8002ba4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bb6:	801a      	strh	r2, [r3, #0]
 8002bb8:	e044      	b.n	8002c44 <HAL_PCD_EP_DB_Transmit+0x736>
 8002bba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bbc:	2b3e      	cmp	r3, #62	; 0x3e
 8002bbe:	d811      	bhi.n	8002be4 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002bc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bc2:	085b      	lsrs	r3, r3, #1
 8002bc4:	657b      	str	r3, [r7, #84]	; 0x54
 8002bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d002      	beq.n	8002bd6 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002bd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	657b      	str	r3, [r7, #84]	; 0x54
 8002bd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	029b      	lsls	r3, r3, #10
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002be0:	801a      	strh	r2, [r3, #0]
 8002be2:	e02f      	b.n	8002c44 <HAL_PCD_EP_DB_Transmit+0x736>
 8002be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002be6:	095b      	lsrs	r3, r3, #5
 8002be8:	657b      	str	r3, [r7, #84]	; 0x54
 8002bea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bec:	f003 031f 	and.w	r3, r3, #31
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d102      	bne.n	8002bfa <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	657b      	str	r3, [r7, #84]	; 0x54
 8002bfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	029b      	lsls	r3, r3, #10
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c0e:	801a      	strh	r2, [r3, #0]
 8002c10:	e018      	b.n	8002c44 <HAL_PCD_EP_DB_Transmit+0x736>
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	785b      	ldrb	r3, [r3, #1]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d114      	bne.n	8002c44 <HAL_PCD_EP_DB_Transmit+0x736>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	461a      	mov	r2, r3
 8002c26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c28:	4413      	add	r3, r2
 8002c2a:	667b      	str	r3, [r7, #100]	; 0x64
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	011a      	lsls	r2, r3, #4
 8002c32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c34:	4413      	add	r3, r2
 8002c36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c3a:	663b      	str	r3, [r7, #96]	; 0x60
 8002c3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c42:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6818      	ldr	r0, [r3, #0]
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	6959      	ldr	r1, [r3, #20]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	895a      	ldrh	r2, [r3, #10]
 8002c50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	f003 ff01 	bl	8006a5a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	881b      	ldrh	r3, [r3, #0]
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c72:	823b      	strh	r3, [r7, #16]
 8002c74:	8a3b      	ldrh	r3, [r7, #16]
 8002c76:	f083 0310 	eor.w	r3, r3, #16
 8002c7a:	823b      	strh	r3, [r7, #16]
 8002c7c:	8a3b      	ldrh	r3, [r7, #16]
 8002c7e:	f083 0320 	eor.w	r3, r3, #32
 8002c82:	823b      	strh	r3, [r7, #16]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	461a      	mov	r2, r3
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	441a      	add	r2, r3
 8002c92:	8a3b      	ldrh	r3, [r7, #16]
 8002c94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3788      	adds	r7, #136	; 0x88
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b087      	sub	sp, #28
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	60f8      	str	r0, [r7, #12]
 8002cba:	607b      	str	r3, [r7, #4]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	817b      	strh	r3, [r7, #10]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002cc4:	897b      	ldrh	r3, [r7, #10]
 8002cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00b      	beq.n	8002ce8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cd0:	897b      	ldrh	r3, [r7, #10]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	1c5a      	adds	r2, r3, #1
 8002cd8:	4613      	mov	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	617b      	str	r3, [r7, #20]
 8002ce6:	e009      	b.n	8002cfc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ce8:	897a      	ldrh	r2, [r7, #10]
 8002cea:	4613      	mov	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002cfc:	893b      	ldrh	r3, [r7, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d107      	bne.n	8002d12 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2200      	movs	r2, #0
 8002d06:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	80da      	strh	r2, [r3, #6]
 8002d10:	e00b      	b.n	8002d2a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	2201      	movs	r2, #1
 8002d16:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	0c1b      	lsrs	r3, r3, #16
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	371c      	adds	r7, #28
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr
	...

08002d38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e26c      	b.n	8003224 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f000 8087 	beq.w	8002e66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d58:	4b92      	ldr	r3, [pc, #584]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 030c 	and.w	r3, r3, #12
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	d00c      	beq.n	8002d7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d64:	4b8f      	ldr	r3, [pc, #572]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f003 030c 	and.w	r3, r3, #12
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d112      	bne.n	8002d96 <HAL_RCC_OscConfig+0x5e>
 8002d70:	4b8c      	ldr	r3, [pc, #560]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d7c:	d10b      	bne.n	8002d96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d7e:	4b89      	ldr	r3, [pc, #548]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d06c      	beq.n	8002e64 <HAL_RCC_OscConfig+0x12c>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d168      	bne.n	8002e64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e246      	b.n	8003224 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d9e:	d106      	bne.n	8002dae <HAL_RCC_OscConfig+0x76>
 8002da0:	4b80      	ldr	r3, [pc, #512]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a7f      	ldr	r2, [pc, #508]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002daa:	6013      	str	r3, [r2, #0]
 8002dac:	e02e      	b.n	8002e0c <HAL_RCC_OscConfig+0xd4>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10c      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x98>
 8002db6:	4b7b      	ldr	r3, [pc, #492]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a7a      	ldr	r2, [pc, #488]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002dbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	4b78      	ldr	r3, [pc, #480]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a77      	ldr	r2, [pc, #476]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002dc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	e01d      	b.n	8002e0c <HAL_RCC_OscConfig+0xd4>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dd8:	d10c      	bne.n	8002df4 <HAL_RCC_OscConfig+0xbc>
 8002dda:	4b72      	ldr	r3, [pc, #456]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a71      	ldr	r2, [pc, #452]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	4b6f      	ldr	r3, [pc, #444]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a6e      	ldr	r2, [pc, #440]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	e00b      	b.n	8002e0c <HAL_RCC_OscConfig+0xd4>
 8002df4:	4b6b      	ldr	r3, [pc, #428]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a6a      	ldr	r2, [pc, #424]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dfe:	6013      	str	r3, [r2, #0]
 8002e00:	4b68      	ldr	r3, [pc, #416]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a67      	ldr	r2, [pc, #412]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d013      	beq.n	8002e3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e14:	f7fd fe04 	bl	8000a20 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e1c:	f7fd fe00 	bl	8000a20 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b64      	cmp	r3, #100	; 0x64
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e1fa      	b.n	8003224 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2e:	4b5d      	ldr	r3, [pc, #372]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0f0      	beq.n	8002e1c <HAL_RCC_OscConfig+0xe4>
 8002e3a:	e014      	b.n	8002e66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3c:	f7fd fdf0 	bl	8000a20 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e44:	f7fd fdec 	bl	8000a20 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b64      	cmp	r3, #100	; 0x64
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e1e6      	b.n	8003224 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e56:	4b53      	ldr	r3, [pc, #332]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f0      	bne.n	8002e44 <HAL_RCC_OscConfig+0x10c>
 8002e62:	e000      	b.n	8002e66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d063      	beq.n	8002f3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e72:	4b4c      	ldr	r3, [pc, #304]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f003 030c 	and.w	r3, r3, #12
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00b      	beq.n	8002e96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e7e:	4b49      	ldr	r3, [pc, #292]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f003 030c 	and.w	r3, r3, #12
 8002e86:	2b08      	cmp	r3, #8
 8002e88:	d11c      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x18c>
 8002e8a:	4b46      	ldr	r3, [pc, #280]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d116      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e96:	4b43      	ldr	r3, [pc, #268]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d005      	beq.n	8002eae <HAL_RCC_OscConfig+0x176>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d001      	beq.n	8002eae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e1ba      	b.n	8003224 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eae:	4b3d      	ldr	r3, [pc, #244]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	4939      	ldr	r1, [pc, #228]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ec2:	e03a      	b.n	8002f3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d020      	beq.n	8002f0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ecc:	4b36      	ldr	r3, [pc, #216]	; (8002fa8 <HAL_RCC_OscConfig+0x270>)
 8002ece:	2201      	movs	r2, #1
 8002ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed2:	f7fd fda5 	bl	8000a20 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eda:	f7fd fda1 	bl	8000a20 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e19b      	b.n	8003224 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eec:	4b2d      	ldr	r3, [pc, #180]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0f0      	beq.n	8002eda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef8:	4b2a      	ldr	r3, [pc, #168]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	4927      	ldr	r1, [pc, #156]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	600b      	str	r3, [r1, #0]
 8002f0c:	e015      	b.n	8002f3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f0e:	4b26      	ldr	r3, [pc, #152]	; (8002fa8 <HAL_RCC_OscConfig+0x270>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f14:	f7fd fd84 	bl	8000a20 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f1c:	f7fd fd80 	bl	8000a20 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e17a      	b.n	8003224 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f2e:	4b1d      	ldr	r3, [pc, #116]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d03a      	beq.n	8002fbc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d019      	beq.n	8002f82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f4e:	4b17      	ldr	r3, [pc, #92]	; (8002fac <HAL_RCC_OscConfig+0x274>)
 8002f50:	2201      	movs	r2, #1
 8002f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f54:	f7fd fd64 	bl	8000a20 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f5c:	f7fd fd60 	bl	8000a20 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e15a      	b.n	8003224 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f6e:	4b0d      	ldr	r3, [pc, #52]	; (8002fa4 <HAL_RCC_OscConfig+0x26c>)
 8002f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0f0      	beq.n	8002f5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f7a:	2001      	movs	r0, #1
 8002f7c:	f000 faa6 	bl	80034cc <RCC_Delay>
 8002f80:	e01c      	b.n	8002fbc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f82:	4b0a      	ldr	r3, [pc, #40]	; (8002fac <HAL_RCC_OscConfig+0x274>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f88:	f7fd fd4a 	bl	8000a20 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f8e:	e00f      	b.n	8002fb0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f90:	f7fd fd46 	bl	8000a20 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d908      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e140      	b.n	8003224 <HAL_RCC_OscConfig+0x4ec>
 8002fa2:	bf00      	nop
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	42420000 	.word	0x42420000
 8002fac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb0:	4b9e      	ldr	r3, [pc, #632]	; (800322c <HAL_RCC_OscConfig+0x4f4>)
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1e9      	bne.n	8002f90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 80a6 	beq.w	8003116 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fce:	4b97      	ldr	r3, [pc, #604]	; (800322c <HAL_RCC_OscConfig+0x4f4>)
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10d      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fda:	4b94      	ldr	r3, [pc, #592]	; (800322c <HAL_RCC_OscConfig+0x4f4>)
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	4a93      	ldr	r2, [pc, #588]	; (800322c <HAL_RCC_OscConfig+0x4f4>)
 8002fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe4:	61d3      	str	r3, [r2, #28]
 8002fe6:	4b91      	ldr	r3, [pc, #580]	; (800322c <HAL_RCC_OscConfig+0x4f4>)
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fee:	60bb      	str	r3, [r7, #8]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff6:	4b8e      	ldr	r3, [pc, #568]	; (8003230 <HAL_RCC_OscConfig+0x4f8>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d118      	bne.n	8003034 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003002:	4b8b      	ldr	r3, [pc, #556]	; (8003230 <HAL_RCC_OscConfig+0x4f8>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a8a      	ldr	r2, [pc, #552]	; (8003230 <HAL_RCC_OscConfig+0x4f8>)
 8003008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800300c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800300e:	f7fd fd07 	bl	8000a20 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003016:	f7fd fd03 	bl	8000a20 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b64      	cmp	r3, #100	; 0x64
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e0fd      	b.n	8003224 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003028:	4b81      	ldr	r3, [pc, #516]	; (8003230 <HAL_RCC_OscConfig+0x4f8>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0f0      	beq.n	8003016 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d106      	bne.n	800304a <HAL_RCC_OscConfig+0x312>
 800303c:	4b7b      	ldr	r3, [pc, #492]	; (800322c <HAL_RCC_OscConfig+0x4f4>)
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	4a7a      	ldr	r2, [pc, #488]	; (800322c <HAL_RCC_OscConfig+0x4f4>)
 8003042:	f043 0301 	orr.w	r3, r3, #1
 8003046:	6213      	str	r3, [r2, #32]
 8003048:	e02d      	b.n	80030a6 <HAL_RCC_OscConfig+0x36e>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10c      	bne.n	800306c <HAL_RCC_OscConfig+0x334>
 8003052:	4b76      	ldr	r3, [pc, #472]	; (800322c <HAL_RCC_OscConfig+0x4f4>)
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	4a75      	ldr	r2, [pc, #468]	; (800322c <HAL_RCC_OscConfig+0x4f4>)
 8003058:	f023 0301 	bic.w	r3, r3, #1
 800305c:	6213      	str	r3, [r2, #32]
 800305e:	4b73      	ldr	r3, [pc, #460]	; (800322c <HAL_RCC_OscConfig+0x4f4>)
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	4a72      	ldr	r2, [pc, #456]	; (800322c <HAL_RCC_OscConfig+0x4f4>)
 8003064:	f023 0304 	bic.w	r3, r3, #4
 8003068:	6213      	str	r3, [r2, #32]
 800306a:	e01c      	b.n	80030a6 <HAL_RCC_OscConfig+0x36e>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	2b05      	cmp	r3, #5
 8003072:	d10c      	bne.n	800308e <HAL_RCC_OscConfig+0x356>
 8003074:	4b6d      	ldr	r3, [pc, #436]	; (800322c <HAL_RCC_OscConfig+0x4f4>)
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	4a6c      	ldr	r2, [pc, #432]	; (800322c <HAL_RCC_OscConfig+0x4f4>)
 800307a:	f043 0304 	orr.w	r3, r3, #4
 800307e:	6213      	str	r3, [r2, #32]
 8003080:	4b6a      	ldr	r3, [pc, #424]	; (800322c <HAL_RCC_OscConfig+0x4f4>)
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	4a69      	ldr	r2, [pc, #420]	; (800322c <HAL_RCC_OscConfig+0x4f4>)
 8003086:	f043 0301 	orr.w	r3, r3, #1
 800308a:	6213      	str	r3, [r2, #32]
 800308c:	e00b      	b.n	80030a6 <HAL_RCC_OscConfig+0x36e>
 800308e:	4b67      	ldr	r3, [pc, #412]	; (800322c <HAL_RCC_OscConfig+0x4f4>)
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	4a66      	ldr	r2, [pc, #408]	; (800322c <HAL_RCC_OscConfig+0x4f4>)
 8003094:	f023 0301 	bic.w	r3, r3, #1
 8003098:	6213      	str	r3, [r2, #32]
 800309a:	4b64      	ldr	r3, [pc, #400]	; (800322c <HAL_RCC_OscConfig+0x4f4>)
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	4a63      	ldr	r2, [pc, #396]	; (800322c <HAL_RCC_OscConfig+0x4f4>)
 80030a0:	f023 0304 	bic.w	r3, r3, #4
 80030a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d015      	beq.n	80030da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ae:	f7fd fcb7 	bl	8000a20 <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b4:	e00a      	b.n	80030cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b6:	f7fd fcb3 	bl	8000a20 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e0ab      	b.n	8003224 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030cc:	4b57      	ldr	r3, [pc, #348]	; (800322c <HAL_RCC_OscConfig+0x4f4>)
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0ee      	beq.n	80030b6 <HAL_RCC_OscConfig+0x37e>
 80030d8:	e014      	b.n	8003104 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030da:	f7fd fca1 	bl	8000a20 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e0:	e00a      	b.n	80030f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030e2:	f7fd fc9d 	bl	8000a20 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e095      	b.n	8003224 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030f8:	4b4c      	ldr	r3, [pc, #304]	; (800322c <HAL_RCC_OscConfig+0x4f4>)
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1ee      	bne.n	80030e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003104:	7dfb      	ldrb	r3, [r7, #23]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d105      	bne.n	8003116 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800310a:	4b48      	ldr	r3, [pc, #288]	; (800322c <HAL_RCC_OscConfig+0x4f4>)
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	4a47      	ldr	r2, [pc, #284]	; (800322c <HAL_RCC_OscConfig+0x4f4>)
 8003110:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003114:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 8081 	beq.w	8003222 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003120:	4b42      	ldr	r3, [pc, #264]	; (800322c <HAL_RCC_OscConfig+0x4f4>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 030c 	and.w	r3, r3, #12
 8003128:	2b08      	cmp	r3, #8
 800312a:	d061      	beq.n	80031f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	2b02      	cmp	r3, #2
 8003132:	d146      	bne.n	80031c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003134:	4b3f      	ldr	r3, [pc, #252]	; (8003234 <HAL_RCC_OscConfig+0x4fc>)
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313a:	f7fd fc71 	bl	8000a20 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003142:	f7fd fc6d 	bl	8000a20 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e067      	b.n	8003224 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003154:	4b35      	ldr	r3, [pc, #212]	; (800322c <HAL_RCC_OscConfig+0x4f4>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1f0      	bne.n	8003142 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003168:	d108      	bne.n	800317c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800316a:	4b30      	ldr	r3, [pc, #192]	; (800322c <HAL_RCC_OscConfig+0x4f4>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	492d      	ldr	r1, [pc, #180]	; (800322c <HAL_RCC_OscConfig+0x4f4>)
 8003178:	4313      	orrs	r3, r2
 800317a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800317c:	4b2b      	ldr	r3, [pc, #172]	; (800322c <HAL_RCC_OscConfig+0x4f4>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a19      	ldr	r1, [r3, #32]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	430b      	orrs	r3, r1
 800318e:	4927      	ldr	r1, [pc, #156]	; (800322c <HAL_RCC_OscConfig+0x4f4>)
 8003190:	4313      	orrs	r3, r2
 8003192:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003194:	4b27      	ldr	r3, [pc, #156]	; (8003234 <HAL_RCC_OscConfig+0x4fc>)
 8003196:	2201      	movs	r2, #1
 8003198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319a:	f7fd fc41 	bl	8000a20 <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a2:	f7fd fc3d 	bl	8000a20 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e037      	b.n	8003224 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031b4:	4b1d      	ldr	r3, [pc, #116]	; (800322c <HAL_RCC_OscConfig+0x4f4>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0f0      	beq.n	80031a2 <HAL_RCC_OscConfig+0x46a>
 80031c0:	e02f      	b.n	8003222 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c2:	4b1c      	ldr	r3, [pc, #112]	; (8003234 <HAL_RCC_OscConfig+0x4fc>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c8:	f7fd fc2a 	bl	8000a20 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d0:	f7fd fc26 	bl	8000a20 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e020      	b.n	8003224 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031e2:	4b12      	ldr	r3, [pc, #72]	; (800322c <HAL_RCC_OscConfig+0x4f4>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1f0      	bne.n	80031d0 <HAL_RCC_OscConfig+0x498>
 80031ee:	e018      	b.n	8003222 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d101      	bne.n	80031fc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e013      	b.n	8003224 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031fc:	4b0b      	ldr	r3, [pc, #44]	; (800322c <HAL_RCC_OscConfig+0x4f4>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	429a      	cmp	r2, r3
 800320e:	d106      	bne.n	800321e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800321a:	429a      	cmp	r2, r3
 800321c:	d001      	beq.n	8003222 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e000      	b.n	8003224 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3718      	adds	r7, #24
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	40021000 	.word	0x40021000
 8003230:	40007000 	.word	0x40007000
 8003234:	42420060 	.word	0x42420060

08003238 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e0d0      	b.n	80033ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800324c:	4b6a      	ldr	r3, [pc, #424]	; (80033f8 <HAL_RCC_ClockConfig+0x1c0>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d910      	bls.n	800327c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325a:	4b67      	ldr	r3, [pc, #412]	; (80033f8 <HAL_RCC_ClockConfig+0x1c0>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f023 0207 	bic.w	r2, r3, #7
 8003262:	4965      	ldr	r1, [pc, #404]	; (80033f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	4313      	orrs	r3, r2
 8003268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800326a:	4b63      	ldr	r3, [pc, #396]	; (80033f8 <HAL_RCC_ClockConfig+0x1c0>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	429a      	cmp	r2, r3
 8003276:	d001      	beq.n	800327c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e0b8      	b.n	80033ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d020      	beq.n	80032ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	2b00      	cmp	r3, #0
 8003292:	d005      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003294:	4b59      	ldr	r3, [pc, #356]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	4a58      	ldr	r2, [pc, #352]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 800329a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800329e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0308 	and.w	r3, r3, #8
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d005      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032ac:	4b53      	ldr	r3, [pc, #332]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	4a52      	ldr	r2, [pc, #328]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 80032b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80032b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032b8:	4b50      	ldr	r3, [pc, #320]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	494d      	ldr	r1, [pc, #308]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d040      	beq.n	8003358 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d107      	bne.n	80032ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032de:	4b47      	ldr	r3, [pc, #284]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d115      	bne.n	8003316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e07f      	b.n	80033ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d107      	bne.n	8003306 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032f6:	4b41      	ldr	r3, [pc, #260]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d109      	bne.n	8003316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e073      	b.n	80033ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003306:	4b3d      	ldr	r3, [pc, #244]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e06b      	b.n	80033ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003316:	4b39      	ldr	r3, [pc, #228]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f023 0203 	bic.w	r2, r3, #3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	4936      	ldr	r1, [pc, #216]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 8003324:	4313      	orrs	r3, r2
 8003326:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003328:	f7fd fb7a 	bl	8000a20 <HAL_GetTick>
 800332c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800332e:	e00a      	b.n	8003346 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003330:	f7fd fb76 	bl	8000a20 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	f241 3288 	movw	r2, #5000	; 0x1388
 800333e:	4293      	cmp	r3, r2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e053      	b.n	80033ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003346:	4b2d      	ldr	r3, [pc, #180]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f003 020c 	and.w	r2, r3, #12
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	429a      	cmp	r2, r3
 8003356:	d1eb      	bne.n	8003330 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003358:	4b27      	ldr	r3, [pc, #156]	; (80033f8 <HAL_RCC_ClockConfig+0x1c0>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	429a      	cmp	r2, r3
 8003364:	d210      	bcs.n	8003388 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003366:	4b24      	ldr	r3, [pc, #144]	; (80033f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f023 0207 	bic.w	r2, r3, #7
 800336e:	4922      	ldr	r1, [pc, #136]	; (80033f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	4313      	orrs	r3, r2
 8003374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003376:	4b20      	ldr	r3, [pc, #128]	; (80033f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	429a      	cmp	r2, r3
 8003382:	d001      	beq.n	8003388 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e032      	b.n	80033ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b00      	cmp	r3, #0
 8003392:	d008      	beq.n	80033a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003394:	4b19      	ldr	r3, [pc, #100]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	4916      	ldr	r1, [pc, #88]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d009      	beq.n	80033c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033b2:	4b12      	ldr	r3, [pc, #72]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	490e      	ldr	r1, [pc, #56]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033c6:	f000 f821 	bl	800340c <HAL_RCC_GetSysClockFreq>
 80033ca:	4602      	mov	r2, r0
 80033cc:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	091b      	lsrs	r3, r3, #4
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	490a      	ldr	r1, [pc, #40]	; (8003400 <HAL_RCC_ClockConfig+0x1c8>)
 80033d8:	5ccb      	ldrb	r3, [r1, r3]
 80033da:	fa22 f303 	lsr.w	r3, r2, r3
 80033de:	4a09      	ldr	r2, [pc, #36]	; (8003404 <HAL_RCC_ClockConfig+0x1cc>)
 80033e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033e2:	4b09      	ldr	r3, [pc, #36]	; (8003408 <HAL_RCC_ClockConfig+0x1d0>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fd fad8 	bl	800099c <HAL_InitTick>

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40022000 	.word	0x40022000
 80033fc:	40021000 	.word	0x40021000
 8003400:	08009ca0 	.word	0x08009ca0
 8003404:	20000000 	.word	0x20000000
 8003408:	20000004 	.word	0x20000004

0800340c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800340c:	b490      	push	{r4, r7}
 800340e:	b08a      	sub	sp, #40	; 0x28
 8003410:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003412:	4b2a      	ldr	r3, [pc, #168]	; (80034bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003414:	1d3c      	adds	r4, r7, #4
 8003416:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003418:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800341c:	f240 2301 	movw	r3, #513	; 0x201
 8003420:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003422:	2300      	movs	r3, #0
 8003424:	61fb      	str	r3, [r7, #28]
 8003426:	2300      	movs	r3, #0
 8003428:	61bb      	str	r3, [r7, #24]
 800342a:	2300      	movs	r3, #0
 800342c:	627b      	str	r3, [r7, #36]	; 0x24
 800342e:	2300      	movs	r3, #0
 8003430:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003432:	2300      	movs	r3, #0
 8003434:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003436:	4b22      	ldr	r3, [pc, #136]	; (80034c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	f003 030c 	and.w	r3, r3, #12
 8003442:	2b04      	cmp	r3, #4
 8003444:	d002      	beq.n	800344c <HAL_RCC_GetSysClockFreq+0x40>
 8003446:	2b08      	cmp	r3, #8
 8003448:	d003      	beq.n	8003452 <HAL_RCC_GetSysClockFreq+0x46>
 800344a:	e02d      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800344c:	4b1d      	ldr	r3, [pc, #116]	; (80034c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800344e:	623b      	str	r3, [r7, #32]
      break;
 8003450:	e02d      	b.n	80034ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	0c9b      	lsrs	r3, r3, #18
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800345e:	4413      	add	r3, r2
 8003460:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003464:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d013      	beq.n	8003498 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003470:	4b13      	ldr	r3, [pc, #76]	; (80034c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	0c5b      	lsrs	r3, r3, #17
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800347e:	4413      	add	r3, r2
 8003480:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003484:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	4a0e      	ldr	r2, [pc, #56]	; (80034c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800348a:	fb02 f203 	mul.w	r2, r2, r3
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	fbb2 f3f3 	udiv	r3, r2, r3
 8003494:	627b      	str	r3, [r7, #36]	; 0x24
 8003496:	e004      	b.n	80034a2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	4a0b      	ldr	r2, [pc, #44]	; (80034c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800349c:	fb02 f303 	mul.w	r3, r2, r3
 80034a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80034a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a4:	623b      	str	r3, [r7, #32]
      break;
 80034a6:	e002      	b.n	80034ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034a8:	4b06      	ldr	r3, [pc, #24]	; (80034c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034aa:	623b      	str	r3, [r7, #32]
      break;
 80034ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ae:	6a3b      	ldr	r3, [r7, #32]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3728      	adds	r7, #40	; 0x28
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc90      	pop	{r4, r7}
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	08009c48 	.word	0x08009c48
 80034c0:	40021000 	.word	0x40021000
 80034c4:	007a1200 	.word	0x007a1200
 80034c8:	003d0900 	.word	0x003d0900

080034cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034d4:	4b0a      	ldr	r3, [pc, #40]	; (8003500 <RCC_Delay+0x34>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a0a      	ldr	r2, [pc, #40]	; (8003504 <RCC_Delay+0x38>)
 80034da:	fba2 2303 	umull	r2, r3, r2, r3
 80034de:	0a5b      	lsrs	r3, r3, #9
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	fb02 f303 	mul.w	r3, r2, r3
 80034e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034e8:	bf00      	nop
  }
  while (Delay --);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	1e5a      	subs	r2, r3, #1
 80034ee:	60fa      	str	r2, [r7, #12]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1f9      	bne.n	80034e8 <RCC_Delay+0x1c>
}
 80034f4:	bf00      	nop
 80034f6:	bf00      	nop
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bc80      	pop	{r7}
 80034fe:	4770      	bx	lr
 8003500:	20000000 	.word	0x20000000
 8003504:	10624dd3 	.word	0x10624dd3

08003508 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003510:	2300      	movs	r3, #0
 8003512:	613b      	str	r3, [r7, #16]
 8003514:	2300      	movs	r3, #0
 8003516:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	2b00      	cmp	r3, #0
 8003522:	d07d      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003524:	2300      	movs	r3, #0
 8003526:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003528:	4b4f      	ldr	r3, [pc, #316]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10d      	bne.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003534:	4b4c      	ldr	r3, [pc, #304]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	4a4b      	ldr	r2, [pc, #300]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800353a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800353e:	61d3      	str	r3, [r2, #28]
 8003540:	4b49      	ldr	r3, [pc, #292]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003542:	69db      	ldr	r3, [r3, #28]
 8003544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003548:	60bb      	str	r3, [r7, #8]
 800354a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800354c:	2301      	movs	r3, #1
 800354e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003550:	4b46      	ldr	r3, [pc, #280]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003558:	2b00      	cmp	r3, #0
 800355a:	d118      	bne.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800355c:	4b43      	ldr	r3, [pc, #268]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a42      	ldr	r2, [pc, #264]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003566:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003568:	f7fd fa5a 	bl	8000a20 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800356e:	e008      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003570:	f7fd fa56 	bl	8000a20 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b64      	cmp	r3, #100	; 0x64
 800357c:	d901      	bls.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e06d      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003582:	4b3a      	ldr	r3, [pc, #232]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358a:	2b00      	cmp	r3, #0
 800358c:	d0f0      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800358e:	4b36      	ldr	r3, [pc, #216]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003596:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d02e      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d027      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035ac:	4b2e      	ldr	r3, [pc, #184]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035b4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035b6:	4b2e      	ldr	r3, [pc, #184]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035b8:	2201      	movs	r2, #1
 80035ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035bc:	4b2c      	ldr	r3, [pc, #176]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035be:	2200      	movs	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80035c2:	4a29      	ldr	r2, [pc, #164]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d014      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d2:	f7fd fa25 	bl	8000a20 <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d8:	e00a      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035da:	f7fd fa21 	bl	8000a20 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d901      	bls.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e036      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f0:	4b1d      	ldr	r3, [pc, #116]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0ee      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035fc:	4b1a      	ldr	r3, [pc, #104]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	4917      	ldr	r1, [pc, #92]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800360a:	4313      	orrs	r3, r2
 800360c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800360e:	7dfb      	ldrb	r3, [r7, #23]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d105      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003614:	4b14      	ldr	r3, [pc, #80]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	4a13      	ldr	r2, [pc, #76]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800361a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800361e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d008      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800362c:	4b0e      	ldr	r3, [pc, #56]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	490b      	ldr	r1, [pc, #44]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800363a:	4313      	orrs	r3, r2
 800363c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0310 	and.w	r3, r3, #16
 8003646:	2b00      	cmp	r3, #0
 8003648:	d008      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800364a:	4b07      	ldr	r3, [pc, #28]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	4904      	ldr	r1, [pc, #16]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003658:	4313      	orrs	r3, r2
 800365a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3718      	adds	r7, #24
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40021000 	.word	0x40021000
 800366c:	40007000 	.word	0x40007000
 8003670:	42420440 	.word	0x42420440

08003674 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e041      	b.n	800370a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d106      	bne.n	80036a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7fc ff1e 	bl	80004dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2202      	movs	r2, #2
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3304      	adds	r3, #4
 80036b0:	4619      	mov	r1, r3
 80036b2:	4610      	mov	r0, r2
 80036b4:	f000 fcd8 	bl	8004068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
	...

08003714 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b01      	cmp	r3, #1
 8003726:	d001      	beq.n	800372c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e032      	b.n	8003792 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a18      	ldr	r2, [pc, #96]	; (800379c <HAL_TIM_Base_Start+0x88>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d00e      	beq.n	800375c <HAL_TIM_Base_Start+0x48>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003746:	d009      	beq.n	800375c <HAL_TIM_Base_Start+0x48>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a14      	ldr	r2, [pc, #80]	; (80037a0 <HAL_TIM_Base_Start+0x8c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d004      	beq.n	800375c <HAL_TIM_Base_Start+0x48>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a13      	ldr	r2, [pc, #76]	; (80037a4 <HAL_TIM_Base_Start+0x90>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d111      	bne.n	8003780 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2b06      	cmp	r3, #6
 800376c:	d010      	beq.n	8003790 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f042 0201 	orr.w	r2, r2, #1
 800377c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800377e:	e007      	b.n	8003790 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0201 	orr.w	r2, r2, #1
 800378e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	bc80      	pop	{r7}
 800379a:	4770      	bx	lr
 800379c:	40012c00 	.word	0x40012c00
 80037a0:	40000400 	.word	0x40000400
 80037a4:	40000800 	.word	0x40000800

080037a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e041      	b.n	800383e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d106      	bne.n	80037d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f839 	bl	8003846 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2202      	movs	r2, #2
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3304      	adds	r3, #4
 80037e4:	4619      	mov	r1, r3
 80037e6:	4610      	mov	r0, r2
 80037e8:	f000 fc3e 	bl	8004068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	bc80      	pop	{r7}
 8003856:	4770      	bx	lr

08003858 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
 8003864:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d109      	bne.n	8003880 <HAL_TIM_PWM_Start_DMA+0x28>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b02      	cmp	r3, #2
 8003876:	bf0c      	ite	eq
 8003878:	2301      	moveq	r3, #1
 800387a:	2300      	movne	r3, #0
 800387c:	b2db      	uxtb	r3, r3
 800387e:	e022      	b.n	80038c6 <HAL_TIM_PWM_Start_DMA+0x6e>
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	2b04      	cmp	r3, #4
 8003884:	d109      	bne.n	800389a <HAL_TIM_PWM_Start_DMA+0x42>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	bf0c      	ite	eq
 8003892:	2301      	moveq	r3, #1
 8003894:	2300      	movne	r3, #0
 8003896:	b2db      	uxtb	r3, r3
 8003898:	e015      	b.n	80038c6 <HAL_TIM_PWM_Start_DMA+0x6e>
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	2b08      	cmp	r3, #8
 800389e:	d109      	bne.n	80038b4 <HAL_TIM_PWM_Start_DMA+0x5c>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	bf0c      	ite	eq
 80038ac:	2301      	moveq	r3, #1
 80038ae:	2300      	movne	r3, #0
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	e008      	b.n	80038c6 <HAL_TIM_PWM_Start_DMA+0x6e>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	bf0c      	ite	eq
 80038c0:	2301      	moveq	r3, #1
 80038c2:	2300      	movne	r3, #0
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 80038ca:	2302      	movs	r3, #2
 80038cc:	e14e      	b.n	8003b6c <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d109      	bne.n	80038e8 <HAL_TIM_PWM_Start_DMA+0x90>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b01      	cmp	r3, #1
 80038de:	bf0c      	ite	eq
 80038e0:	2301      	moveq	r3, #1
 80038e2:	2300      	movne	r3, #0
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	e022      	b.n	800392e <HAL_TIM_PWM_Start_DMA+0xd6>
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d109      	bne.n	8003902 <HAL_TIM_PWM_Start_DMA+0xaa>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	bf0c      	ite	eq
 80038fa:	2301      	moveq	r3, #1
 80038fc:	2300      	movne	r3, #0
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	e015      	b.n	800392e <HAL_TIM_PWM_Start_DMA+0xd6>
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	2b08      	cmp	r3, #8
 8003906:	d109      	bne.n	800391c <HAL_TIM_PWM_Start_DMA+0xc4>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b01      	cmp	r3, #1
 8003912:	bf0c      	ite	eq
 8003914:	2301      	moveq	r3, #1
 8003916:	2300      	movne	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	e008      	b.n	800392e <HAL_TIM_PWM_Start_DMA+0xd6>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b01      	cmp	r3, #1
 8003926:	bf0c      	ite	eq
 8003928:	2301      	moveq	r3, #1
 800392a:	2300      	movne	r3, #0
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d024      	beq.n	800397c <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d104      	bne.n	8003942 <HAL_TIM_PWM_Start_DMA+0xea>
 8003938:	887b      	ldrh	r3, [r7, #2]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e114      	b.n	8003b6c <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d104      	bne.n	8003952 <HAL_TIM_PWM_Start_DMA+0xfa>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2202      	movs	r2, #2
 800394c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003950:	e016      	b.n	8003980 <HAL_TIM_PWM_Start_DMA+0x128>
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	2b04      	cmp	r3, #4
 8003956:	d104      	bne.n	8003962 <HAL_TIM_PWM_Start_DMA+0x10a>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2202      	movs	r2, #2
 800395c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003960:	e00e      	b.n	8003980 <HAL_TIM_PWM_Start_DMA+0x128>
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	2b08      	cmp	r3, #8
 8003966:	d104      	bne.n	8003972 <HAL_TIM_PWM_Start_DMA+0x11a>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2202      	movs	r2, #2
 800396c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003970:	e006      	b.n	8003980 <HAL_TIM_PWM_Start_DMA+0x128>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2202      	movs	r2, #2
 8003976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800397a:	e001      	b.n	8003980 <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e0f5      	b.n	8003b6c <HAL_TIM_PWM_Start_DMA+0x314>
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2b0c      	cmp	r3, #12
 8003984:	f200 80ae 	bhi.w	8003ae4 <HAL_TIM_PWM_Start_DMA+0x28c>
 8003988:	a201      	add	r2, pc, #4	; (adr r2, 8003990 <HAL_TIM_PWM_Start_DMA+0x138>)
 800398a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398e:	bf00      	nop
 8003990:	080039c5 	.word	0x080039c5
 8003994:	08003ae5 	.word	0x08003ae5
 8003998:	08003ae5 	.word	0x08003ae5
 800399c:	08003ae5 	.word	0x08003ae5
 80039a0:	08003a0d 	.word	0x08003a0d
 80039a4:	08003ae5 	.word	0x08003ae5
 80039a8:	08003ae5 	.word	0x08003ae5
 80039ac:	08003ae5 	.word	0x08003ae5
 80039b0:	08003a55 	.word	0x08003a55
 80039b4:	08003ae5 	.word	0x08003ae5
 80039b8:	08003ae5 	.word	0x08003ae5
 80039bc:	08003ae5 	.word	0x08003ae5
 80039c0:	08003a9d 	.word	0x08003a9d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	4a6a      	ldr	r2, [pc, #424]	; (8003b74 <HAL_TIM_PWM_Start_DMA+0x31c>)
 80039ca:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	4a69      	ldr	r2, [pc, #420]	; (8003b78 <HAL_TIM_PWM_Start_DMA+0x320>)
 80039d2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	4a68      	ldr	r2, [pc, #416]	; (8003b7c <HAL_TIM_PWM_Start_DMA+0x324>)
 80039da:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80039e0:	6879      	ldr	r1, [r7, #4]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	3334      	adds	r3, #52	; 0x34
 80039e8:	461a      	mov	r2, r3
 80039ea:	887b      	ldrh	r3, [r7, #2]
 80039ec:	f7fd f9ae 	bl	8000d4c <HAL_DMA_Start_IT>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e0b8      	b.n	8003b6c <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68da      	ldr	r2, [r3, #12]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a08:	60da      	str	r2, [r3, #12]
      break;
 8003a0a:	e06c      	b.n	8003ae6 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a10:	4a58      	ldr	r2, [pc, #352]	; (8003b74 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003a12:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a18:	4a57      	ldr	r2, [pc, #348]	; (8003b78 <HAL_TIM_PWM_Start_DMA+0x320>)
 8003a1a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a20:	4a56      	ldr	r2, [pc, #344]	; (8003b7c <HAL_TIM_PWM_Start_DMA+0x324>)
 8003a22:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	3338      	adds	r3, #56	; 0x38
 8003a30:	461a      	mov	r2, r3
 8003a32:	887b      	ldrh	r3, [r7, #2]
 8003a34:	f7fd f98a 	bl	8000d4c <HAL_DMA_Start_IT>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e094      	b.n	8003b6c <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68da      	ldr	r2, [r3, #12]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a50:	60da      	str	r2, [r3, #12]
      break;
 8003a52:	e048      	b.n	8003ae6 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a58:	4a46      	ldr	r2, [pc, #280]	; (8003b74 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003a5a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a60:	4a45      	ldr	r2, [pc, #276]	; (8003b78 <HAL_TIM_PWM_Start_DMA+0x320>)
 8003a62:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a68:	4a44      	ldr	r2, [pc, #272]	; (8003b7c <HAL_TIM_PWM_Start_DMA+0x324>)
 8003a6a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003a70:	6879      	ldr	r1, [r7, #4]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	333c      	adds	r3, #60	; 0x3c
 8003a78:	461a      	mov	r2, r3
 8003a7a:	887b      	ldrh	r3, [r7, #2]
 8003a7c:	f7fd f966 	bl	8000d4c <HAL_DMA_Start_IT>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e070      	b.n	8003b6c <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68da      	ldr	r2, [r3, #12]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a98:	60da      	str	r2, [r3, #12]
      break;
 8003a9a:	e024      	b.n	8003ae6 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa0:	4a34      	ldr	r2, [pc, #208]	; (8003b74 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003aa2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa8:	4a33      	ldr	r2, [pc, #204]	; (8003b78 <HAL_TIM_PWM_Start_DMA+0x320>)
 8003aaa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab0:	4a32      	ldr	r2, [pc, #200]	; (8003b7c <HAL_TIM_PWM_Start_DMA+0x324>)
 8003ab2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003ab8:	6879      	ldr	r1, [r7, #4]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	3340      	adds	r3, #64	; 0x40
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	887b      	ldrh	r3, [r7, #2]
 8003ac4:	f7fd f942 	bl	8000d4c <HAL_DMA_Start_IT>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e04c      	b.n	8003b6c <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68da      	ldr	r2, [r3, #12]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ae0:	60da      	str	r2, [r3, #12]
      break;
 8003ae2:	e000      	b.n	8003ae6 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 8003ae4:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2201      	movs	r2, #1
 8003aec:	68b9      	ldr	r1, [r7, #8]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 fd3a 	bl	8004568 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a21      	ldr	r2, [pc, #132]	; (8003b80 <HAL_TIM_PWM_Start_DMA+0x328>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d107      	bne.n	8003b0e <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b0c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a1b      	ldr	r2, [pc, #108]	; (8003b80 <HAL_TIM_PWM_Start_DMA+0x328>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d00e      	beq.n	8003b36 <HAL_TIM_PWM_Start_DMA+0x2de>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b20:	d009      	beq.n	8003b36 <HAL_TIM_PWM_Start_DMA+0x2de>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a17      	ldr	r2, [pc, #92]	; (8003b84 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d004      	beq.n	8003b36 <HAL_TIM_PWM_Start_DMA+0x2de>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a15      	ldr	r2, [pc, #84]	; (8003b88 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d111      	bne.n	8003b5a <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f003 0307 	and.w	r3, r3, #7
 8003b40:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	2b06      	cmp	r3, #6
 8003b46:	d010      	beq.n	8003b6a <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f042 0201 	orr.w	r2, r2, #1
 8003b56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b58:	e007      	b.n	8003b6a <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f042 0201 	orr.w	r2, r2, #1
 8003b68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	08003f59 	.word	0x08003f59
 8003b78:	08004001 	.word	0x08004001
 8003b7c:	08003ec7 	.word	0x08003ec7
 8003b80:	40012c00 	.word	0x40012c00
 8003b84:	40000400 	.word	0x40000400
 8003b88:	40000800 	.word	0x40000800

08003b8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d101      	bne.n	8003ba6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	e0ac      	b.n	8003d00 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b0c      	cmp	r3, #12
 8003bb2:	f200 809f 	bhi.w	8003cf4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003bb6:	a201      	add	r2, pc, #4	; (adr r2, 8003bbc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bbc:	08003bf1 	.word	0x08003bf1
 8003bc0:	08003cf5 	.word	0x08003cf5
 8003bc4:	08003cf5 	.word	0x08003cf5
 8003bc8:	08003cf5 	.word	0x08003cf5
 8003bcc:	08003c31 	.word	0x08003c31
 8003bd0:	08003cf5 	.word	0x08003cf5
 8003bd4:	08003cf5 	.word	0x08003cf5
 8003bd8:	08003cf5 	.word	0x08003cf5
 8003bdc:	08003c73 	.word	0x08003c73
 8003be0:	08003cf5 	.word	0x08003cf5
 8003be4:	08003cf5 	.word	0x08003cf5
 8003be8:	08003cf5 	.word	0x08003cf5
 8003bec:	08003cb3 	.word	0x08003cb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68b9      	ldr	r1, [r7, #8]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 fa98 	bl	800412c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	699a      	ldr	r2, [r3, #24]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0208 	orr.w	r2, r2, #8
 8003c0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699a      	ldr	r2, [r3, #24]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 0204 	bic.w	r2, r2, #4
 8003c1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6999      	ldr	r1, [r3, #24]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	691a      	ldr	r2, [r3, #16]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	619a      	str	r2, [r3, #24]
      break;
 8003c2e:	e062      	b.n	8003cf6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68b9      	ldr	r1, [r7, #8]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 fade 	bl	80041f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	699a      	ldr	r2, [r3, #24]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	699a      	ldr	r2, [r3, #24]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6999      	ldr	r1, [r3, #24]
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	021a      	lsls	r2, r3, #8
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	619a      	str	r2, [r3, #24]
      break;
 8003c70:	e041      	b.n	8003cf6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68b9      	ldr	r1, [r7, #8]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f000 fb27 	bl	80042cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	69da      	ldr	r2, [r3, #28]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f042 0208 	orr.w	r2, r2, #8
 8003c8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	69da      	ldr	r2, [r3, #28]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 0204 	bic.w	r2, r2, #4
 8003c9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	69d9      	ldr	r1, [r3, #28]
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	691a      	ldr	r2, [r3, #16]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	61da      	str	r2, [r3, #28]
      break;
 8003cb0:	e021      	b.n	8003cf6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68b9      	ldr	r1, [r7, #8]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 fb71 	bl	80043a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	69da      	ldr	r2, [r3, #28]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ccc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	69da      	ldr	r2, [r3, #28]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	69d9      	ldr	r1, [r3, #28]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	021a      	lsls	r2, r3, #8
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	61da      	str	r2, [r3, #28]
      break;
 8003cf2:	e000      	b.n	8003cf6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003cf4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d101      	bne.n	8003d20 <HAL_TIM_ConfigClockSource+0x18>
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	e0b3      	b.n	8003e88 <HAL_TIM_ConfigClockSource+0x180>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d46:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d58:	d03e      	beq.n	8003dd8 <HAL_TIM_ConfigClockSource+0xd0>
 8003d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d5e:	f200 8087 	bhi.w	8003e70 <HAL_TIM_ConfigClockSource+0x168>
 8003d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d66:	f000 8085 	beq.w	8003e74 <HAL_TIM_ConfigClockSource+0x16c>
 8003d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d6e:	d87f      	bhi.n	8003e70 <HAL_TIM_ConfigClockSource+0x168>
 8003d70:	2b70      	cmp	r3, #112	; 0x70
 8003d72:	d01a      	beq.n	8003daa <HAL_TIM_ConfigClockSource+0xa2>
 8003d74:	2b70      	cmp	r3, #112	; 0x70
 8003d76:	d87b      	bhi.n	8003e70 <HAL_TIM_ConfigClockSource+0x168>
 8003d78:	2b60      	cmp	r3, #96	; 0x60
 8003d7a:	d050      	beq.n	8003e1e <HAL_TIM_ConfigClockSource+0x116>
 8003d7c:	2b60      	cmp	r3, #96	; 0x60
 8003d7e:	d877      	bhi.n	8003e70 <HAL_TIM_ConfigClockSource+0x168>
 8003d80:	2b50      	cmp	r3, #80	; 0x50
 8003d82:	d03c      	beq.n	8003dfe <HAL_TIM_ConfigClockSource+0xf6>
 8003d84:	2b50      	cmp	r3, #80	; 0x50
 8003d86:	d873      	bhi.n	8003e70 <HAL_TIM_ConfigClockSource+0x168>
 8003d88:	2b40      	cmp	r3, #64	; 0x40
 8003d8a:	d058      	beq.n	8003e3e <HAL_TIM_ConfigClockSource+0x136>
 8003d8c:	2b40      	cmp	r3, #64	; 0x40
 8003d8e:	d86f      	bhi.n	8003e70 <HAL_TIM_ConfigClockSource+0x168>
 8003d90:	2b30      	cmp	r3, #48	; 0x30
 8003d92:	d064      	beq.n	8003e5e <HAL_TIM_ConfigClockSource+0x156>
 8003d94:	2b30      	cmp	r3, #48	; 0x30
 8003d96:	d86b      	bhi.n	8003e70 <HAL_TIM_ConfigClockSource+0x168>
 8003d98:	2b20      	cmp	r3, #32
 8003d9a:	d060      	beq.n	8003e5e <HAL_TIM_ConfigClockSource+0x156>
 8003d9c:	2b20      	cmp	r3, #32
 8003d9e:	d867      	bhi.n	8003e70 <HAL_TIM_ConfigClockSource+0x168>
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d05c      	beq.n	8003e5e <HAL_TIM_ConfigClockSource+0x156>
 8003da4:	2b10      	cmp	r3, #16
 8003da6:	d05a      	beq.n	8003e5e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003da8:	e062      	b.n	8003e70 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6818      	ldr	r0, [r3, #0]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	6899      	ldr	r1, [r3, #8]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685a      	ldr	r2, [r3, #4]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f000 fbb6 	bl	800452a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003dcc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	609a      	str	r2, [r3, #8]
      break;
 8003dd6:	e04e      	b.n	8003e76 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6818      	ldr	r0, [r3, #0]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	6899      	ldr	r1, [r3, #8]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	f000 fb9f 	bl	800452a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dfa:	609a      	str	r2, [r3, #8]
      break;
 8003dfc:	e03b      	b.n	8003e76 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6818      	ldr	r0, [r3, #0]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	6859      	ldr	r1, [r3, #4]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	f000 fb16 	bl	800443c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2150      	movs	r1, #80	; 0x50
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 fb6d 	bl	80044f6 <TIM_ITRx_SetConfig>
      break;
 8003e1c:	e02b      	b.n	8003e76 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6818      	ldr	r0, [r3, #0]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	6859      	ldr	r1, [r3, #4]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	f000 fb34 	bl	8004498 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2160      	movs	r1, #96	; 0x60
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 fb5d 	bl	80044f6 <TIM_ITRx_SetConfig>
      break;
 8003e3c:	e01b      	b.n	8003e76 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6818      	ldr	r0, [r3, #0]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	6859      	ldr	r1, [r3, #4]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	f000 faf6 	bl	800443c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2140      	movs	r1, #64	; 0x40
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 fb4d 	bl	80044f6 <TIM_ITRx_SetConfig>
      break;
 8003e5c:	e00b      	b.n	8003e76 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4619      	mov	r1, r3
 8003e68:	4610      	mov	r0, r2
 8003e6a:	f000 fb44 	bl	80044f6 <TIM_ITRx_SetConfig>
        break;
 8003e6e:	e002      	b.n	8003e76 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003e70:	bf00      	nop
 8003e72:	e000      	b.n	8003e76 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003e74:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3710      	adds	r7, #16
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bc80      	pop	{r7}
 8003ea0:	4770      	bx	lr

08003ea2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b083      	sub	sp, #12
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003eaa:	bf00      	nop
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bc80      	pop	{r7}
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bc80      	pop	{r7}
 8003ec4:	4770      	bx	lr

08003ec6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b084      	sub	sp, #16
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d107      	bne.n	8003eee <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eec:	e02a      	b.n	8003f44 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d107      	bne.n	8003f08 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2202      	movs	r2, #2
 8003efc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f06:	e01d      	b.n	8003f44 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d107      	bne.n	8003f22 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2204      	movs	r2, #4
 8003f16:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f20:	e010      	b.n	8003f44 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d107      	bne.n	8003f3c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2208      	movs	r2, #8
 8003f30:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f3a:	e003      	b.n	8003f44 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f7ff ffb5 	bl	8003eb4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	771a      	strb	r2, [r3, #28]
}
 8003f50:	bf00      	nop
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d10b      	bne.n	8003f88 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2201      	movs	r2, #1
 8003f74:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d136      	bne.n	8003fec <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f86:	e031      	b.n	8003fec <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d10b      	bne.n	8003faa <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2202      	movs	r2, #2
 8003f96:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d125      	bne.n	8003fec <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fa8:	e020      	b.n	8003fec <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d10b      	bne.n	8003fcc <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2204      	movs	r2, #4
 8003fb8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d114      	bne.n	8003fec <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fca:	e00f      	b.n	8003fec <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d10a      	bne.n	8003fec <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2208      	movs	r2, #8
 8003fda:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d103      	bne.n	8003fec <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f7ff ff4f 	bl	8003e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	771a      	strb	r2, [r3, #28]
}
 8003ff8:	bf00      	nop
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	429a      	cmp	r2, r3
 8004016:	d103      	bne.n	8004020 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2201      	movs	r2, #1
 800401c:	771a      	strb	r2, [r3, #28]
 800401e:	e019      	b.n	8004054 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	429a      	cmp	r2, r3
 8004028:	d103      	bne.n	8004032 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2202      	movs	r2, #2
 800402e:	771a      	strb	r2, [r3, #28]
 8004030:	e010      	b.n	8004054 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	429a      	cmp	r2, r3
 800403a:	d103      	bne.n	8004044 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2204      	movs	r2, #4
 8004040:	771a      	strb	r2, [r3, #28]
 8004042:	e007      	b.n	8004054 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	429a      	cmp	r2, r3
 800404c:	d102      	bne.n	8004054 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2208      	movs	r2, #8
 8004052:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f7ff ff24 	bl	8003ea2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	771a      	strb	r2, [r3, #28]
}
 8004060:	bf00      	nop
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a29      	ldr	r2, [pc, #164]	; (8004120 <TIM_Base_SetConfig+0xb8>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d00b      	beq.n	8004098 <TIM_Base_SetConfig+0x30>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004086:	d007      	beq.n	8004098 <TIM_Base_SetConfig+0x30>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a26      	ldr	r2, [pc, #152]	; (8004124 <TIM_Base_SetConfig+0xbc>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d003      	beq.n	8004098 <TIM_Base_SetConfig+0x30>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a25      	ldr	r2, [pc, #148]	; (8004128 <TIM_Base_SetConfig+0xc0>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d108      	bne.n	80040aa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800409e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a1c      	ldr	r2, [pc, #112]	; (8004120 <TIM_Base_SetConfig+0xb8>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d00b      	beq.n	80040ca <TIM_Base_SetConfig+0x62>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b8:	d007      	beq.n	80040ca <TIM_Base_SetConfig+0x62>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a19      	ldr	r2, [pc, #100]	; (8004124 <TIM_Base_SetConfig+0xbc>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d003      	beq.n	80040ca <TIM_Base_SetConfig+0x62>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a18      	ldr	r2, [pc, #96]	; (8004128 <TIM_Base_SetConfig+0xc0>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d108      	bne.n	80040dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	4313      	orrs	r3, r2
 80040da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	689a      	ldr	r2, [r3, #8]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a07      	ldr	r2, [pc, #28]	; (8004120 <TIM_Base_SetConfig+0xb8>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d103      	bne.n	8004110 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	691a      	ldr	r2, [r3, #16]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	615a      	str	r2, [r3, #20]
}
 8004116:	bf00      	nop
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	bc80      	pop	{r7}
 800411e:	4770      	bx	lr
 8004120:	40012c00 	.word	0x40012c00
 8004124:	40000400 	.word	0x40000400
 8004128:	40000800 	.word	0x40000800

0800412c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	f023 0201 	bic.w	r2, r3, #1
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800415a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f023 0303 	bic.w	r3, r3, #3
 8004162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	4313      	orrs	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f023 0302 	bic.w	r3, r3, #2
 8004174:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	4313      	orrs	r3, r2
 800417e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a1c      	ldr	r2, [pc, #112]	; (80041f4 <TIM_OC1_SetConfig+0xc8>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d10c      	bne.n	80041a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	f023 0308 	bic.w	r3, r3, #8
 800418e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	4313      	orrs	r3, r2
 8004198:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f023 0304 	bic.w	r3, r3, #4
 80041a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a13      	ldr	r2, [pc, #76]	; (80041f4 <TIM_OC1_SetConfig+0xc8>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d111      	bne.n	80041ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	621a      	str	r2, [r3, #32]
}
 80041e8:	bf00      	nop
 80041ea:	371c      	adds	r7, #28
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bc80      	pop	{r7}
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	40012c00 	.word	0x40012c00

080041f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	f023 0210 	bic.w	r2, r3, #16
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800422e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	021b      	lsls	r3, r3, #8
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	4313      	orrs	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f023 0320 	bic.w	r3, r3, #32
 8004242:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	011b      	lsls	r3, r3, #4
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	4313      	orrs	r3, r2
 800424e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a1d      	ldr	r2, [pc, #116]	; (80042c8 <TIM_OC2_SetConfig+0xd0>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d10d      	bne.n	8004274 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800425e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	4313      	orrs	r3, r2
 800426a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004272:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a14      	ldr	r2, [pc, #80]	; (80042c8 <TIM_OC2_SetConfig+0xd0>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d113      	bne.n	80042a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004282:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800428a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	4313      	orrs	r3, r2
 8004296:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	621a      	str	r2, [r3, #32]
}
 80042be:	bf00      	nop
 80042c0:	371c      	adds	r7, #28
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bc80      	pop	{r7}
 80042c6:	4770      	bx	lr
 80042c8:	40012c00 	.word	0x40012c00

080042cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f023 0303 	bic.w	r3, r3, #3
 8004302:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	4313      	orrs	r3, r2
 800430c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004314:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	021b      	lsls	r3, r3, #8
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	4313      	orrs	r3, r2
 8004320:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a1d      	ldr	r2, [pc, #116]	; (800439c <TIM_OC3_SetConfig+0xd0>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d10d      	bne.n	8004346 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004330:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	021b      	lsls	r3, r3, #8
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	4313      	orrs	r3, r2
 800433c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004344:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a14      	ldr	r2, [pc, #80]	; (800439c <TIM_OC3_SetConfig+0xd0>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d113      	bne.n	8004376 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004354:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800435c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	011b      	lsls	r3, r3, #4
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	4313      	orrs	r3, r2
 8004368:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	011b      	lsls	r3, r3, #4
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	4313      	orrs	r3, r2
 8004374:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	621a      	str	r2, [r3, #32]
}
 8004390:	bf00      	nop
 8004392:	371c      	adds	r7, #28
 8004394:	46bd      	mov	sp, r7
 8004396:	bc80      	pop	{r7}
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	40012c00 	.word	0x40012c00

080043a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b087      	sub	sp, #28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	021b      	lsls	r3, r3, #8
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	031b      	lsls	r3, r3, #12
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a0f      	ldr	r2, [pc, #60]	; (8004438 <TIM_OC4_SetConfig+0x98>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d109      	bne.n	8004414 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004406:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	019b      	lsls	r3, r3, #6
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	4313      	orrs	r3, r2
 8004412:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	621a      	str	r2, [r3, #32]
}
 800442e:	bf00      	nop
 8004430:	371c      	adds	r7, #28
 8004432:	46bd      	mov	sp, r7
 8004434:	bc80      	pop	{r7}
 8004436:	4770      	bx	lr
 8004438:	40012c00 	.word	0x40012c00

0800443c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800443c:	b480      	push	{r7}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	f023 0201 	bic.w	r2, r3, #1
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004466:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	011b      	lsls	r3, r3, #4
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	4313      	orrs	r3, r2
 8004470:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f023 030a 	bic.w	r3, r3, #10
 8004478:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	4313      	orrs	r3, r2
 8004480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	621a      	str	r2, [r3, #32]
}
 800448e:	bf00      	nop
 8004490:	371c      	adds	r7, #28
 8004492:	46bd      	mov	sp, r7
 8004494:	bc80      	pop	{r7}
 8004496:	4770      	bx	lr

08004498 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	f023 0210 	bic.w	r2, r3, #16
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	031b      	lsls	r3, r3, #12
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	4313      	orrs	r3, r2
 80044de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	621a      	str	r2, [r3, #32]
}
 80044ec:	bf00      	nop
 80044ee:	371c      	adds	r7, #28
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bc80      	pop	{r7}
 80044f4:	4770      	bx	lr

080044f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b085      	sub	sp, #20
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
 80044fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800450c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	4313      	orrs	r3, r2
 8004514:	f043 0307 	orr.w	r3, r3, #7
 8004518:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	609a      	str	r2, [r3, #8]
}
 8004520:	bf00      	nop
 8004522:	3714      	adds	r7, #20
 8004524:	46bd      	mov	sp, r7
 8004526:	bc80      	pop	{r7}
 8004528:	4770      	bx	lr

0800452a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800452a:	b480      	push	{r7}
 800452c:	b087      	sub	sp, #28
 800452e:	af00      	add	r7, sp, #0
 8004530:	60f8      	str	r0, [r7, #12]
 8004532:	60b9      	str	r1, [r7, #8]
 8004534:	607a      	str	r2, [r7, #4]
 8004536:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004544:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	021a      	lsls	r2, r3, #8
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	431a      	orrs	r2, r3
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	4313      	orrs	r3, r2
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	4313      	orrs	r3, r2
 8004556:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	609a      	str	r2, [r3, #8]
}
 800455e:	bf00      	nop
 8004560:	371c      	adds	r7, #28
 8004562:	46bd      	mov	sp, r7
 8004564:	bc80      	pop	{r7}
 8004566:	4770      	bx	lr

08004568 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004568:	b480      	push	{r7}
 800456a:	b087      	sub	sp, #28
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f003 031f 	and.w	r3, r3, #31
 800457a:	2201      	movs	r2, #1
 800457c:	fa02 f303 	lsl.w	r3, r2, r3
 8004580:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6a1a      	ldr	r2, [r3, #32]
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	43db      	mvns	r3, r3
 800458a:	401a      	ands	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6a1a      	ldr	r2, [r3, #32]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	f003 031f 	and.w	r3, r3, #31
 800459a:	6879      	ldr	r1, [r7, #4]
 800459c:	fa01 f303 	lsl.w	r3, r1, r3
 80045a0:	431a      	orrs	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	621a      	str	r2, [r3, #32]
}
 80045a6:	bf00      	nop
 80045a8:	371c      	adds	r7, #28
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bc80      	pop	{r7}
 80045ae:	4770      	bx	lr

080045b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d101      	bne.n	80045c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045c4:	2302      	movs	r3, #2
 80045c6:	e046      	b.n	8004656 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a16      	ldr	r2, [pc, #88]	; (8004660 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d00e      	beq.n	800462a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004614:	d009      	beq.n	800462a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a12      	ldr	r2, [pc, #72]	; (8004664 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d004      	beq.n	800462a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a10      	ldr	r2, [pc, #64]	; (8004668 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d10c      	bne.n	8004644 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004630:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	4313      	orrs	r3, r2
 800463a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68ba      	ldr	r2, [r7, #8]
 8004642:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3714      	adds	r7, #20
 800465a:	46bd      	mov	sp, r7
 800465c:	bc80      	pop	{r7}
 800465e:	4770      	bx	lr
 8004660:	40012c00 	.word	0x40012c00
 8004664:	40000400 	.word	0x40000400
 8004668:	40000800 	.word	0x40000800

0800466c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800466c:	b084      	sub	sp, #16
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
 8004676:	f107 0014 	add.w	r0, r7, #20
 800467a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	bc80      	pop	{r7}
 8004688:	b004      	add	sp, #16
 800468a:	4770      	bx	lr

0800468c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800469c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80046a0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bc80      	pop	{r7}
 80046b6:	4770      	bx	lr

080046b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80046c0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80046c4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	43db      	mvns	r3, r3
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	4013      	ands	r3, r2
 80046d8:	b29a      	uxth	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3714      	adds	r7, #20
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bc80      	pop	{r7}
 80046ea:	4770      	bx	lr

080046ec <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	460b      	mov	r3, r1
 80046f6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	bc80      	pop	{r7}
 8004702:	4770      	bx	lr

08004704 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004704:	b084      	sub	sp, #16
 8004706:	b480      	push	{r7}
 8004708:	b083      	sub	sp, #12
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
 800470e:	f107 0014 	add.w	r0, r7, #20
 8004712:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	bc80      	pop	{r7}
 8004740:	b004      	add	sp, #16
 8004742:	4770      	bx	lr

08004744 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004744:	b480      	push	{r7}
 8004746:	b09b      	sub	sp, #108	; 0x6c
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800474e:	2300      	movs	r3, #0
 8004750:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	881b      	ldrh	r3, [r3, #0]
 8004760:	b29b      	uxth	r3, r3
 8004762:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800476a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	78db      	ldrb	r3, [r3, #3]
 8004772:	2b03      	cmp	r3, #3
 8004774:	d81f      	bhi.n	80047b6 <USB_ActivateEndpoint+0x72>
 8004776:	a201      	add	r2, pc, #4	; (adr r2, 800477c <USB_ActivateEndpoint+0x38>)
 8004778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477c:	0800478d 	.word	0x0800478d
 8004780:	080047a9 	.word	0x080047a9
 8004784:	080047bf 	.word	0x080047bf
 8004788:	0800479b 	.word	0x0800479b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800478c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004790:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004794:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004798:	e012      	b.n	80047c0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800479a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800479e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80047a2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80047a6:	e00b      	b.n	80047c0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80047a8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80047ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047b0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80047b4:	e004      	b.n	80047c0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80047bc:	e000      	b.n	80047c0 <USB_ActivateEndpoint+0x7c>
      break;
 80047be:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	441a      	add	r2, r3
 80047ca:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80047ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047de:	b29b      	uxth	r3, r3
 80047e0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4413      	add	r3, r2
 80047ec:	881b      	ldrh	r3, [r3, #0]
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	b29b      	uxth	r3, r3
 8004800:	4313      	orrs	r3, r2
 8004802:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	441a      	add	r2, r3
 8004810:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004814:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004818:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800481c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004824:	b29b      	uxth	r3, r3
 8004826:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	7b1b      	ldrb	r3, [r3, #12]
 800482c:	2b00      	cmp	r3, #0
 800482e:	f040 8149 	bne.w	8004ac4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	785b      	ldrb	r3, [r3, #1]
 8004836:	2b00      	cmp	r3, #0
 8004838:	f000 8084 	beq.w	8004944 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	617b      	str	r3, [r7, #20]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004846:	b29b      	uxth	r3, r3
 8004848:	461a      	mov	r2, r3
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	4413      	add	r3, r2
 800484e:	617b      	str	r3, [r7, #20]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	011a      	lsls	r2, r3, #4
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	4413      	add	r3, r2
 800485a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800485e:	613b      	str	r3, [r7, #16]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	88db      	ldrh	r3, [r3, #6]
 8004864:	085b      	lsrs	r3, r3, #1
 8004866:	b29b      	uxth	r3, r3
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	81fb      	strh	r3, [r7, #14]
 800487e:	89fb      	ldrh	r3, [r7, #14]
 8004880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004884:	2b00      	cmp	r3, #0
 8004886:	d01b      	beq.n	80048c0 <USB_ActivateEndpoint+0x17c>
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	881b      	ldrh	r3, [r3, #0]
 8004894:	b29b      	uxth	r3, r3
 8004896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800489a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800489e:	81bb      	strh	r3, [r7, #12]
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	441a      	add	r2, r3
 80048aa:	89bb      	ldrh	r3, [r7, #12]
 80048ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048bc:	b29b      	uxth	r3, r3
 80048be:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	78db      	ldrb	r3, [r3, #3]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d020      	beq.n	800490a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4413      	add	r3, r2
 80048d2:	881b      	ldrh	r3, [r3, #0]
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048de:	813b      	strh	r3, [r7, #8]
 80048e0:	893b      	ldrh	r3, [r7, #8]
 80048e2:	f083 0320 	eor.w	r3, r3, #32
 80048e6:	813b      	strh	r3, [r7, #8]
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	441a      	add	r2, r3
 80048f2:	893b      	ldrh	r3, [r7, #8]
 80048f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004904:	b29b      	uxth	r3, r3
 8004906:	8013      	strh	r3, [r2, #0]
 8004908:	e27f      	b.n	8004e0a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4413      	add	r3, r2
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	b29b      	uxth	r3, r3
 8004918:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800491c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004920:	817b      	strh	r3, [r7, #10]
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	441a      	add	r2, r3
 800492c:	897b      	ldrh	r3, [r7, #10]
 800492e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004932:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800493a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800493e:	b29b      	uxth	r3, r3
 8004940:	8013      	strh	r3, [r2, #0]
 8004942:	e262      	b.n	8004e0a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800494e:	b29b      	uxth	r3, r3
 8004950:	461a      	mov	r2, r3
 8004952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004954:	4413      	add	r3, r2
 8004956:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	011a      	lsls	r2, r3, #4
 800495e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004960:	4413      	add	r3, r2
 8004962:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004966:	62bb      	str	r3, [r7, #40]	; 0x28
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	88db      	ldrh	r3, [r3, #6]
 800496c:	085b      	lsrs	r3, r3, #1
 800496e:	b29b      	uxth	r3, r3
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	b29a      	uxth	r2, r3
 8004974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004976:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	627b      	str	r3, [r7, #36]	; 0x24
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004982:	b29b      	uxth	r3, r3
 8004984:	461a      	mov	r2, r3
 8004986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004988:	4413      	add	r3, r2
 800498a:	627b      	str	r3, [r7, #36]	; 0x24
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	011a      	lsls	r2, r3, #4
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	4413      	add	r3, r2
 8004996:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800499a:	623b      	str	r3, [r7, #32]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d112      	bne.n	80049ca <USB_ActivateEndpoint+0x286>
 80049a4:	6a3b      	ldr	r3, [r7, #32]
 80049a6:	881b      	ldrh	r3, [r3, #0]
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	6a3b      	ldr	r3, [r7, #32]
 80049b2:	801a      	strh	r2, [r3, #0]
 80049b4:	6a3b      	ldr	r3, [r7, #32]
 80049b6:	881b      	ldrh	r3, [r3, #0]
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	6a3b      	ldr	r3, [r7, #32]
 80049c6:	801a      	strh	r2, [r3, #0]
 80049c8:	e02f      	b.n	8004a2a <USB_ActivateEndpoint+0x2e6>
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	2b3e      	cmp	r3, #62	; 0x3e
 80049d0:	d813      	bhi.n	80049fa <USB_ActivateEndpoint+0x2b6>
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	085b      	lsrs	r3, r3, #1
 80049d8:	663b      	str	r3, [r7, #96]	; 0x60
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d002      	beq.n	80049ec <USB_ActivateEndpoint+0x2a8>
 80049e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049e8:	3301      	adds	r3, #1
 80049ea:	663b      	str	r3, [r7, #96]	; 0x60
 80049ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	029b      	lsls	r3, r3, #10
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	6a3b      	ldr	r3, [r7, #32]
 80049f6:	801a      	strh	r2, [r3, #0]
 80049f8:	e017      	b.n	8004a2a <USB_ActivateEndpoint+0x2e6>
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	095b      	lsrs	r3, r3, #5
 8004a00:	663b      	str	r3, [r7, #96]	; 0x60
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	f003 031f 	and.w	r3, r3, #31
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d102      	bne.n	8004a14 <USB_ActivateEndpoint+0x2d0>
 8004a0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a10:	3b01      	subs	r3, #1
 8004a12:	663b      	str	r3, [r7, #96]	; 0x60
 8004a14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	029b      	lsls	r3, r3, #10
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	6a3b      	ldr	r3, [r7, #32]
 8004a28:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	881b      	ldrh	r3, [r3, #0]
 8004a36:	83fb      	strh	r3, [r7, #30]
 8004a38:	8bfb      	ldrh	r3, [r7, #30]
 8004a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d01b      	beq.n	8004a7a <USB_ActivateEndpoint+0x336>
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4413      	add	r3, r2
 8004a4c:	881b      	ldrh	r3, [r3, #0]
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a58:	83bb      	strh	r3, [r7, #28]
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	441a      	add	r2, r3
 8004a64:	8bbb      	ldrh	r3, [r7, #28]
 8004a66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	881b      	ldrh	r3, [r3, #0]
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a90:	837b      	strh	r3, [r7, #26]
 8004a92:	8b7b      	ldrh	r3, [r7, #26]
 8004a94:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a98:	837b      	strh	r3, [r7, #26]
 8004a9a:	8b7b      	ldrh	r3, [r7, #26]
 8004a9c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004aa0:	837b      	strh	r3, [r7, #26]
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	441a      	add	r2, r3
 8004aac:	8b7b      	ldrh	r3, [r7, #26]
 8004aae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ab2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	8013      	strh	r3, [r2, #0]
 8004ac2:	e1a2      	b.n	8004e0a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	881b      	ldrh	r3, [r3, #0]
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ada:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	441a      	add	r2, r3
 8004ae8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004aec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004af0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004af4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b10:	4413      	add	r3, r2
 8004b12:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	011a      	lsls	r2, r3, #4
 8004b1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b22:	657b      	str	r3, [r7, #84]	; 0x54
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	891b      	ldrh	r3, [r3, #8]
 8004b28:	085b      	lsrs	r3, r3, #1
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b32:	801a      	strh	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	653b      	str	r3, [r7, #80]	; 0x50
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	461a      	mov	r2, r3
 8004b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b44:	4413      	add	r3, r2
 8004b46:	653b      	str	r3, [r7, #80]	; 0x50
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	011a      	lsls	r2, r3, #4
 8004b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b50:	4413      	add	r3, r2
 8004b52:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004b56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	895b      	ldrh	r3, [r3, #10]
 8004b5c:	085b      	lsrs	r3, r3, #1
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	005b      	lsls	r3, r3, #1
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b66:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	785b      	ldrb	r3, [r3, #1]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f040 8091 	bne.w	8004c94 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4413      	add	r3, r2
 8004b7c:	881b      	ldrh	r3, [r3, #0]
 8004b7e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004b80:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d01b      	beq.n	8004bc2 <USB_ActivateEndpoint+0x47e>
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	881b      	ldrh	r3, [r3, #0]
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba0:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	441a      	add	r2, r3
 8004bac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004bae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	4413      	add	r3, r2
 8004bcc:	881b      	ldrh	r3, [r3, #0]
 8004bce:	873b      	strh	r3, [r7, #56]	; 0x38
 8004bd0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d01b      	beq.n	8004c12 <USB_ActivateEndpoint+0x4ce>
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	4413      	add	r3, r2
 8004be4:	881b      	ldrh	r3, [r3, #0]
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	441a      	add	r2, r3
 8004bfc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004bfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c0a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4413      	add	r3, r2
 8004c1c:	881b      	ldrh	r3, [r3, #0]
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c28:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004c2a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004c2c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004c30:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004c32:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004c34:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004c38:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	441a      	add	r2, r3
 8004c44:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004c46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4413      	add	r3, r2
 8004c64:	881b      	ldrh	r3, [r3, #0]
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c70:	867b      	strh	r3, [r7, #50]	; 0x32
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	441a      	add	r2, r3
 8004c7c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004c7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	8013      	strh	r3, [r2, #0]
 8004c92:	e0ba      	b.n	8004e0a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	881b      	ldrh	r3, [r3, #0]
 8004ca0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004ca4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004ca8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d01d      	beq.n	8004cec <USB_ActivateEndpoint+0x5a8>
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	881b      	ldrh	r3, [r3, #0]
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	441a      	add	r2, r3
 8004cd4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004cd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ce0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	881b      	ldrh	r3, [r3, #0]
 8004cf8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004cfc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d01d      	beq.n	8004d44 <USB_ActivateEndpoint+0x600>
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	881b      	ldrh	r3, [r3, #0]
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d1e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	441a      	add	r2, r3
 8004d2c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004d30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	78db      	ldrb	r3, [r3, #3]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d024      	beq.n	8004d96 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	881b      	ldrh	r3, [r3, #0]
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d62:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004d66:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004d6a:	f083 0320 	eor.w	r3, r3, #32
 8004d6e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	441a      	add	r2, r3
 8004d7c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004d80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	8013      	strh	r3, [r2, #0]
 8004d94:	e01d      	b.n	8004dd2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	881b      	ldrh	r3, [r3, #0]
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004da8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	441a      	add	r2, r3
 8004dba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004dbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4413      	add	r3, r2
 8004ddc:	881b      	ldrh	r3, [r3, #0]
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	441a      	add	r2, r3
 8004df4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004df6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004e0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	376c      	adds	r7, #108	; 0x6c
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bc80      	pop	{r7}
 8004e16:	4770      	bx	lr

08004e18 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b08d      	sub	sp, #52	; 0x34
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	7b1b      	ldrb	r3, [r3, #12]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f040 808e 	bne.w	8004f48 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	785b      	ldrb	r3, [r3, #1]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d044      	beq.n	8004ebe <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4413      	add	r3, r2
 8004e3e:	881b      	ldrh	r3, [r3, #0]
 8004e40:	81bb      	strh	r3, [r7, #12]
 8004e42:	89bb      	ldrh	r3, [r7, #12]
 8004e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d01b      	beq.n	8004e84 <USB_DeactivateEndpoint+0x6c>
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	881b      	ldrh	r3, [r3, #0]
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e62:	817b      	strh	r3, [r7, #10]
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	441a      	add	r2, r3
 8004e6e:	897b      	ldrh	r3, [r7, #10]
 8004e70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	4413      	add	r3, r2
 8004e8e:	881b      	ldrh	r3, [r3, #0]
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e9a:	813b      	strh	r3, [r7, #8]
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	441a      	add	r2, r3
 8004ea6:	893b      	ldrh	r3, [r7, #8]
 8004ea8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	8013      	strh	r3, [r2, #0]
 8004ebc:	e192      	b.n	80051e4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4413      	add	r3, r2
 8004ec8:	881b      	ldrh	r3, [r3, #0]
 8004eca:	827b      	strh	r3, [r7, #18]
 8004ecc:	8a7b      	ldrh	r3, [r7, #18]
 8004ece:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d01b      	beq.n	8004f0e <USB_DeactivateEndpoint+0xf6>
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	881b      	ldrh	r3, [r3, #0]
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eec:	823b      	strh	r3, [r7, #16]
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	441a      	add	r2, r3
 8004ef8:	8a3b      	ldrh	r3, [r7, #16]
 8004efa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004efe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4413      	add	r3, r2
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f24:	81fb      	strh	r3, [r7, #14]
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	441a      	add	r2, r3
 8004f30:	89fb      	ldrh	r3, [r7, #14]
 8004f32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	8013      	strh	r3, [r2, #0]
 8004f46:	e14d      	b.n	80051e4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	785b      	ldrb	r3, [r3, #1]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f040 80a5 	bne.w	800509c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	4413      	add	r3, r2
 8004f5c:	881b      	ldrh	r3, [r3, #0]
 8004f5e:	843b      	strh	r3, [r7, #32]
 8004f60:	8c3b      	ldrh	r3, [r7, #32]
 8004f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d01b      	beq.n	8004fa2 <USB_DeactivateEndpoint+0x18a>
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4413      	add	r3, r2
 8004f74:	881b      	ldrh	r3, [r3, #0]
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f80:	83fb      	strh	r3, [r7, #30]
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	441a      	add	r2, r3
 8004f8c:	8bfb      	ldrh	r3, [r7, #30]
 8004f8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	4413      	add	r3, r2
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	83bb      	strh	r3, [r7, #28]
 8004fb0:	8bbb      	ldrh	r3, [r7, #28]
 8004fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d01b      	beq.n	8004ff2 <USB_DeactivateEndpoint+0x1da>
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4413      	add	r3, r2
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd0:	837b      	strh	r3, [r7, #26]
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	441a      	add	r2, r3
 8004fdc:	8b7b      	ldrh	r3, [r7, #26]
 8004fde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fe2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4413      	add	r3, r2
 8004ffc:	881b      	ldrh	r3, [r3, #0]
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005008:	833b      	strh	r3, [r7, #24]
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	441a      	add	r2, r3
 8005014:	8b3b      	ldrh	r3, [r7, #24]
 8005016:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800501a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800501e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005022:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005026:	b29b      	uxth	r3, r3
 8005028:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4413      	add	r3, r2
 8005034:	881b      	ldrh	r3, [r3, #0]
 8005036:	b29b      	uxth	r3, r3
 8005038:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800503c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005040:	82fb      	strh	r3, [r7, #22]
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	441a      	add	r2, r3
 800504c:	8afb      	ldrh	r3, [r7, #22]
 800504e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800505a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800505e:	b29b      	uxth	r3, r3
 8005060:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4413      	add	r3, r2
 800506c:	881b      	ldrh	r3, [r3, #0]
 800506e:	b29b      	uxth	r3, r3
 8005070:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005074:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005078:	82bb      	strh	r3, [r7, #20]
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	441a      	add	r2, r3
 8005084:	8abb      	ldrh	r3, [r7, #20]
 8005086:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800508a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800508e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005096:	b29b      	uxth	r3, r3
 8005098:	8013      	strh	r3, [r2, #0]
 800509a:	e0a3      	b.n	80051e4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	881b      	ldrh	r3, [r3, #0]
 80050a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80050aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80050ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d01b      	beq.n	80050ec <USB_DeactivateEndpoint+0x2d4>
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	881b      	ldrh	r3, [r3, #0]
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	441a      	add	r2, r3
 80050d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80050d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4413      	add	r3, r2
 80050f6:	881b      	ldrh	r3, [r3, #0]
 80050f8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80050fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80050fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005100:	2b00      	cmp	r3, #0
 8005102:	d01b      	beq.n	800513c <USB_DeactivateEndpoint+0x324>
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4413      	add	r3, r2
 800510e:	881b      	ldrh	r3, [r3, #0]
 8005110:	b29b      	uxth	r3, r3
 8005112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800511a:	853b      	strh	r3, [r7, #40]	; 0x28
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	441a      	add	r2, r3
 8005126:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005128:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800512c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005130:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005134:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005138:	b29b      	uxth	r3, r3
 800513a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4413      	add	r3, r2
 8005146:	881b      	ldrh	r3, [r3, #0]
 8005148:	b29b      	uxth	r3, r3
 800514a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800514e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005152:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	441a      	add	r2, r3
 800515e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005160:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005164:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005168:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800516c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005170:	b29b      	uxth	r3, r3
 8005172:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4413      	add	r3, r2
 800517e:	881b      	ldrh	r3, [r3, #0]
 8005180:	b29b      	uxth	r3, r3
 8005182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005186:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800518a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	441a      	add	r2, r3
 8005196:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005198:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800519c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4413      	add	r3, r2
 80051b6:	881b      	ldrh	r3, [r3, #0]
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c2:	847b      	strh	r3, [r7, #34]	; 0x22
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	441a      	add	r2, r3
 80051ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80051d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3734      	adds	r7, #52	; 0x34
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bc80      	pop	{r7}
 80051ee:	4770      	bx	lr

080051f0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b0cc      	sub	sp, #304	; 0x130
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	1d3b      	adds	r3, r7, #4
 80051f8:	6018      	str	r0, [r3, #0]
 80051fa:	463b      	mov	r3, r7
 80051fc:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80051fe:	463b      	mov	r3, r7
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	785b      	ldrb	r3, [r3, #1]
 8005204:	2b01      	cmp	r3, #1
 8005206:	f040 872e 	bne.w	8006066 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800520a:	463b      	mov	r3, r7
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	699a      	ldr	r2, [r3, #24]
 8005210:	463b      	mov	r3, r7
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	429a      	cmp	r2, r3
 8005218:	d905      	bls.n	8005226 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800521a:	463b      	mov	r3, r7
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005224:	e004      	b.n	8005230 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005226:	463b      	mov	r3, r7
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005230:	463b      	mov	r3, r7
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	7b1b      	ldrb	r3, [r3, #12]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d134      	bne.n	80052a4 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800523a:	463b      	mov	r3, r7
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	6959      	ldr	r1, [r3, #20]
 8005240:	463b      	mov	r3, r7
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	88da      	ldrh	r2, [r3, #6]
 8005246:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800524a:	b29b      	uxth	r3, r3
 800524c:	1d38      	adds	r0, r7, #4
 800524e:	6800      	ldr	r0, [r0, #0]
 8005250:	f001 fc03 	bl	8006a5a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005254:	f107 0310 	add.w	r3, r7, #16
 8005258:	1d3a      	adds	r2, r7, #4
 800525a:	6812      	ldr	r2, [r2, #0]
 800525c:	601a      	str	r2, [r3, #0]
 800525e:	1d3b      	adds	r3, r7, #4
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005266:	b29b      	uxth	r3, r3
 8005268:	4619      	mov	r1, r3
 800526a:	f107 0310 	add.w	r3, r7, #16
 800526e:	f107 0210 	add.w	r2, r7, #16
 8005272:	6812      	ldr	r2, [r2, #0]
 8005274:	440a      	add	r2, r1
 8005276:	601a      	str	r2, [r3, #0]
 8005278:	463b      	mov	r3, r7
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	011a      	lsls	r2, r3, #4
 8005280:	f107 0310 	add.w	r3, r7, #16
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4413      	add	r3, r2
 8005288:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800528c:	f107 030c 	add.w	r3, r7, #12
 8005290:	601a      	str	r2, [r3, #0]
 8005292:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005296:	b29a      	uxth	r2, r3
 8005298:	f107 030c 	add.w	r3, r7, #12
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	801a      	strh	r2, [r3, #0]
 80052a0:	f000 beac 	b.w	8005ffc <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80052a4:	463b      	mov	r3, r7
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	78db      	ldrb	r3, [r3, #3]
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	f040 838c 	bne.w	80059c8 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80052b0:	463b      	mov	r3, r7
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6a1a      	ldr	r2, [r3, #32]
 80052b6:	463b      	mov	r3, r7
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	429a      	cmp	r2, r3
 80052be:	f240 8330 	bls.w	8005922 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80052c2:	1d3b      	adds	r3, r7, #4
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	463b      	mov	r3, r7
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	4413      	add	r3, r2
 80052d0:	881b      	ldrh	r3, [r3, #0]
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052dc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80052e0:	1d3b      	adds	r3, r7, #4
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	463b      	mov	r3, r7
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	441a      	add	r2, r3
 80052ee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80052f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052fa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80052fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005302:	b29b      	uxth	r3, r3
 8005304:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005306:	463b      	mov	r3, r7
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	6a1a      	ldr	r2, [r3, #32]
 800530c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005310:	1ad2      	subs	r2, r2, r3
 8005312:	463b      	mov	r3, r7
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005318:	1d3b      	adds	r3, r7, #4
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	463b      	mov	r3, r7
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	4413      	add	r3, r2
 8005326:	881b      	ldrh	r3, [r3, #0]
 8005328:	b29b      	uxth	r3, r3
 800532a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532e:	2b00      	cmp	r3, #0
 8005330:	f000 819e 	beq.w	8005670 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005334:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005338:	1d3a      	adds	r2, r7, #4
 800533a:	6812      	ldr	r2, [r2, #0]
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	463b      	mov	r3, r7
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	785b      	ldrb	r3, [r3, #1]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d17a      	bne.n	800543e <USB_EPStartXfer+0x24e>
 8005348:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800534c:	1d3a      	adds	r2, r7, #4
 800534e:	6812      	ldr	r2, [r2, #0]
 8005350:	601a      	str	r2, [r3, #0]
 8005352:	1d3b      	adds	r3, r7, #4
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800535a:	b29b      	uxth	r3, r3
 800535c:	4619      	mov	r1, r3
 800535e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005362:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005366:	6812      	ldr	r2, [r2, #0]
 8005368:	440a      	add	r2, r1
 800536a:	601a      	str	r2, [r3, #0]
 800536c:	463b      	mov	r3, r7
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	011a      	lsls	r2, r3, #4
 8005374:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4413      	add	r3, r2
 800537c:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800538a:	2b00      	cmp	r3, #0
 800538c:	d11a      	bne.n	80053c4 <USB_EPStartXfer+0x1d4>
 800538e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	881b      	ldrh	r3, [r3, #0]
 8005396:	b29b      	uxth	r3, r3
 8005398:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800539c:	b29a      	uxth	r2, r3
 800539e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	801a      	strh	r2, [r3, #0]
 80053a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	801a      	strh	r2, [r3, #0]
 80053c2:	e062      	b.n	800548a <USB_EPStartXfer+0x29a>
 80053c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053c8:	2b3e      	cmp	r3, #62	; 0x3e
 80053ca:	d819      	bhi.n	8005400 <USB_EPStartXfer+0x210>
 80053cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053d0:	085b      	lsrs	r3, r3, #1
 80053d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80053d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053da:	f003 0301 	and.w	r3, r3, #1
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d004      	beq.n	80053ec <USB_EPStartXfer+0x1fc>
 80053e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80053e6:	3301      	adds	r3, #1
 80053e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80053ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	029b      	lsls	r3, r3, #10
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	801a      	strh	r2, [r3, #0]
 80053fe:	e044      	b.n	800548a <USB_EPStartXfer+0x29a>
 8005400:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005404:	095b      	lsrs	r3, r3, #5
 8005406:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800540a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800540e:	f003 031f 	and.w	r3, r3, #31
 8005412:	2b00      	cmp	r3, #0
 8005414:	d104      	bne.n	8005420 <USB_EPStartXfer+0x230>
 8005416:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800541a:	3b01      	subs	r3, #1
 800541c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005420:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005424:	b29b      	uxth	r3, r3
 8005426:	029b      	lsls	r3, r3, #10
 8005428:	b29b      	uxth	r3, r3
 800542a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800542e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005432:	b29a      	uxth	r2, r3
 8005434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	801a      	strh	r2, [r3, #0]
 800543c:	e025      	b.n	800548a <USB_EPStartXfer+0x29a>
 800543e:	463b      	mov	r3, r7
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	785b      	ldrb	r3, [r3, #1]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d120      	bne.n	800548a <USB_EPStartXfer+0x29a>
 8005448:	1d3b      	adds	r3, r7, #4
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005450:	b29b      	uxth	r3, r3
 8005452:	4619      	mov	r1, r3
 8005454:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005458:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800545c:	6812      	ldr	r2, [r2, #0]
 800545e:	440a      	add	r2, r1
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	463b      	mov	r3, r7
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	011a      	lsls	r2, r3, #4
 800546a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4413      	add	r3, r2
 8005472:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005476:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800547a:	601a      	str	r2, [r3, #0]
 800547c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005480:	b29a      	uxth	r2, r3
 8005482:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800548a:	463b      	mov	r3, r7
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	895b      	ldrh	r3, [r3, #10]
 8005490:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005494:	463b      	mov	r3, r7
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6959      	ldr	r1, [r3, #20]
 800549a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800549e:	b29b      	uxth	r3, r3
 80054a0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80054a4:	1d38      	adds	r0, r7, #4
 80054a6:	6800      	ldr	r0, [r0, #0]
 80054a8:	f001 fad7 	bl	8006a5a <USB_WritePMA>
            ep->xfer_buff += len;
 80054ac:	463b      	mov	r3, r7
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	695a      	ldr	r2, [r3, #20]
 80054b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054b6:	441a      	add	r2, r3
 80054b8:	463b      	mov	r3, r7
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80054be:	463b      	mov	r3, r7
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	6a1a      	ldr	r2, [r3, #32]
 80054c4:	463b      	mov	r3, r7
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d909      	bls.n	80054e2 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 80054ce:	463b      	mov	r3, r7
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6a1a      	ldr	r2, [r3, #32]
 80054d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054d8:	1ad2      	subs	r2, r2, r3
 80054da:	463b      	mov	r3, r7
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	621a      	str	r2, [r3, #32]
 80054e0:	e008      	b.n	80054f4 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 80054e2:	463b      	mov	r3, r7
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6a1b      	ldr	r3, [r3, #32]
 80054e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80054ec:	463b      	mov	r3, r7
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2200      	movs	r2, #0
 80054f2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80054f4:	463b      	mov	r3, r7
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	785b      	ldrb	r3, [r3, #1]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d17a      	bne.n	80055f4 <USB_EPStartXfer+0x404>
 80054fe:	f107 0318 	add.w	r3, r7, #24
 8005502:	1d3a      	adds	r2, r7, #4
 8005504:	6812      	ldr	r2, [r2, #0]
 8005506:	601a      	str	r2, [r3, #0]
 8005508:	1d3b      	adds	r3, r7, #4
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005510:	b29b      	uxth	r3, r3
 8005512:	4619      	mov	r1, r3
 8005514:	f107 0318 	add.w	r3, r7, #24
 8005518:	f107 0218 	add.w	r2, r7, #24
 800551c:	6812      	ldr	r2, [r2, #0]
 800551e:	440a      	add	r2, r1
 8005520:	601a      	str	r2, [r3, #0]
 8005522:	463b      	mov	r3, r7
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	011a      	lsls	r2, r3, #4
 800552a:	f107 0318 	add.w	r3, r7, #24
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4413      	add	r3, r2
 8005532:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005536:	f107 0314 	add.w	r3, r7, #20
 800553a:	601a      	str	r2, [r3, #0]
 800553c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005540:	2b00      	cmp	r3, #0
 8005542:	d11a      	bne.n	800557a <USB_EPStartXfer+0x38a>
 8005544:	f107 0314 	add.w	r3, r7, #20
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	881b      	ldrh	r3, [r3, #0]
 800554c:	b29b      	uxth	r3, r3
 800554e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005552:	b29a      	uxth	r2, r3
 8005554:	f107 0314 	add.w	r3, r7, #20
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	801a      	strh	r2, [r3, #0]
 800555c:	f107 0314 	add.w	r3, r7, #20
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	881b      	ldrh	r3, [r3, #0]
 8005564:	b29b      	uxth	r3, r3
 8005566:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800556a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800556e:	b29a      	uxth	r2, r3
 8005570:	f107 0314 	add.w	r3, r7, #20
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	801a      	strh	r2, [r3, #0]
 8005578:	e067      	b.n	800564a <USB_EPStartXfer+0x45a>
 800557a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800557e:	2b3e      	cmp	r3, #62	; 0x3e
 8005580:	d819      	bhi.n	80055b6 <USB_EPStartXfer+0x3c6>
 8005582:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005586:	085b      	lsrs	r3, r3, #1
 8005588:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800558c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	2b00      	cmp	r3, #0
 8005596:	d004      	beq.n	80055a2 <USB_EPStartXfer+0x3b2>
 8005598:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800559c:	3301      	adds	r3, #1
 800559e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80055a2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	029b      	lsls	r3, r3, #10
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	f107 0314 	add.w	r3, r7, #20
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	801a      	strh	r2, [r3, #0]
 80055b4:	e049      	b.n	800564a <USB_EPStartXfer+0x45a>
 80055b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055ba:	095b      	lsrs	r3, r3, #5
 80055bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80055c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055c4:	f003 031f 	and.w	r3, r3, #31
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d104      	bne.n	80055d6 <USB_EPStartXfer+0x3e6>
 80055cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80055d0:	3b01      	subs	r3, #1
 80055d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80055d6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80055da:	b29b      	uxth	r3, r3
 80055dc:	029b      	lsls	r3, r3, #10
 80055de:	b29b      	uxth	r3, r3
 80055e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	f107 0314 	add.w	r3, r7, #20
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	801a      	strh	r2, [r3, #0]
 80055f2:	e02a      	b.n	800564a <USB_EPStartXfer+0x45a>
 80055f4:	463b      	mov	r3, r7
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	785b      	ldrb	r3, [r3, #1]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d125      	bne.n	800564a <USB_EPStartXfer+0x45a>
 80055fe:	f107 0320 	add.w	r3, r7, #32
 8005602:	1d3a      	adds	r2, r7, #4
 8005604:	6812      	ldr	r2, [r2, #0]
 8005606:	601a      	str	r2, [r3, #0]
 8005608:	1d3b      	adds	r3, r7, #4
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005610:	b29b      	uxth	r3, r3
 8005612:	4619      	mov	r1, r3
 8005614:	f107 0320 	add.w	r3, r7, #32
 8005618:	f107 0220 	add.w	r2, r7, #32
 800561c:	6812      	ldr	r2, [r2, #0]
 800561e:	440a      	add	r2, r1
 8005620:	601a      	str	r2, [r3, #0]
 8005622:	463b      	mov	r3, r7
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	011a      	lsls	r2, r3, #4
 800562a:	f107 0320 	add.w	r3, r7, #32
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4413      	add	r3, r2
 8005632:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005636:	f107 031c 	add.w	r3, r7, #28
 800563a:	601a      	str	r2, [r3, #0]
 800563c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005640:	b29a      	uxth	r2, r3
 8005642:	f107 031c 	add.w	r3, r7, #28
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800564a:	463b      	mov	r3, r7
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	891b      	ldrh	r3, [r3, #8]
 8005650:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005654:	463b      	mov	r3, r7
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	6959      	ldr	r1, [r3, #20]
 800565a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800565e:	b29b      	uxth	r3, r3
 8005660:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005664:	1d38      	adds	r0, r7, #4
 8005666:	6800      	ldr	r0, [r0, #0]
 8005668:	f001 f9f7 	bl	8006a5a <USB_WritePMA>
 800566c:	f000 bcc6 	b.w	8005ffc <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005670:	463b      	mov	r3, r7
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	785b      	ldrb	r3, [r3, #1]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d164      	bne.n	8005744 <USB_EPStartXfer+0x554>
 800567a:	1d3b      	adds	r3, r7, #4
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005680:	1d3b      	adds	r3, r7, #4
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005688:	b29b      	uxth	r3, r3
 800568a:	461a      	mov	r2, r3
 800568c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800568e:	4413      	add	r3, r2
 8005690:	64bb      	str	r3, [r7, #72]	; 0x48
 8005692:	463b      	mov	r3, r7
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	011a      	lsls	r2, r3, #4
 800569a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800569c:	4413      	add	r3, r2
 800569e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056a2:	647b      	str	r3, [r7, #68]	; 0x44
 80056a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d112      	bne.n	80056d2 <USB_EPStartXfer+0x4e2>
 80056ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056ba:	801a      	strh	r2, [r3, #0]
 80056bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056be:	881b      	ldrh	r3, [r3, #0]
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056ce:	801a      	strh	r2, [r3, #0]
 80056d0:	e057      	b.n	8005782 <USB_EPStartXfer+0x592>
 80056d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056d6:	2b3e      	cmp	r3, #62	; 0x3e
 80056d8:	d817      	bhi.n	800570a <USB_EPStartXfer+0x51a>
 80056da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056de:	085b      	lsrs	r3, r3, #1
 80056e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80056e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056e8:	f003 0301 	and.w	r3, r3, #1
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d004      	beq.n	80056fa <USB_EPStartXfer+0x50a>
 80056f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80056f4:	3301      	adds	r3, #1
 80056f6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80056fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80056fe:	b29b      	uxth	r3, r3
 8005700:	029b      	lsls	r3, r3, #10
 8005702:	b29a      	uxth	r2, r3
 8005704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005706:	801a      	strh	r2, [r3, #0]
 8005708:	e03b      	b.n	8005782 <USB_EPStartXfer+0x592>
 800570a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800570e:	095b      	lsrs	r3, r3, #5
 8005710:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005714:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005718:	f003 031f 	and.w	r3, r3, #31
 800571c:	2b00      	cmp	r3, #0
 800571e:	d104      	bne.n	800572a <USB_EPStartXfer+0x53a>
 8005720:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005724:	3b01      	subs	r3, #1
 8005726:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800572a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800572e:	b29b      	uxth	r3, r3
 8005730:	029b      	lsls	r3, r3, #10
 8005732:	b29b      	uxth	r3, r3
 8005734:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005738:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800573c:	b29a      	uxth	r2, r3
 800573e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005740:	801a      	strh	r2, [r3, #0]
 8005742:	e01e      	b.n	8005782 <USB_EPStartXfer+0x592>
 8005744:	463b      	mov	r3, r7
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	785b      	ldrb	r3, [r3, #1]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d119      	bne.n	8005782 <USB_EPStartXfer+0x592>
 800574e:	1d3b      	adds	r3, r7, #4
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	653b      	str	r3, [r7, #80]	; 0x50
 8005754:	1d3b      	adds	r3, r7, #4
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800575c:	b29b      	uxth	r3, r3
 800575e:	461a      	mov	r2, r3
 8005760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005762:	4413      	add	r3, r2
 8005764:	653b      	str	r3, [r7, #80]	; 0x50
 8005766:	463b      	mov	r3, r7
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	011a      	lsls	r2, r3, #4
 800576e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005770:	4413      	add	r3, r2
 8005772:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005778:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800577c:	b29a      	uxth	r2, r3
 800577e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005780:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005782:	463b      	mov	r3, r7
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	891b      	ldrh	r3, [r3, #8]
 8005788:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800578c:	463b      	mov	r3, r7
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6959      	ldr	r1, [r3, #20]
 8005792:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005796:	b29b      	uxth	r3, r3
 8005798:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800579c:	1d38      	adds	r0, r7, #4
 800579e:	6800      	ldr	r0, [r0, #0]
 80057a0:	f001 f95b 	bl	8006a5a <USB_WritePMA>
            ep->xfer_buff += len;
 80057a4:	463b      	mov	r3, r7
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	695a      	ldr	r2, [r3, #20]
 80057aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ae:	441a      	add	r2, r3
 80057b0:	463b      	mov	r3, r7
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80057b6:	463b      	mov	r3, r7
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6a1a      	ldr	r2, [r3, #32]
 80057bc:	463b      	mov	r3, r7
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d909      	bls.n	80057da <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 80057c6:	463b      	mov	r3, r7
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6a1a      	ldr	r2, [r3, #32]
 80057cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057d0:	1ad2      	subs	r2, r2, r3
 80057d2:	463b      	mov	r3, r7
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	621a      	str	r2, [r3, #32]
 80057d8:	e008      	b.n	80057ec <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 80057da:	463b      	mov	r3, r7
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	6a1b      	ldr	r3, [r3, #32]
 80057e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80057e4:	463b      	mov	r3, r7
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2200      	movs	r2, #0
 80057ea:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80057ec:	1d3b      	adds	r3, r7, #4
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	643b      	str	r3, [r7, #64]	; 0x40
 80057f2:	463b      	mov	r3, r7
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	785b      	ldrb	r3, [r3, #1]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d164      	bne.n	80058c6 <USB_EPStartXfer+0x6d6>
 80057fc:	1d3b      	adds	r3, r7, #4
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	63bb      	str	r3, [r7, #56]	; 0x38
 8005802:	1d3b      	adds	r3, r7, #4
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800580a:	b29b      	uxth	r3, r3
 800580c:	461a      	mov	r2, r3
 800580e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005810:	4413      	add	r3, r2
 8005812:	63bb      	str	r3, [r7, #56]	; 0x38
 8005814:	463b      	mov	r3, r7
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	011a      	lsls	r2, r3, #4
 800581c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581e:	4413      	add	r3, r2
 8005820:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005824:	637b      	str	r3, [r7, #52]	; 0x34
 8005826:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800582a:	2b00      	cmp	r3, #0
 800582c:	d112      	bne.n	8005854 <USB_EPStartXfer+0x664>
 800582e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005830:	881b      	ldrh	r3, [r3, #0]
 8005832:	b29b      	uxth	r3, r3
 8005834:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005838:	b29a      	uxth	r2, r3
 800583a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800583c:	801a      	strh	r2, [r3, #0]
 800583e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005840:	881b      	ldrh	r3, [r3, #0]
 8005842:	b29b      	uxth	r3, r3
 8005844:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005848:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800584c:	b29a      	uxth	r2, r3
 800584e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005850:	801a      	strh	r2, [r3, #0]
 8005852:	e054      	b.n	80058fe <USB_EPStartXfer+0x70e>
 8005854:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005858:	2b3e      	cmp	r3, #62	; 0x3e
 800585a:	d817      	bhi.n	800588c <USB_EPStartXfer+0x69c>
 800585c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005860:	085b      	lsrs	r3, r3, #1
 8005862:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005866:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	2b00      	cmp	r3, #0
 8005870:	d004      	beq.n	800587c <USB_EPStartXfer+0x68c>
 8005872:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005876:	3301      	adds	r3, #1
 8005878:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800587c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005880:	b29b      	uxth	r3, r3
 8005882:	029b      	lsls	r3, r3, #10
 8005884:	b29a      	uxth	r2, r3
 8005886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005888:	801a      	strh	r2, [r3, #0]
 800588a:	e038      	b.n	80058fe <USB_EPStartXfer+0x70e>
 800588c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005890:	095b      	lsrs	r3, r3, #5
 8005892:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005896:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800589a:	f003 031f 	and.w	r3, r3, #31
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d104      	bne.n	80058ac <USB_EPStartXfer+0x6bc>
 80058a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80058a6:	3b01      	subs	r3, #1
 80058a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80058ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	029b      	lsls	r3, r3, #10
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058be:	b29a      	uxth	r2, r3
 80058c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c2:	801a      	strh	r2, [r3, #0]
 80058c4:	e01b      	b.n	80058fe <USB_EPStartXfer+0x70e>
 80058c6:	463b      	mov	r3, r7
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	785b      	ldrb	r3, [r3, #1]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d116      	bne.n	80058fe <USB_EPStartXfer+0x70e>
 80058d0:	1d3b      	adds	r3, r7, #4
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058d8:	b29b      	uxth	r3, r3
 80058da:	461a      	mov	r2, r3
 80058dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058de:	4413      	add	r3, r2
 80058e0:	643b      	str	r3, [r7, #64]	; 0x40
 80058e2:	463b      	mov	r3, r7
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	011a      	lsls	r2, r3, #4
 80058ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ec:	4413      	add	r3, r2
 80058ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058fc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80058fe:	463b      	mov	r3, r7
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	895b      	ldrh	r3, [r3, #10]
 8005904:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005908:	463b      	mov	r3, r7
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6959      	ldr	r1, [r3, #20]
 800590e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005912:	b29b      	uxth	r3, r3
 8005914:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005918:	1d38      	adds	r0, r7, #4
 800591a:	6800      	ldr	r0, [r0, #0]
 800591c:	f001 f89d 	bl	8006a5a <USB_WritePMA>
 8005920:	e36c      	b.n	8005ffc <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005922:	463b      	mov	r3, r7
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	6a1b      	ldr	r3, [r3, #32]
 8005928:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800592c:	1d3b      	adds	r3, r7, #4
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	463b      	mov	r3, r7
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4413      	add	r3, r2
 800593a:	881b      	ldrh	r3, [r3, #0]
 800593c:	b29b      	uxth	r3, r3
 800593e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005946:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800594a:	1d3b      	adds	r3, r7, #4
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	463b      	mov	r3, r7
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	441a      	add	r2, r3
 8005958:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800595c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005960:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005964:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800596c:	b29b      	uxth	r3, r3
 800596e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005970:	1d3b      	adds	r3, r7, #4
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005976:	1d3b      	adds	r3, r7, #4
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800597e:	b29b      	uxth	r3, r3
 8005980:	461a      	mov	r2, r3
 8005982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005984:	4413      	add	r3, r2
 8005986:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005988:	463b      	mov	r3, r7
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	011a      	lsls	r2, r3, #4
 8005990:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005992:	4413      	add	r3, r2
 8005994:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005998:	65bb      	str	r3, [r7, #88]	; 0x58
 800599a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800599e:	b29a      	uxth	r2, r3
 80059a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059a2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80059a4:	463b      	mov	r3, r7
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	891b      	ldrh	r3, [r3, #8]
 80059aa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059ae:	463b      	mov	r3, r7
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6959      	ldr	r1, [r3, #20]
 80059b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80059be:	1d38      	adds	r0, r7, #4
 80059c0:	6800      	ldr	r0, [r0, #0]
 80059c2:	f001 f84a 	bl	8006a5a <USB_WritePMA>
 80059c6:	e319      	b.n	8005ffc <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80059c8:	1d3b      	adds	r3, r7, #4
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	463b      	mov	r3, r7
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4413      	add	r3, r2
 80059d6:	881b      	ldrh	r3, [r3, #0]
 80059d8:	b29b      	uxth	r3, r3
 80059da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059e2:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80059e6:	1d3b      	adds	r3, r7, #4
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	463b      	mov	r3, r7
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	441a      	add	r2, r3
 80059f4:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80059f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a00:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005a0c:	463b      	mov	r3, r7
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6a1a      	ldr	r2, [r3, #32]
 8005a12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a16:	1ad2      	subs	r2, r2, r3
 8005a18:	463b      	mov	r3, r7
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005a1e:	1d3b      	adds	r3, r7, #4
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	463b      	mov	r3, r7
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4413      	add	r3, r2
 8005a2c:	881b      	ldrh	r3, [r3, #0]
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 8162 	beq.w	8005cfe <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a3a:	1d3b      	adds	r3, r7, #4
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a42:	463b      	mov	r3, r7
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	785b      	ldrb	r3, [r3, #1]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d164      	bne.n	8005b16 <USB_EPStartXfer+0x926>
 8005a4c:	1d3b      	adds	r3, r7, #4
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a52:	1d3b      	adds	r3, r7, #4
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a60:	4413      	add	r3, r2
 8005a62:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a64:	463b      	mov	r3, r7
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	011a      	lsls	r2, r3, #4
 8005a6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a6e:	4413      	add	r3, r2
 8005a70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a74:	677b      	str	r3, [r7, #116]	; 0x74
 8005a76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d112      	bne.n	8005aa4 <USB_EPStartXfer+0x8b4>
 8005a7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a80:	881b      	ldrh	r3, [r3, #0]
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a8c:	801a      	strh	r2, [r3, #0]
 8005a8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a90:	881b      	ldrh	r3, [r3, #0]
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005aa0:	801a      	strh	r2, [r3, #0]
 8005aa2:	e057      	b.n	8005b54 <USB_EPStartXfer+0x964>
 8005aa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aa8:	2b3e      	cmp	r3, #62	; 0x3e
 8005aaa:	d817      	bhi.n	8005adc <USB_EPStartXfer+0x8ec>
 8005aac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ab0:	085b      	lsrs	r3, r3, #1
 8005ab2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005ab6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d004      	beq.n	8005acc <USB_EPStartXfer+0x8dc>
 8005ac2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005acc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	029b      	lsls	r3, r3, #10
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ad8:	801a      	strh	r2, [r3, #0]
 8005ada:	e03b      	b.n	8005b54 <USB_EPStartXfer+0x964>
 8005adc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ae0:	095b      	lsrs	r3, r3, #5
 8005ae2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005ae6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aea:	f003 031f 	and.w	r3, r3, #31
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d104      	bne.n	8005afc <USB_EPStartXfer+0x90c>
 8005af2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005af6:	3b01      	subs	r3, #1
 8005af8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005afc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	029b      	lsls	r3, r3, #10
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b0e:	b29a      	uxth	r2, r3
 8005b10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b12:	801a      	strh	r2, [r3, #0]
 8005b14:	e01e      	b.n	8005b54 <USB_EPStartXfer+0x964>
 8005b16:	463b      	mov	r3, r7
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	785b      	ldrb	r3, [r3, #1]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d119      	bne.n	8005b54 <USB_EPStartXfer+0x964>
 8005b20:	1d3b      	adds	r3, r7, #4
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005b30:	4413      	add	r3, r2
 8005b32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b36:	463b      	mov	r3, r7
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	011a      	lsls	r2, r3, #4
 8005b3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005b42:	4413      	add	r3, r2
 8005b44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b48:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005b4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b52:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005b54:	463b      	mov	r3, r7
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	895b      	ldrh	r3, [r3, #10]
 8005b5a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b5e:	463b      	mov	r3, r7
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	6959      	ldr	r1, [r3, #20]
 8005b64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005b6e:	1d38      	adds	r0, r7, #4
 8005b70:	6800      	ldr	r0, [r0, #0]
 8005b72:	f000 ff72 	bl	8006a5a <USB_WritePMA>
          ep->xfer_buff += len;
 8005b76:	463b      	mov	r3, r7
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	695a      	ldr	r2, [r3, #20]
 8005b7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b80:	441a      	add	r2, r3
 8005b82:	463b      	mov	r3, r7
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005b88:	463b      	mov	r3, r7
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6a1a      	ldr	r2, [r3, #32]
 8005b8e:	463b      	mov	r3, r7
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d909      	bls.n	8005bac <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8005b98:	463b      	mov	r3, r7
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6a1a      	ldr	r2, [r3, #32]
 8005b9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ba2:	1ad2      	subs	r2, r2, r3
 8005ba4:	463b      	mov	r3, r7
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	621a      	str	r2, [r3, #32]
 8005baa:	e008      	b.n	8005bbe <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8005bac:	463b      	mov	r3, r7
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005bb6:	463b      	mov	r3, r7
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005bbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f000 821a 	beq.w	8005ffc <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005bc8:	463b      	mov	r3, r7
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	785b      	ldrb	r3, [r3, #1]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d164      	bne.n	8005c9c <USB_EPStartXfer+0xaac>
 8005bd2:	1d3b      	adds	r3, r7, #4
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bd8:	1d3b      	adds	r3, r7, #4
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	461a      	mov	r2, r3
 8005be4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005be6:	4413      	add	r3, r2
 8005be8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bea:	463b      	mov	r3, r7
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	011a      	lsls	r2, r3, #4
 8005bf2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bfa:	667b      	str	r3, [r7, #100]	; 0x64
 8005bfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d112      	bne.n	8005c2a <USB_EPStartXfer+0xa3a>
 8005c04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c06:	881b      	ldrh	r3, [r3, #0]
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c12:	801a      	strh	r2, [r3, #0]
 8005c14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c16:	881b      	ldrh	r3, [r3, #0]
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c26:	801a      	strh	r2, [r3, #0]
 8005c28:	e057      	b.n	8005cda <USB_EPStartXfer+0xaea>
 8005c2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c2e:	2b3e      	cmp	r3, #62	; 0x3e
 8005c30:	d817      	bhi.n	8005c62 <USB_EPStartXfer+0xa72>
 8005c32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c36:	085b      	lsrs	r3, r3, #1
 8005c38:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005c3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c40:	f003 0301 	and.w	r3, r3, #1
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d004      	beq.n	8005c52 <USB_EPStartXfer+0xa62>
 8005c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	029b      	lsls	r3, r3, #10
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c5e:	801a      	strh	r2, [r3, #0]
 8005c60:	e03b      	b.n	8005cda <USB_EPStartXfer+0xaea>
 8005c62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c66:	095b      	lsrs	r3, r3, #5
 8005c68:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005c6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c70:	f003 031f 	and.w	r3, r3, #31
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d104      	bne.n	8005c82 <USB_EPStartXfer+0xa92>
 8005c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	029b      	lsls	r3, r3, #10
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c98:	801a      	strh	r2, [r3, #0]
 8005c9a:	e01e      	b.n	8005cda <USB_EPStartXfer+0xaea>
 8005c9c:	463b      	mov	r3, r7
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	785b      	ldrb	r3, [r3, #1]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d119      	bne.n	8005cda <USB_EPStartXfer+0xaea>
 8005ca6:	1d3b      	adds	r3, r7, #4
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	673b      	str	r3, [r7, #112]	; 0x70
 8005cac:	1d3b      	adds	r3, r7, #4
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005cba:	4413      	add	r3, r2
 8005cbc:	673b      	str	r3, [r7, #112]	; 0x70
 8005cbe:	463b      	mov	r3, r7
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	011a      	lsls	r2, r3, #4
 8005cc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005cc8:	4413      	add	r3, r2
 8005cca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cce:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005cd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cd8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005cda:	463b      	mov	r3, r7
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	891b      	ldrh	r3, [r3, #8]
 8005ce0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ce4:	463b      	mov	r3, r7
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	6959      	ldr	r1, [r3, #20]
 8005cea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005cf4:	1d38      	adds	r0, r7, #4
 8005cf6:	6800      	ldr	r0, [r0, #0]
 8005cf8:	f000 feaf 	bl	8006a5a <USB_WritePMA>
 8005cfc:	e17e      	b.n	8005ffc <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005cfe:	463b      	mov	r3, r7
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	785b      	ldrb	r3, [r3, #1]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d16f      	bne.n	8005de8 <USB_EPStartXfer+0xbf8>
 8005d08:	1d3b      	adds	r3, r7, #4
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d10:	1d3b      	adds	r3, r7, #4
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d20:	4413      	add	r3, r2
 8005d22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d26:	463b      	mov	r3, r7
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	011a      	lsls	r2, r3, #4
 8005d2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d32:	4413      	add	r3, r2
 8005d34:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005d3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d116      	bne.n	8005d72 <USB_EPStartXfer+0xb82>
 8005d44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d48:	881b      	ldrh	r3, [r3, #0]
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d56:	801a      	strh	r2, [r3, #0]
 8005d58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d5c:	881b      	ldrh	r3, [r3, #0]
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d6e:	801a      	strh	r2, [r3, #0]
 8005d70:	e05f      	b.n	8005e32 <USB_EPStartXfer+0xc42>
 8005d72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d76:	2b3e      	cmp	r3, #62	; 0x3e
 8005d78:	d818      	bhi.n	8005dac <USB_EPStartXfer+0xbbc>
 8005d7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d7e:	085b      	lsrs	r3, r3, #1
 8005d80:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005d84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d88:	f003 0301 	and.w	r3, r3, #1
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d004      	beq.n	8005d9a <USB_EPStartXfer+0xbaa>
 8005d90:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d94:	3301      	adds	r3, #1
 8005d96:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005d9a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	029b      	lsls	r3, r3, #10
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005da8:	801a      	strh	r2, [r3, #0]
 8005daa:	e042      	b.n	8005e32 <USB_EPStartXfer+0xc42>
 8005dac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005db0:	095b      	lsrs	r3, r3, #5
 8005db2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005db6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dba:	f003 031f 	and.w	r3, r3, #31
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d104      	bne.n	8005dcc <USB_EPStartXfer+0xbdc>
 8005dc2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005dcc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	029b      	lsls	r3, r3, #10
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005de4:	801a      	strh	r2, [r3, #0]
 8005de6:	e024      	b.n	8005e32 <USB_EPStartXfer+0xc42>
 8005de8:	463b      	mov	r3, r7
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	785b      	ldrb	r3, [r3, #1]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d11f      	bne.n	8005e32 <USB_EPStartXfer+0xc42>
 8005df2:	1d3b      	adds	r3, r7, #4
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005dfa:	1d3b      	adds	r3, r7, #4
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	461a      	mov	r2, r3
 8005e06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005e10:	463b      	mov	r3, r7
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	011a      	lsls	r2, r3, #4
 8005e18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005e26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e2a:	b29a      	uxth	r2, r3
 8005e2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e30:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005e32:	463b      	mov	r3, r7
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	891b      	ldrh	r3, [r3, #8]
 8005e38:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e3c:	463b      	mov	r3, r7
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6959      	ldr	r1, [r3, #20]
 8005e42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005e4c:	1d38      	adds	r0, r7, #4
 8005e4e:	6800      	ldr	r0, [r0, #0]
 8005e50:	f000 fe03 	bl	8006a5a <USB_WritePMA>
          ep->xfer_buff += len;
 8005e54:	463b      	mov	r3, r7
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	695a      	ldr	r2, [r3, #20]
 8005e5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e5e:	441a      	add	r2, r3
 8005e60:	463b      	mov	r3, r7
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005e66:	463b      	mov	r3, r7
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	6a1a      	ldr	r2, [r3, #32]
 8005e6c:	463b      	mov	r3, r7
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d909      	bls.n	8005e8a <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8005e76:	463b      	mov	r3, r7
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	6a1a      	ldr	r2, [r3, #32]
 8005e7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e80:	1ad2      	subs	r2, r2, r3
 8005e82:	463b      	mov	r3, r7
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	621a      	str	r2, [r3, #32]
 8005e88:	e008      	b.n	8005e9c <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8005e8a:	463b      	mov	r3, r7
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	6a1b      	ldr	r3, [r3, #32]
 8005e90:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005e94:	463b      	mov	r3, r7
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005e9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 80ab 	beq.w	8005ffc <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ea6:	1d3b      	adds	r3, r7, #4
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005eae:	463b      	mov	r3, r7
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	785b      	ldrb	r3, [r3, #1]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d16f      	bne.n	8005f98 <USB_EPStartXfer+0xda8>
 8005eb8:	1d3b      	adds	r3, r7, #4
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ec0:	1d3b      	adds	r3, r7, #4
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	461a      	mov	r2, r3
 8005ecc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ed6:	463b      	mov	r3, r7
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	011a      	lsls	r2, r3, #4
 8005ede:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ee8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005eec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d116      	bne.n	8005f22 <USB_EPStartXfer+0xd32>
 8005ef4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ef8:	881b      	ldrh	r3, [r3, #0]
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f00:	b29a      	uxth	r2, r3
 8005f02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f06:	801a      	strh	r2, [r3, #0]
 8005f08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f0c:	881b      	ldrh	r3, [r3, #0]
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f1e:	801a      	strh	r2, [r3, #0]
 8005f20:	e05b      	b.n	8005fda <USB_EPStartXfer+0xdea>
 8005f22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f26:	2b3e      	cmp	r3, #62	; 0x3e
 8005f28:	d818      	bhi.n	8005f5c <USB_EPStartXfer+0xd6c>
 8005f2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f2e:	085b      	lsrs	r3, r3, #1
 8005f30:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005f34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f38:	f003 0301 	and.w	r3, r3, #1
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d004      	beq.n	8005f4a <USB_EPStartXfer+0xd5a>
 8005f40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f44:	3301      	adds	r3, #1
 8005f46:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005f4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	029b      	lsls	r3, r3, #10
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f58:	801a      	strh	r2, [r3, #0]
 8005f5a:	e03e      	b.n	8005fda <USB_EPStartXfer+0xdea>
 8005f5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f60:	095b      	lsrs	r3, r3, #5
 8005f62:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005f66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f6a:	f003 031f 	and.w	r3, r3, #31
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d104      	bne.n	8005f7c <USB_EPStartXfer+0xd8c>
 8005f72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f76:	3b01      	subs	r3, #1
 8005f78:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005f7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	029b      	lsls	r3, r3, #10
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f94:	801a      	strh	r2, [r3, #0]
 8005f96:	e020      	b.n	8005fda <USB_EPStartXfer+0xdea>
 8005f98:	463b      	mov	r3, r7
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	785b      	ldrb	r3, [r3, #1]
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d11b      	bne.n	8005fda <USB_EPStartXfer+0xdea>
 8005fa2:	1d3b      	adds	r3, r7, #4
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	461a      	mov	r2, r3
 8005fae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005fb8:	463b      	mov	r3, r7
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	011a      	lsls	r2, r3, #4
 8005fc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005fce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fd2:	b29a      	uxth	r2, r3
 8005fd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fd8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005fda:	463b      	mov	r3, r7
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	895b      	ldrh	r3, [r3, #10]
 8005fe0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005fe4:	463b      	mov	r3, r7
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6959      	ldr	r1, [r3, #20]
 8005fea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005ff4:	1d38      	adds	r0, r7, #4
 8005ff6:	6800      	ldr	r0, [r0, #0]
 8005ff8:	f000 fd2f 	bl	8006a5a <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005ffc:	1d3b      	adds	r3, r7, #4
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	463b      	mov	r3, r7
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4413      	add	r3, r2
 800600a:	881b      	ldrh	r3, [r3, #0]
 800600c:	b29b      	uxth	r3, r3
 800600e:	f107 020a 	add.w	r2, r7, #10
 8006012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800601a:	8013      	strh	r3, [r2, #0]
 800601c:	f107 030a 	add.w	r3, r7, #10
 8006020:	f107 020a 	add.w	r2, r7, #10
 8006024:	8812      	ldrh	r2, [r2, #0]
 8006026:	f082 0210 	eor.w	r2, r2, #16
 800602a:	801a      	strh	r2, [r3, #0]
 800602c:	f107 030a 	add.w	r3, r7, #10
 8006030:	f107 020a 	add.w	r2, r7, #10
 8006034:	8812      	ldrh	r2, [r2, #0]
 8006036:	f082 0220 	eor.w	r2, r2, #32
 800603a:	801a      	strh	r2, [r3, #0]
 800603c:	1d3b      	adds	r3, r7, #4
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	463b      	mov	r3, r7
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	441a      	add	r2, r3
 800604a:	f107 030a 	add.w	r3, r7, #10
 800604e:	881b      	ldrh	r3, [r3, #0]
 8006050:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006054:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006058:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800605c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006060:	b29b      	uxth	r3, r3
 8006062:	8013      	strh	r3, [r2, #0]
 8006064:	e3b5      	b.n	80067d2 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006066:	463b      	mov	r3, r7
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	7b1b      	ldrb	r3, [r3, #12]
 800606c:	2b00      	cmp	r3, #0
 800606e:	f040 8090 	bne.w	8006192 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006072:	463b      	mov	r3, r7
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	699a      	ldr	r2, [r3, #24]
 8006078:	463b      	mov	r3, r7
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	429a      	cmp	r2, r3
 8006080:	d90e      	bls.n	80060a0 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8006082:	463b      	mov	r3, r7
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800608c:	463b      	mov	r3, r7
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	699a      	ldr	r2, [r3, #24]
 8006092:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006096:	1ad2      	subs	r2, r2, r3
 8006098:	463b      	mov	r3, r7
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	619a      	str	r2, [r3, #24]
 800609e:	e008      	b.n	80060b2 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 80060a0:	463b      	mov	r3, r7
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80060aa:	463b      	mov	r3, r7
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2200      	movs	r2, #0
 80060b0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80060b2:	1d3b      	adds	r3, r7, #4
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060ba:	1d3b      	adds	r3, r7, #4
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	461a      	mov	r2, r3
 80060c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80060ca:	4413      	add	r3, r2
 80060cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060d0:	463b      	mov	r3, r7
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	011a      	lsls	r2, r3, #4
 80060d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80060dc:	4413      	add	r3, r2
 80060de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80060e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d116      	bne.n	800611c <USB_EPStartXfer+0xf2c>
 80060ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060f2:	881b      	ldrh	r3, [r3, #0]
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006100:	801a      	strh	r2, [r3, #0]
 8006102:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006106:	881b      	ldrh	r3, [r3, #0]
 8006108:	b29b      	uxth	r3, r3
 800610a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800610e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006112:	b29a      	uxth	r2, r3
 8006114:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006118:	801a      	strh	r2, [r3, #0]
 800611a:	e32c      	b.n	8006776 <USB_EPStartXfer+0x1586>
 800611c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006120:	2b3e      	cmp	r3, #62	; 0x3e
 8006122:	d818      	bhi.n	8006156 <USB_EPStartXfer+0xf66>
 8006124:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006128:	085b      	lsrs	r3, r3, #1
 800612a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800612e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006132:	f003 0301 	and.w	r3, r3, #1
 8006136:	2b00      	cmp	r3, #0
 8006138:	d004      	beq.n	8006144 <USB_EPStartXfer+0xf54>
 800613a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800613e:	3301      	adds	r3, #1
 8006140:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006144:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006148:	b29b      	uxth	r3, r3
 800614a:	029b      	lsls	r3, r3, #10
 800614c:	b29a      	uxth	r2, r3
 800614e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006152:	801a      	strh	r2, [r3, #0]
 8006154:	e30f      	b.n	8006776 <USB_EPStartXfer+0x1586>
 8006156:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800615a:	095b      	lsrs	r3, r3, #5
 800615c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006160:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006164:	f003 031f 	and.w	r3, r3, #31
 8006168:	2b00      	cmp	r3, #0
 800616a:	d104      	bne.n	8006176 <USB_EPStartXfer+0xf86>
 800616c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006170:	3b01      	subs	r3, #1
 8006172:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006176:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800617a:	b29b      	uxth	r3, r3
 800617c:	029b      	lsls	r3, r3, #10
 800617e:	b29b      	uxth	r3, r3
 8006180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006188:	b29a      	uxth	r2, r3
 800618a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800618e:	801a      	strh	r2, [r3, #0]
 8006190:	e2f1      	b.n	8006776 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006192:	463b      	mov	r3, r7
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	78db      	ldrb	r3, [r3, #3]
 8006198:	2b02      	cmp	r3, #2
 800619a:	f040 818f 	bne.w	80064bc <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800619e:	463b      	mov	r3, r7
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	785b      	ldrb	r3, [r3, #1]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d175      	bne.n	8006294 <USB_EPStartXfer+0x10a4>
 80061a8:	1d3b      	adds	r3, r7, #4
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80061b0:	1d3b      	adds	r3, r7, #4
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	461a      	mov	r2, r3
 80061bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80061c0:	4413      	add	r3, r2
 80061c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80061c6:	463b      	mov	r3, r7
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	011a      	lsls	r2, r3, #4
 80061ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80061d2:	4413      	add	r3, r2
 80061d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061dc:	463b      	mov	r3, r7
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d116      	bne.n	8006214 <USB_EPStartXfer+0x1024>
 80061e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061ea:	881b      	ldrh	r3, [r3, #0]
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061f8:	801a      	strh	r2, [r3, #0]
 80061fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061fe:	881b      	ldrh	r3, [r3, #0]
 8006200:	b29b      	uxth	r3, r3
 8006202:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006206:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800620a:	b29a      	uxth	r2, r3
 800620c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006210:	801a      	strh	r2, [r3, #0]
 8006212:	e065      	b.n	80062e0 <USB_EPStartXfer+0x10f0>
 8006214:	463b      	mov	r3, r7
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	2b3e      	cmp	r3, #62	; 0x3e
 800621c:	d81a      	bhi.n	8006254 <USB_EPStartXfer+0x1064>
 800621e:	463b      	mov	r3, r7
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	085b      	lsrs	r3, r3, #1
 8006226:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800622a:	463b      	mov	r3, r7
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	f003 0301 	and.w	r3, r3, #1
 8006234:	2b00      	cmp	r3, #0
 8006236:	d004      	beq.n	8006242 <USB_EPStartXfer+0x1052>
 8006238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800623c:	3301      	adds	r3, #1
 800623e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006242:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006246:	b29b      	uxth	r3, r3
 8006248:	029b      	lsls	r3, r3, #10
 800624a:	b29a      	uxth	r2, r3
 800624c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006250:	801a      	strh	r2, [r3, #0]
 8006252:	e045      	b.n	80062e0 <USB_EPStartXfer+0x10f0>
 8006254:	463b      	mov	r3, r7
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	095b      	lsrs	r3, r3, #5
 800625c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006260:	463b      	mov	r3, r7
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	f003 031f 	and.w	r3, r3, #31
 800626a:	2b00      	cmp	r3, #0
 800626c:	d104      	bne.n	8006278 <USB_EPStartXfer+0x1088>
 800626e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006272:	3b01      	subs	r3, #1
 8006274:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800627c:	b29b      	uxth	r3, r3
 800627e:	029b      	lsls	r3, r3, #10
 8006280:	b29b      	uxth	r3, r3
 8006282:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006286:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800628a:	b29a      	uxth	r2, r3
 800628c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006290:	801a      	strh	r2, [r3, #0]
 8006292:	e025      	b.n	80062e0 <USB_EPStartXfer+0x10f0>
 8006294:	463b      	mov	r3, r7
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	785b      	ldrb	r3, [r3, #1]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d120      	bne.n	80062e0 <USB_EPStartXfer+0x10f0>
 800629e:	1d3b      	adds	r3, r7, #4
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80062a6:	1d3b      	adds	r3, r7, #4
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	461a      	mov	r2, r3
 80062b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062b6:	4413      	add	r3, r2
 80062b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80062bc:	463b      	mov	r3, r7
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	011a      	lsls	r2, r3, #4
 80062c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062c8:	4413      	add	r3, r2
 80062ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062d2:	463b      	mov	r3, r7
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	b29a      	uxth	r2, r3
 80062da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80062de:	801a      	strh	r2, [r3, #0]
 80062e0:	1d3b      	adds	r3, r7, #4
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062e8:	463b      	mov	r3, r7
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	785b      	ldrb	r3, [r3, #1]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d175      	bne.n	80063de <USB_EPStartXfer+0x11ee>
 80062f2:	1d3b      	adds	r3, r7, #4
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80062fa:	1d3b      	adds	r3, r7, #4
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006302:	b29b      	uxth	r3, r3
 8006304:	461a      	mov	r2, r3
 8006306:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800630a:	4413      	add	r3, r2
 800630c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006310:	463b      	mov	r3, r7
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	011a      	lsls	r2, r3, #4
 8006318:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800631c:	4413      	add	r3, r2
 800631e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006322:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006326:	463b      	mov	r3, r7
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d116      	bne.n	800635e <USB_EPStartXfer+0x116e>
 8006330:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006334:	881b      	ldrh	r3, [r3, #0]
 8006336:	b29b      	uxth	r3, r3
 8006338:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800633c:	b29a      	uxth	r2, r3
 800633e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006342:	801a      	strh	r2, [r3, #0]
 8006344:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006348:	881b      	ldrh	r3, [r3, #0]
 800634a:	b29b      	uxth	r3, r3
 800634c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006350:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006354:	b29a      	uxth	r2, r3
 8006356:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800635a:	801a      	strh	r2, [r3, #0]
 800635c:	e061      	b.n	8006422 <USB_EPStartXfer+0x1232>
 800635e:	463b      	mov	r3, r7
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	2b3e      	cmp	r3, #62	; 0x3e
 8006366:	d81a      	bhi.n	800639e <USB_EPStartXfer+0x11ae>
 8006368:	463b      	mov	r3, r7
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	085b      	lsrs	r3, r3, #1
 8006370:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006374:	463b      	mov	r3, r7
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	2b00      	cmp	r3, #0
 8006380:	d004      	beq.n	800638c <USB_EPStartXfer+0x119c>
 8006382:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006386:	3301      	adds	r3, #1
 8006388:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800638c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006390:	b29b      	uxth	r3, r3
 8006392:	029b      	lsls	r3, r3, #10
 8006394:	b29a      	uxth	r2, r3
 8006396:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800639a:	801a      	strh	r2, [r3, #0]
 800639c:	e041      	b.n	8006422 <USB_EPStartXfer+0x1232>
 800639e:	463b      	mov	r3, r7
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	095b      	lsrs	r3, r3, #5
 80063a6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80063aa:	463b      	mov	r3, r7
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	f003 031f 	and.w	r3, r3, #31
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d104      	bne.n	80063c2 <USB_EPStartXfer+0x11d2>
 80063b8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80063bc:	3b01      	subs	r3, #1
 80063be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80063c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	029b      	lsls	r3, r3, #10
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80063da:	801a      	strh	r2, [r3, #0]
 80063dc:	e021      	b.n	8006422 <USB_EPStartXfer+0x1232>
 80063de:	463b      	mov	r3, r7
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	785b      	ldrb	r3, [r3, #1]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d11c      	bne.n	8006422 <USB_EPStartXfer+0x1232>
 80063e8:	1d3b      	adds	r3, r7, #4
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	461a      	mov	r2, r3
 80063f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80063f8:	4413      	add	r3, r2
 80063fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80063fe:	463b      	mov	r3, r7
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	011a      	lsls	r2, r3, #4
 8006406:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800640a:	4413      	add	r3, r2
 800640c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006410:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006414:	463b      	mov	r3, r7
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	b29a      	uxth	r2, r3
 800641c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006420:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006422:	463b      	mov	r3, r7
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	69db      	ldr	r3, [r3, #28]
 8006428:	2b00      	cmp	r3, #0
 800642a:	f000 81a4 	beq.w	8006776 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800642e:	1d3b      	adds	r3, r7, #4
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	463b      	mov	r3, r7
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	4413      	add	r3, r2
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006442:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d005      	beq.n	800645a <USB_EPStartXfer+0x126a>
 800644e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10d      	bne.n	8006476 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800645a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800645e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006462:	2b00      	cmp	r3, #0
 8006464:	f040 8187 	bne.w	8006776 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006468:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800646c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006470:	2b00      	cmp	r3, #0
 8006472:	f040 8180 	bne.w	8006776 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006476:	1d3b      	adds	r3, r7, #4
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	463b      	mov	r3, r7
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	4413      	add	r3, r2
 8006484:	881b      	ldrh	r3, [r3, #0]
 8006486:	b29b      	uxth	r3, r3
 8006488:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800648c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006490:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006494:	1d3b      	adds	r3, r7, #4
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	463b      	mov	r3, r7
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	441a      	add	r2, r3
 80064a2:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80064a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	8013      	strh	r3, [r2, #0]
 80064ba:	e15c      	b.n	8006776 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80064bc:	463b      	mov	r3, r7
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	78db      	ldrb	r3, [r3, #3]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	f040 8155 	bne.w	8006772 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80064c8:	463b      	mov	r3, r7
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	699a      	ldr	r2, [r3, #24]
 80064ce:	463b      	mov	r3, r7
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d90e      	bls.n	80064f6 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 80064d8:	463b      	mov	r3, r7
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80064e2:	463b      	mov	r3, r7
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	699a      	ldr	r2, [r3, #24]
 80064e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064ec:	1ad2      	subs	r2, r2, r3
 80064ee:	463b      	mov	r3, r7
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	619a      	str	r2, [r3, #24]
 80064f4:	e008      	b.n	8006508 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 80064f6:	463b      	mov	r3, r7
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006500:	463b      	mov	r3, r7
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2200      	movs	r2, #0
 8006506:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006508:	463b      	mov	r3, r7
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	785b      	ldrb	r3, [r3, #1]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d16f      	bne.n	80065f2 <USB_EPStartXfer+0x1402>
 8006512:	1d3b      	adds	r3, r7, #4
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800651a:	1d3b      	adds	r3, r7, #4
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006522:	b29b      	uxth	r3, r3
 8006524:	461a      	mov	r2, r3
 8006526:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800652a:	4413      	add	r3, r2
 800652c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006530:	463b      	mov	r3, r7
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	011a      	lsls	r2, r3, #4
 8006538:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800653c:	4413      	add	r3, r2
 800653e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006542:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006546:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800654a:	2b00      	cmp	r3, #0
 800654c:	d116      	bne.n	800657c <USB_EPStartXfer+0x138c>
 800654e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006552:	881b      	ldrh	r3, [r3, #0]
 8006554:	b29b      	uxth	r3, r3
 8006556:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800655a:	b29a      	uxth	r2, r3
 800655c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006560:	801a      	strh	r2, [r3, #0]
 8006562:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006566:	881b      	ldrh	r3, [r3, #0]
 8006568:	b29b      	uxth	r3, r3
 800656a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800656e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006572:	b29a      	uxth	r2, r3
 8006574:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006578:	801a      	strh	r2, [r3, #0]
 800657a:	e05f      	b.n	800663c <USB_EPStartXfer+0x144c>
 800657c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006580:	2b3e      	cmp	r3, #62	; 0x3e
 8006582:	d818      	bhi.n	80065b6 <USB_EPStartXfer+0x13c6>
 8006584:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006588:	085b      	lsrs	r3, r3, #1
 800658a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800658e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	2b00      	cmp	r3, #0
 8006598:	d004      	beq.n	80065a4 <USB_EPStartXfer+0x13b4>
 800659a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800659e:	3301      	adds	r3, #1
 80065a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80065a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	029b      	lsls	r3, r3, #10
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80065b2:	801a      	strh	r2, [r3, #0]
 80065b4:	e042      	b.n	800663c <USB_EPStartXfer+0x144c>
 80065b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065ba:	095b      	lsrs	r3, r3, #5
 80065bc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80065c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065c4:	f003 031f 	and.w	r3, r3, #31
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d104      	bne.n	80065d6 <USB_EPStartXfer+0x13e6>
 80065cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065d0:	3b01      	subs	r3, #1
 80065d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80065d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065da:	b29b      	uxth	r3, r3
 80065dc:	029b      	lsls	r3, r3, #10
 80065de:	b29b      	uxth	r3, r3
 80065e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80065ee:	801a      	strh	r2, [r3, #0]
 80065f0:	e024      	b.n	800663c <USB_EPStartXfer+0x144c>
 80065f2:	463b      	mov	r3, r7
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	785b      	ldrb	r3, [r3, #1]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d11f      	bne.n	800663c <USB_EPStartXfer+0x144c>
 80065fc:	1d3b      	adds	r3, r7, #4
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006604:	1d3b      	adds	r3, r7, #4
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800660c:	b29b      	uxth	r3, r3
 800660e:	461a      	mov	r2, r3
 8006610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006614:	4413      	add	r3, r2
 8006616:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800661a:	463b      	mov	r3, r7
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	011a      	lsls	r2, r3, #4
 8006622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006626:	4413      	add	r3, r2
 8006628:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800662c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006630:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006634:	b29a      	uxth	r2, r3
 8006636:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800663a:	801a      	strh	r2, [r3, #0]
 800663c:	1d3b      	adds	r3, r7, #4
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006644:	463b      	mov	r3, r7
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	785b      	ldrb	r3, [r3, #1]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d16f      	bne.n	800672e <USB_EPStartXfer+0x153e>
 800664e:	1d3b      	adds	r3, r7, #4
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006656:	1d3b      	adds	r3, r7, #4
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800665e:	b29b      	uxth	r3, r3
 8006660:	461a      	mov	r2, r3
 8006662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006666:	4413      	add	r3, r2
 8006668:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800666c:	463b      	mov	r3, r7
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	011a      	lsls	r2, r3, #4
 8006674:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006678:	4413      	add	r3, r2
 800667a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800667e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006682:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006686:	2b00      	cmp	r3, #0
 8006688:	d116      	bne.n	80066b8 <USB_EPStartXfer+0x14c8>
 800668a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800668e:	881b      	ldrh	r3, [r3, #0]
 8006690:	b29b      	uxth	r3, r3
 8006692:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006696:	b29a      	uxth	r2, r3
 8006698:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800669c:	801a      	strh	r2, [r3, #0]
 800669e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066a2:	881b      	ldrh	r3, [r3, #0]
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066ae:	b29a      	uxth	r2, r3
 80066b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066b4:	801a      	strh	r2, [r3, #0]
 80066b6:	e05e      	b.n	8006776 <USB_EPStartXfer+0x1586>
 80066b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066bc:	2b3e      	cmp	r3, #62	; 0x3e
 80066be:	d818      	bhi.n	80066f2 <USB_EPStartXfer+0x1502>
 80066c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066c4:	085b      	lsrs	r3, r3, #1
 80066c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80066ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066ce:	f003 0301 	and.w	r3, r3, #1
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d004      	beq.n	80066e0 <USB_EPStartXfer+0x14f0>
 80066d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80066da:	3301      	adds	r3, #1
 80066dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80066e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	029b      	lsls	r3, r3, #10
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066ee:	801a      	strh	r2, [r3, #0]
 80066f0:	e041      	b.n	8006776 <USB_EPStartXfer+0x1586>
 80066f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066f6:	095b      	lsrs	r3, r3, #5
 80066f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80066fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006700:	f003 031f 	and.w	r3, r3, #31
 8006704:	2b00      	cmp	r3, #0
 8006706:	d104      	bne.n	8006712 <USB_EPStartXfer+0x1522>
 8006708:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800670c:	3b01      	subs	r3, #1
 800670e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006712:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006716:	b29b      	uxth	r3, r3
 8006718:	029b      	lsls	r3, r3, #10
 800671a:	b29b      	uxth	r3, r3
 800671c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006720:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006724:	b29a      	uxth	r2, r3
 8006726:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800672a:	801a      	strh	r2, [r3, #0]
 800672c:	e023      	b.n	8006776 <USB_EPStartXfer+0x1586>
 800672e:	463b      	mov	r3, r7
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	785b      	ldrb	r3, [r3, #1]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d11e      	bne.n	8006776 <USB_EPStartXfer+0x1586>
 8006738:	1d3b      	adds	r3, r7, #4
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006740:	b29b      	uxth	r3, r3
 8006742:	461a      	mov	r2, r3
 8006744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006748:	4413      	add	r3, r2
 800674a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800674e:	463b      	mov	r3, r7
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	011a      	lsls	r2, r3, #4
 8006756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800675a:	4413      	add	r3, r2
 800675c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006760:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006764:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006768:	b29a      	uxth	r2, r3
 800676a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800676e:	801a      	strh	r2, [r3, #0]
 8006770:	e001      	b.n	8006776 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e02e      	b.n	80067d4 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006776:	1d3b      	adds	r3, r7, #4
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	463b      	mov	r3, r7
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4413      	add	r3, r2
 8006784:	881b      	ldrh	r3, [r3, #0]
 8006786:	b29b      	uxth	r3, r3
 8006788:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800678c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006790:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006794:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006798:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800679c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80067a0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80067a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80067a8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80067ac:	1d3b      	adds	r3, r7, #4
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	463b      	mov	r3, r7
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	441a      	add	r2, r3
 80067ba:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80067be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80067de:	b480      	push	{r7}
 80067e0:	b085      	sub	sp, #20
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	785b      	ldrb	r3, [r3, #1]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d020      	beq.n	8006832 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	881b      	ldrh	r3, [r3, #0]
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006802:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006806:	81bb      	strh	r3, [r7, #12]
 8006808:	89bb      	ldrh	r3, [r7, #12]
 800680a:	f083 0310 	eor.w	r3, r3, #16
 800680e:	81bb      	strh	r3, [r7, #12]
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	441a      	add	r2, r3
 800681a:	89bb      	ldrh	r3, [r7, #12]
 800681c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006820:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006824:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800682c:	b29b      	uxth	r3, r3
 800682e:	8013      	strh	r3, [r2, #0]
 8006830:	e01f      	b.n	8006872 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	4413      	add	r3, r2
 800683c:	881b      	ldrh	r3, [r3, #0]
 800683e:	b29b      	uxth	r3, r3
 8006840:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006848:	81fb      	strh	r3, [r7, #14]
 800684a:	89fb      	ldrh	r3, [r7, #14]
 800684c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006850:	81fb      	strh	r3, [r7, #14]
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	441a      	add	r2, r3
 800685c:	89fb      	ldrh	r3, [r7, #14]
 800685e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006862:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006866:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800686a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800686e:	b29b      	uxth	r3, r3
 8006870:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3714      	adds	r7, #20
 8006878:	46bd      	mov	sp, r7
 800687a:	bc80      	pop	{r7}
 800687c:	4770      	bx	lr

0800687e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800687e:	b480      	push	{r7}
 8006880:	b087      	sub	sp, #28
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
 8006886:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	7b1b      	ldrb	r3, [r3, #12]
 800688c:	2b00      	cmp	r3, #0
 800688e:	f040 809d 	bne.w	80069cc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	785b      	ldrb	r3, [r3, #1]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d04c      	beq.n	8006934 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	4413      	add	r3, r2
 80068a4:	881b      	ldrh	r3, [r3, #0]
 80068a6:	823b      	strh	r3, [r7, #16]
 80068a8:	8a3b      	ldrh	r3, [r7, #16]
 80068aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d01b      	beq.n	80068ea <USB_EPClearStall+0x6c>
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	4413      	add	r3, r2
 80068bc:	881b      	ldrh	r3, [r3, #0]
 80068be:	b29b      	uxth	r3, r3
 80068c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068c8:	81fb      	strh	r3, [r7, #14]
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	441a      	add	r2, r3
 80068d4:	89fb      	ldrh	r3, [r7, #14]
 80068d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	78db      	ldrb	r3, [r3, #3]
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d06c      	beq.n	80069cc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	4413      	add	r3, r2
 80068fc:	881b      	ldrh	r3, [r3, #0]
 80068fe:	b29b      	uxth	r3, r3
 8006900:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006908:	81bb      	strh	r3, [r7, #12]
 800690a:	89bb      	ldrh	r3, [r7, #12]
 800690c:	f083 0320 	eor.w	r3, r3, #32
 8006910:	81bb      	strh	r3, [r7, #12]
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	441a      	add	r2, r3
 800691c:	89bb      	ldrh	r3, [r7, #12]
 800691e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006922:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800692a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800692e:	b29b      	uxth	r3, r3
 8006930:	8013      	strh	r3, [r2, #0]
 8006932:	e04b      	b.n	80069cc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4413      	add	r3, r2
 800693e:	881b      	ldrh	r3, [r3, #0]
 8006940:	82fb      	strh	r3, [r7, #22]
 8006942:	8afb      	ldrh	r3, [r7, #22]
 8006944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d01b      	beq.n	8006984 <USB_EPClearStall+0x106>
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	4413      	add	r3, r2
 8006956:	881b      	ldrh	r3, [r3, #0]
 8006958:	b29b      	uxth	r3, r3
 800695a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800695e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006962:	82bb      	strh	r3, [r7, #20]
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	441a      	add	r2, r3
 800696e:	8abb      	ldrh	r3, [r7, #20]
 8006970:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006974:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006978:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800697c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006980:	b29b      	uxth	r3, r3
 8006982:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	4413      	add	r3, r2
 800698e:	881b      	ldrh	r3, [r3, #0]
 8006990:	b29b      	uxth	r3, r3
 8006992:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800699a:	827b      	strh	r3, [r7, #18]
 800699c:	8a7b      	ldrh	r3, [r7, #18]
 800699e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80069a2:	827b      	strh	r3, [r7, #18]
 80069a4:	8a7b      	ldrh	r3, [r7, #18]
 80069a6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80069aa:	827b      	strh	r3, [r7, #18]
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	441a      	add	r2, r3
 80069b6:	8a7b      	ldrh	r3, [r7, #18]
 80069b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	371c      	adds	r7, #28
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bc80      	pop	{r7}
 80069d6:	4770      	bx	lr

080069d8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	460b      	mov	r3, r1
 80069e2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80069e4:	78fb      	ldrb	r3, [r7, #3]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d103      	bne.n	80069f2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2280      	movs	r2, #128	; 0x80
 80069ee:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bc80      	pop	{r7}
 80069fc:	4770      	bx	lr

080069fe <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80069fe:	b480      	push	{r7}
 8006a00:	b083      	sub	sp, #12
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bc80      	pop	{r7}
 8006a10:	4770      	bx	lr

08006a12 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006a12:	b480      	push	{r7}
 8006a14:	b083      	sub	sp, #12
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bc80      	pop	{r7}
 8006a24:	4770      	bx	lr

08006a26 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006a26:	b480      	push	{r7}
 8006a28:	b085      	sub	sp, #20
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006a38:	68fb      	ldr	r3, [r7, #12]
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bc80      	pop	{r7}
 8006a42:	4770      	bx	lr

08006a44 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bc80      	pop	{r7}
 8006a58:	4770      	bx	lr

08006a5a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b08d      	sub	sp, #52	; 0x34
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	60f8      	str	r0, [r7, #12]
 8006a62:	60b9      	str	r1, [r7, #8]
 8006a64:	4611      	mov	r1, r2
 8006a66:	461a      	mov	r2, r3
 8006a68:	460b      	mov	r3, r1
 8006a6a:	80fb      	strh	r3, [r7, #6]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006a70:	88bb      	ldrh	r3, [r7, #4]
 8006a72:	3301      	adds	r3, #1
 8006a74:	085b      	lsrs	r3, r3, #1
 8006a76:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006a80:	88fb      	ldrh	r3, [r7, #6]
 8006a82:	005a      	lsls	r2, r3, #1
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	4413      	add	r3, r2
 8006a88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a8c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006a8e:	6a3b      	ldr	r3, [r7, #32]
 8006a90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a92:	e01e      	b.n	8006ad2 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	021b      	lsls	r3, r3, #8
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	461a      	mov	r2, r3
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006abc:	3302      	adds	r3, #2
 8006abe:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac2:	3302      	adds	r3, #2
 8006ac4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac8:	3301      	adds	r3, #1
 8006aca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1dd      	bne.n	8006a94 <USB_WritePMA+0x3a>
  }
}
 8006ad8:	bf00      	nop
 8006ada:	bf00      	nop
 8006adc:	3734      	adds	r7, #52	; 0x34
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bc80      	pop	{r7}
 8006ae2:	4770      	bx	lr

08006ae4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b08b      	sub	sp, #44	; 0x2c
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	4611      	mov	r1, r2
 8006af0:	461a      	mov	r2, r3
 8006af2:	460b      	mov	r3, r1
 8006af4:	80fb      	strh	r3, [r7, #6]
 8006af6:	4613      	mov	r3, r2
 8006af8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006afa:	88bb      	ldrh	r3, [r7, #4]
 8006afc:	085b      	lsrs	r3, r3, #1
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b0a:	88fb      	ldrh	r3, [r7, #6]
 8006b0c:	005a      	lsls	r2, r3, #1
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	4413      	add	r3, r2
 8006b12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b16:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8006b1c:	e01b      	b.n	8006b56 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006b1e:	6a3b      	ldr	r3, [r7, #32]
 8006b20:	881b      	ldrh	r3, [r3, #0]
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006b26:	6a3b      	ldr	r3, [r7, #32]
 8006b28:	3302      	adds	r3, #2
 8006b2a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	b2da      	uxtb	r2, r3
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	3301      	adds	r3, #1
 8006b38:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	0a1b      	lsrs	r3, r3, #8
 8006b3e:	b2da      	uxtb	r2, r3
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	3301      	adds	r3, #1
 8006b48:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006b4a:	6a3b      	ldr	r3, [r7, #32]
 8006b4c:	3302      	adds	r3, #2
 8006b4e:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b52:	3b01      	subs	r3, #1
 8006b54:	627b      	str	r3, [r7, #36]	; 0x24
 8006b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1e0      	bne.n	8006b1e <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006b5c:	88bb      	ldrh	r3, [r7, #4]
 8006b5e:	f003 0301 	and.w	r3, r3, #1
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d007      	beq.n	8006b78 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006b68:	6a3b      	ldr	r3, [r7, #32]
 8006b6a:	881b      	ldrh	r3, [r3, #0]
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	b2da      	uxtb	r2, r3
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	701a      	strb	r2, [r3, #0]
  }
}
 8006b78:	bf00      	nop
 8006b7a:	372c      	adds	r7, #44	; 0x2c
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bc80      	pop	{r7}
 8006b80:	4770      	bx	lr

08006b82 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b084      	sub	sp, #16
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	7c1b      	ldrb	r3, [r3, #16]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d115      	bne.n	8006bc6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006b9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b9e:	2202      	movs	r2, #2
 8006ba0:	2181      	movs	r1, #129	; 0x81
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f001 fe31 	bl	800880a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006bae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bb2:	2202      	movs	r2, #2
 8006bb4:	2101      	movs	r1, #1
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f001 fe27 	bl	800880a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006bc4:	e012      	b.n	8006bec <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006bc6:	2340      	movs	r3, #64	; 0x40
 8006bc8:	2202      	movs	r2, #2
 8006bca:	2181      	movs	r1, #129	; 0x81
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f001 fe1c 	bl	800880a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006bd8:	2340      	movs	r3, #64	; 0x40
 8006bda:	2202      	movs	r2, #2
 8006bdc:	2101      	movs	r1, #1
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f001 fe13 	bl	800880a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006bec:	2308      	movs	r3, #8
 8006bee:	2203      	movs	r2, #3
 8006bf0:	2182      	movs	r1, #130	; 0x82
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f001 fe09 	bl	800880a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006bfe:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006c02:	f001 ff29 	bl	8008a58 <USBD_static_malloc>
 8006c06:	4602      	mov	r2, r0
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d102      	bne.n	8006c1e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	73fb      	strb	r3, [r7, #15]
 8006c1c:	e026      	b.n	8006c6c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c24:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	7c1b      	ldrb	r3, [r3, #16]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d109      	bne.n	8006c5c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c52:	2101      	movs	r1, #1
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f001 fec9 	bl	80089ec <USBD_LL_PrepareReceive>
 8006c5a:	e007      	b.n	8006c6c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c62:	2340      	movs	r3, #64	; 0x40
 8006c64:	2101      	movs	r1, #1
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f001 fec0 	bl	80089ec <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}

08006c76 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c76:	b580      	push	{r7, lr}
 8006c78:	b084      	sub	sp, #16
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
 8006c7e:	460b      	mov	r3, r1
 8006c80:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006c82:	2300      	movs	r3, #0
 8006c84:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006c86:	2181      	movs	r1, #129	; 0x81
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f001 fde4 	bl	8008856 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006c94:	2101      	movs	r1, #1
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f001 fddd 	bl	8008856 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006ca4:	2182      	movs	r1, #130	; 0x82
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f001 fdd5 	bl	8008856 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00e      	beq.n	8006cda <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f001 fecf 	bl	8008a70 <USBD_static_free>
    pdev->pClassData = NULL;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b086      	sub	sp, #24
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cf4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d039      	beq.n	8006d82 <USBD_CDC_Setup+0x9e>
 8006d0e:	2b20      	cmp	r3, #32
 8006d10:	d17f      	bne.n	8006e12 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	88db      	ldrh	r3, [r3, #6]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d029      	beq.n	8006d6e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	b25b      	sxtb	r3, r3
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	da11      	bge.n	8006d48 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	683a      	ldr	r2, [r7, #0]
 8006d2e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006d30:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d32:	683a      	ldr	r2, [r7, #0]
 8006d34:	88d2      	ldrh	r2, [r2, #6]
 8006d36:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006d38:	6939      	ldr	r1, [r7, #16]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	88db      	ldrh	r3, [r3, #6]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f001 f9da 	bl	80080fa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006d46:	e06b      	b.n	8006e20 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	785a      	ldrb	r2, [r3, #1]
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	88db      	ldrh	r3, [r3, #6]
 8006d56:	b2da      	uxtb	r2, r3
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006d5e:	6939      	ldr	r1, [r7, #16]
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	88db      	ldrh	r3, [r3, #6]
 8006d64:	461a      	mov	r2, r3
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f001 f9f5 	bl	8008156 <USBD_CtlPrepareRx>
      break;
 8006d6c:	e058      	b.n	8006e20 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	683a      	ldr	r2, [r7, #0]
 8006d78:	7850      	ldrb	r0, [r2, #1]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	6839      	ldr	r1, [r7, #0]
 8006d7e:	4798      	blx	r3
      break;
 8006d80:	e04e      	b.n	8006e20 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	785b      	ldrb	r3, [r3, #1]
 8006d86:	2b0b      	cmp	r3, #11
 8006d88:	d02e      	beq.n	8006de8 <USBD_CDC_Setup+0x104>
 8006d8a:	2b0b      	cmp	r3, #11
 8006d8c:	dc38      	bgt.n	8006e00 <USBD_CDC_Setup+0x11c>
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d002      	beq.n	8006d98 <USBD_CDC_Setup+0xb4>
 8006d92:	2b0a      	cmp	r3, #10
 8006d94:	d014      	beq.n	8006dc0 <USBD_CDC_Setup+0xdc>
 8006d96:	e033      	b.n	8006e00 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d9e:	2b03      	cmp	r3, #3
 8006da0:	d107      	bne.n	8006db2 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006da2:	f107 030c 	add.w	r3, r7, #12
 8006da6:	2202      	movs	r2, #2
 8006da8:	4619      	mov	r1, r3
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f001 f9a5 	bl	80080fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006db0:	e02e      	b.n	8006e10 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006db2:	6839      	ldr	r1, [r7, #0]
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f001 f936 	bl	8008026 <USBD_CtlError>
            ret = USBD_FAIL;
 8006dba:	2302      	movs	r3, #2
 8006dbc:	75fb      	strb	r3, [r7, #23]
          break;
 8006dbe:	e027      	b.n	8006e10 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dc6:	2b03      	cmp	r3, #3
 8006dc8:	d107      	bne.n	8006dda <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006dca:	f107 030f 	add.w	r3, r7, #15
 8006dce:	2201      	movs	r2, #1
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f001 f991 	bl	80080fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006dd8:	e01a      	b.n	8006e10 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006dda:	6839      	ldr	r1, [r7, #0]
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f001 f922 	bl	8008026 <USBD_CtlError>
            ret = USBD_FAIL;
 8006de2:	2302      	movs	r3, #2
 8006de4:	75fb      	strb	r3, [r7, #23]
          break;
 8006de6:	e013      	b.n	8006e10 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dee:	2b03      	cmp	r3, #3
 8006df0:	d00d      	beq.n	8006e0e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006df2:	6839      	ldr	r1, [r7, #0]
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f001 f916 	bl	8008026 <USBD_CtlError>
            ret = USBD_FAIL;
 8006dfa:	2302      	movs	r3, #2
 8006dfc:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006dfe:	e006      	b.n	8006e0e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006e00:	6839      	ldr	r1, [r7, #0]
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f001 f90f 	bl	8008026 <USBD_CtlError>
          ret = USBD_FAIL;
 8006e08:	2302      	movs	r3, #2
 8006e0a:	75fb      	strb	r3, [r7, #23]
          break;
 8006e0c:	e000      	b.n	8006e10 <USBD_CDC_Setup+0x12c>
          break;
 8006e0e:	bf00      	nop
      }
      break;
 8006e10:	e006      	b.n	8006e20 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006e12:	6839      	ldr	r1, [r7, #0]
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f001 f906 	bl	8008026 <USBD_CtlError>
      ret = USBD_FAIL;
 8006e1a:	2302      	movs	r3, #2
 8006e1c:	75fb      	strb	r3, [r7, #23]
      break;
 8006e1e:	bf00      	nop
  }

  return ret;
 8006e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3718      	adds	r7, #24
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b084      	sub	sp, #16
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
 8006e32:	460b      	mov	r3, r1
 8006e34:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e3c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e44:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d03a      	beq.n	8006ec6 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006e50:	78fa      	ldrb	r2, [r7, #3]
 8006e52:	6879      	ldr	r1, [r7, #4]
 8006e54:	4613      	mov	r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	4413      	add	r3, r2
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	440b      	add	r3, r1
 8006e5e:	331c      	adds	r3, #28
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d029      	beq.n	8006eba <USBD_CDC_DataIn+0x90>
 8006e66:	78fa      	ldrb	r2, [r7, #3]
 8006e68:	6879      	ldr	r1, [r7, #4]
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	4413      	add	r3, r2
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	440b      	add	r3, r1
 8006e74:	331c      	adds	r3, #28
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	78f9      	ldrb	r1, [r7, #3]
 8006e7a:	68b8      	ldr	r0, [r7, #8]
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	440b      	add	r3, r1
 8006e82:	00db      	lsls	r3, r3, #3
 8006e84:	4403      	add	r3, r0
 8006e86:	3338      	adds	r3, #56	; 0x38
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	fbb2 f1f3 	udiv	r1, r2, r3
 8006e8e:	fb03 f301 	mul.w	r3, r3, r1
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d110      	bne.n	8006eba <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006e98:	78fa      	ldrb	r2, [r7, #3]
 8006e9a:	6879      	ldr	r1, [r7, #4]
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	4413      	add	r3, r2
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	440b      	add	r3, r1
 8006ea6:	331c      	adds	r3, #28
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006eac:	78f9      	ldrb	r1, [r7, #3]
 8006eae:	2300      	movs	r3, #0
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f001 fd77 	bl	80089a6 <USBD_LL_Transmit>
 8006eb8:	e003      	b.n	8006ec2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	e000      	b.n	8006ec8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006ec6:	2302      	movs	r3, #2
  }
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	460b      	mov	r3, r1
 8006eda:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ee2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006ee4:	78fb      	ldrb	r3, [r7, #3]
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f001 fda2 	bl	8008a32 <USBD_LL_GetRxDataSize>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d00d      	beq.n	8006f1c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006f14:	4611      	mov	r1, r2
 8006f16:	4798      	blx	r3

    return USBD_OK;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	e000      	b.n	8006f1e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006f1c:	2302      	movs	r3, #2
  }
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b084      	sub	sp, #16
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f34:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d015      	beq.n	8006f6c <USBD_CDC_EP0_RxReady+0x46>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006f46:	2bff      	cmp	r3, #255	; 0xff
 8006f48:	d010      	beq.n	8006f6c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006f58:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006f60:	b292      	uxth	r2, r2
 8006f62:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	22ff      	movs	r2, #255	; 0xff
 8006f68:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
	...

08006f78 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2243      	movs	r2, #67	; 0x43
 8006f84:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006f86:	4b03      	ldr	r3, [pc, #12]	; (8006f94 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bc80      	pop	{r7}
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	20000094 	.word	0x20000094

08006f98 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2243      	movs	r2, #67	; 0x43
 8006fa4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006fa6:	4b03      	ldr	r3, [pc, #12]	; (8006fb4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bc80      	pop	{r7}
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	20000050 	.word	0x20000050

08006fb8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2243      	movs	r2, #67	; 0x43
 8006fc4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006fc6:	4b03      	ldr	r3, [pc, #12]	; (8006fd4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bc80      	pop	{r7}
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	200000d8 	.word	0x200000d8

08006fd8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	220a      	movs	r2, #10
 8006fe4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006fe6:	4b03      	ldr	r3, [pc, #12]	; (8006ff4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bc80      	pop	{r7}
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	2000000c 	.word	0x2000000c

08006ff8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007002:	2302      	movs	r3, #2
 8007004:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d005      	beq.n	8007018 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	683a      	ldr	r2, [r7, #0]
 8007010:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007014:	2300      	movs	r3, #0
 8007016:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007018:	7bfb      	ldrb	r3, [r7, #15]
}
 800701a:	4618      	mov	r0, r3
 800701c:	3714      	adds	r7, #20
 800701e:	46bd      	mov	sp, r7
 8007020:	bc80      	pop	{r7}
 8007022:	4770      	bx	lr

08007024 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007024:	b480      	push	{r7}
 8007026:	b087      	sub	sp, #28
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	4613      	mov	r3, r2
 8007030:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007038:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	68ba      	ldr	r2, [r7, #8]
 800703e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007042:	88fa      	ldrh	r2, [r7, #6]
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	371c      	adds	r7, #28
 8007050:	46bd      	mov	sp, r7
 8007052:	bc80      	pop	{r7}
 8007054:	4770      	bx	lr

08007056 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007056:	b480      	push	{r7}
 8007058:	b085      	sub	sp, #20
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
 800705e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007066:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	683a      	ldr	r2, [r7, #0]
 800706c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3714      	adds	r7, #20
 8007076:	46bd      	mov	sp, r7
 8007078:	bc80      	pop	{r7}
 800707a:	4770      	bx	lr

0800707c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800708a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007092:	2b00      	cmp	r3, #0
 8007094:	d017      	beq.n	80070c6 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	7c1b      	ldrb	r3, [r3, #16]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d109      	bne.n	80070b2 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070a8:	2101      	movs	r1, #1
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f001 fc9e 	bl	80089ec <USBD_LL_PrepareReceive>
 80070b0:	e007      	b.n	80070c2 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070b8:	2340      	movs	r3, #64	; 0x40
 80070ba:	2101      	movs	r1, #1
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f001 fc95 	bl	80089ec <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80070c2:	2300      	movs	r3, #0
 80070c4:	e000      	b.n	80070c8 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80070c6:	2302      	movs	r3, #2
  }
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	4613      	mov	r3, r2
 80070dc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d101      	bne.n	80070e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80070e4:	2302      	movs	r3, #2
 80070e6:	e01a      	b.n	800711e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d003      	beq.n	80070fa <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d003      	beq.n	8007108 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	68ba      	ldr	r2, [r7, #8]
 8007104:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	79fa      	ldrb	r2, [r7, #7]
 8007114:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007116:	68f8      	ldr	r0, [r7, #12]
 8007118:	f001 fb02 	bl	8008720 <USBD_LL_Init>

  return USBD_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007126:	b480      	push	{r7}
 8007128:	b085      	sub	sp, #20
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
 800712e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007130:	2300      	movs	r3, #0
 8007132:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d006      	beq.n	8007148 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	683a      	ldr	r2, [r7, #0]
 800713e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007142:	2300      	movs	r3, #0
 8007144:	73fb      	strb	r3, [r7, #15]
 8007146:	e001      	b.n	800714c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007148:	2302      	movs	r3, #2
 800714a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800714c:	7bfb      	ldrb	r3, [r7, #15]
}
 800714e:	4618      	mov	r0, r3
 8007150:	3714      	adds	r7, #20
 8007152:	46bd      	mov	sp, r7
 8007154:	bc80      	pop	{r7}
 8007156:	4770      	bx	lr

08007158 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f001 fb37 	bl	80087d4 <USBD_LL_Start>

  return USBD_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	3708      	adds	r7, #8
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	370c      	adds	r7, #12
 800717e:	46bd      	mov	sp, r7
 8007180:	bc80      	pop	{r7}
 8007182:	4770      	bx	lr

08007184 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	460b      	mov	r3, r1
 800718e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007190:	2302      	movs	r3, #2
 8007192:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00c      	beq.n	80071b8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	78fa      	ldrb	r2, [r7, #3]
 80071a8:	4611      	mov	r1, r2
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	4798      	blx	r3
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d101      	bne.n	80071b8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80071b4:	2300      	movs	r3, #0
 80071b6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80071b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b082      	sub	sp, #8
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
 80071ca:	460b      	mov	r3, r1
 80071cc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	78fa      	ldrb	r2, [r7, #3]
 80071d8:	4611      	mov	r1, r2
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	4798      	blx	r3

  return USBD_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80071f8:	6839      	ldr	r1, [r7, #0]
 80071fa:	4618      	mov	r0, r3
 80071fc:	f000 fed7 	bl	8007fae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800720e:	461a      	mov	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800721c:	f003 031f 	and.w	r3, r3, #31
 8007220:	2b02      	cmp	r3, #2
 8007222:	d016      	beq.n	8007252 <USBD_LL_SetupStage+0x6a>
 8007224:	2b02      	cmp	r3, #2
 8007226:	d81c      	bhi.n	8007262 <USBD_LL_SetupStage+0x7a>
 8007228:	2b00      	cmp	r3, #0
 800722a:	d002      	beq.n	8007232 <USBD_LL_SetupStage+0x4a>
 800722c:	2b01      	cmp	r3, #1
 800722e:	d008      	beq.n	8007242 <USBD_LL_SetupStage+0x5a>
 8007230:	e017      	b.n	8007262 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007238:	4619      	mov	r1, r3
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 f9ca 	bl	80075d4 <USBD_StdDevReq>
      break;
 8007240:	e01a      	b.n	8007278 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007248:	4619      	mov	r1, r3
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 fa2c 	bl	80076a8 <USBD_StdItfReq>
      break;
 8007250:	e012      	b.n	8007278 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007258:	4619      	mov	r1, r3
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 fa6c 	bl	8007738 <USBD_StdEPReq>
      break;
 8007260:	e00a      	b.n	8007278 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007268:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800726c:	b2db      	uxtb	r3, r3
 800726e:	4619      	mov	r1, r3
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f001 fb0f 	bl	8008894 <USBD_LL_StallEP>
      break;
 8007276:	bf00      	nop
  }

  return USBD_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3708      	adds	r7, #8
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007282:	b580      	push	{r7, lr}
 8007284:	b086      	sub	sp, #24
 8007286:	af00      	add	r7, sp, #0
 8007288:	60f8      	str	r0, [r7, #12]
 800728a:	460b      	mov	r3, r1
 800728c:	607a      	str	r2, [r7, #4]
 800728e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007290:	7afb      	ldrb	r3, [r7, #11]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d14b      	bne.n	800732e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800729c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072a4:	2b03      	cmp	r3, #3
 80072a6:	d134      	bne.n	8007312 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	68da      	ldr	r2, [r3, #12]
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	691b      	ldr	r3, [r3, #16]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d919      	bls.n	80072e8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	68da      	ldr	r2, [r3, #12]
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	1ad2      	subs	r2, r2, r3
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	68da      	ldr	r2, [r3, #12]
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d203      	bcs.n	80072d6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	e002      	b.n	80072dc <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80072da:	b29b      	uxth	r3, r3
 80072dc:	461a      	mov	r2, r3
 80072de:	6879      	ldr	r1, [r7, #4]
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f000 ff56 	bl	8008192 <USBD_CtlContinueRx>
 80072e6:	e038      	b.n	800735a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d00a      	beq.n	800730a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80072fa:	2b03      	cmp	r3, #3
 80072fc:	d105      	bne.n	800730a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007304:	691b      	ldr	r3, [r3, #16]
 8007306:	68f8      	ldr	r0, [r7, #12]
 8007308:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	f000 ff53 	bl	80081b6 <USBD_CtlSendStatus>
 8007310:	e023      	b.n	800735a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007318:	2b05      	cmp	r3, #5
 800731a:	d11e      	bne.n	800735a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2200      	movs	r2, #0
 8007320:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007324:	2100      	movs	r1, #0
 8007326:	68f8      	ldr	r0, [r7, #12]
 8007328:	f001 fab4 	bl	8008894 <USBD_LL_StallEP>
 800732c:	e015      	b.n	800735a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007334:	699b      	ldr	r3, [r3, #24]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00d      	beq.n	8007356 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007340:	2b03      	cmp	r3, #3
 8007342:	d108      	bne.n	8007356 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	7afa      	ldrb	r2, [r7, #11]
 800734e:	4611      	mov	r1, r2
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	4798      	blx	r3
 8007354:	e001      	b.n	800735a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007356:	2302      	movs	r3, #2
 8007358:	e000      	b.n	800735c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3718      	adds	r7, #24
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b086      	sub	sp, #24
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	460b      	mov	r3, r1
 800736e:	607a      	str	r2, [r7, #4]
 8007370:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007372:	7afb      	ldrb	r3, [r7, #11]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d17f      	bne.n	8007478 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	3314      	adds	r3, #20
 800737c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007384:	2b02      	cmp	r3, #2
 8007386:	d15c      	bne.n	8007442 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	68da      	ldr	r2, [r3, #12]
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	429a      	cmp	r2, r3
 8007392:	d915      	bls.n	80073c0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	68da      	ldr	r2, [r3, #12]
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	1ad2      	subs	r2, r2, r3
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	461a      	mov	r2, r3
 80073aa:	6879      	ldr	r1, [r7, #4]
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f000 fec0 	bl	8008132 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073b2:	2300      	movs	r3, #0
 80073b4:	2200      	movs	r2, #0
 80073b6:	2100      	movs	r1, #0
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f001 fb17 	bl	80089ec <USBD_LL_PrepareReceive>
 80073be:	e04e      	b.n	800745e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	697a      	ldr	r2, [r7, #20]
 80073c6:	6912      	ldr	r2, [r2, #16]
 80073c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80073cc:	fb02 f201 	mul.w	r2, r2, r1
 80073d0:	1a9b      	subs	r3, r3, r2
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d11c      	bne.n	8007410 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	689a      	ldr	r2, [r3, #8]
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80073de:	429a      	cmp	r2, r3
 80073e0:	d316      	bcc.n	8007410 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	689a      	ldr	r2, [r3, #8]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d20f      	bcs.n	8007410 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80073f0:	2200      	movs	r2, #0
 80073f2:	2100      	movs	r1, #0
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	f000 fe9c 	bl	8008132 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007402:	2300      	movs	r3, #0
 8007404:	2200      	movs	r2, #0
 8007406:	2100      	movs	r1, #0
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	f001 faef 	bl	80089ec <USBD_LL_PrepareReceive>
 800740e:	e026      	b.n	800745e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d00a      	beq.n	8007432 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007422:	2b03      	cmp	r3, #3
 8007424:	d105      	bne.n	8007432 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007432:	2180      	movs	r1, #128	; 0x80
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f001 fa2d 	bl	8008894 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	f000 fece 	bl	80081dc <USBD_CtlReceiveStatus>
 8007440:	e00d      	b.n	800745e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007448:	2b04      	cmp	r3, #4
 800744a:	d004      	beq.n	8007456 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007452:	2b00      	cmp	r3, #0
 8007454:	d103      	bne.n	800745e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007456:	2180      	movs	r1, #128	; 0x80
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	f001 fa1b 	bl	8008894 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007464:	2b01      	cmp	r3, #1
 8007466:	d11d      	bne.n	80074a4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f7ff fe81 	bl	8007170 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007476:	e015      	b.n	80074a4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800747e:	695b      	ldr	r3, [r3, #20]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00d      	beq.n	80074a0 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800748a:	2b03      	cmp	r3, #3
 800748c:	d108      	bne.n	80074a0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007494:	695b      	ldr	r3, [r3, #20]
 8007496:	7afa      	ldrb	r2, [r7, #11]
 8007498:	4611      	mov	r1, r2
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	4798      	blx	r3
 800749e:	e001      	b.n	80074a4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80074a0:	2302      	movs	r3, #2
 80074a2:	e000      	b.n	80074a6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3718      	adds	r7, #24
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b082      	sub	sp, #8
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074b6:	2340      	movs	r3, #64	; 0x40
 80074b8:	2200      	movs	r2, #0
 80074ba:	2100      	movs	r1, #0
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f001 f9a4 	bl	800880a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2201      	movs	r2, #1
 80074c6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2240      	movs	r2, #64	; 0x40
 80074ce:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074d2:	2340      	movs	r3, #64	; 0x40
 80074d4:	2200      	movs	r2, #0
 80074d6:	2180      	movs	r1, #128	; 0x80
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f001 f996 	bl	800880a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2201      	movs	r2, #1
 80074e2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2240      	movs	r2, #64	; 0x40
 80074e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2201      	movs	r2, #1
 80074ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800750e:	2b00      	cmp	r3, #0
 8007510:	d009      	beq.n	8007526 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	6852      	ldr	r2, [r2, #4]
 800751e:	b2d2      	uxtb	r2, r2
 8007520:	4611      	mov	r1, r2
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	4798      	blx	r3
  }

  return USBD_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3708      	adds	r7, #8
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	460b      	mov	r3, r1
 800753a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	78fa      	ldrb	r2, [r7, #3]
 8007540:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	bc80      	pop	{r7}
 800754c:	4770      	bx	lr

0800754e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800754e:	b480      	push	{r7}
 8007550:	b083      	sub	sp, #12
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2204      	movs	r2, #4
 8007566:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	bc80      	pop	{r7}
 8007574:	4770      	bx	lr

08007576 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007576:	b480      	push	{r7}
 8007578:	b083      	sub	sp, #12
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007584:	2b04      	cmp	r3, #4
 8007586:	d105      	bne.n	8007594 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	370c      	adds	r7, #12
 800759a:	46bd      	mov	sp, r7
 800759c:	bc80      	pop	{r7}
 800759e:	4770      	bx	lr

080075a0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075ae:	2b03      	cmp	r3, #3
 80075b0:	d10b      	bne.n	80075ca <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075b8:	69db      	ldr	r3, [r3, #28]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d005      	beq.n	80075ca <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075c4:	69db      	ldr	r3, [r3, #28]
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075ca:	2300      	movs	r3, #0
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3708      	adds	r7, #8
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075de:	2300      	movs	r3, #0
 80075e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075ea:	2b40      	cmp	r3, #64	; 0x40
 80075ec:	d005      	beq.n	80075fa <USBD_StdDevReq+0x26>
 80075ee:	2b40      	cmp	r3, #64	; 0x40
 80075f0:	d84f      	bhi.n	8007692 <USBD_StdDevReq+0xbe>
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d009      	beq.n	800760a <USBD_StdDevReq+0x36>
 80075f6:	2b20      	cmp	r3, #32
 80075f8:	d14b      	bne.n	8007692 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	6839      	ldr	r1, [r7, #0]
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	4798      	blx	r3
      break;
 8007608:	e048      	b.n	800769c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	785b      	ldrb	r3, [r3, #1]
 800760e:	2b09      	cmp	r3, #9
 8007610:	d839      	bhi.n	8007686 <USBD_StdDevReq+0xb2>
 8007612:	a201      	add	r2, pc, #4	; (adr r2, 8007618 <USBD_StdDevReq+0x44>)
 8007614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007618:	08007669 	.word	0x08007669
 800761c:	0800767d 	.word	0x0800767d
 8007620:	08007687 	.word	0x08007687
 8007624:	08007673 	.word	0x08007673
 8007628:	08007687 	.word	0x08007687
 800762c:	0800764b 	.word	0x0800764b
 8007630:	08007641 	.word	0x08007641
 8007634:	08007687 	.word	0x08007687
 8007638:	0800765f 	.word	0x0800765f
 800763c:	08007655 	.word	0x08007655
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007640:	6839      	ldr	r1, [r7, #0]
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 f9dc 	bl	8007a00 <USBD_GetDescriptor>
          break;
 8007648:	e022      	b.n	8007690 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800764a:	6839      	ldr	r1, [r7, #0]
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 fb3f 	bl	8007cd0 <USBD_SetAddress>
          break;
 8007652:	e01d      	b.n	8007690 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007654:	6839      	ldr	r1, [r7, #0]
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 fb7e 	bl	8007d58 <USBD_SetConfig>
          break;
 800765c:	e018      	b.n	8007690 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800765e:	6839      	ldr	r1, [r7, #0]
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 fc07 	bl	8007e74 <USBD_GetConfig>
          break;
 8007666:	e013      	b.n	8007690 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007668:	6839      	ldr	r1, [r7, #0]
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 fc37 	bl	8007ede <USBD_GetStatus>
          break;
 8007670:	e00e      	b.n	8007690 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007672:	6839      	ldr	r1, [r7, #0]
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 fc65 	bl	8007f44 <USBD_SetFeature>
          break;
 800767a:	e009      	b.n	8007690 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800767c:	6839      	ldr	r1, [r7, #0]
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 fc74 	bl	8007f6c <USBD_ClrFeature>
          break;
 8007684:	e004      	b.n	8007690 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007686:	6839      	ldr	r1, [r7, #0]
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 fccc 	bl	8008026 <USBD_CtlError>
          break;
 800768e:	bf00      	nop
      }
      break;
 8007690:	e004      	b.n	800769c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007692:	6839      	ldr	r1, [r7, #0]
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 fcc6 	bl	8008026 <USBD_CtlError>
      break;
 800769a:	bf00      	nop
  }

  return ret;
 800769c:	7bfb      	ldrb	r3, [r7, #15]
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop

080076a8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076b2:	2300      	movs	r3, #0
 80076b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076be:	2b40      	cmp	r3, #64	; 0x40
 80076c0:	d005      	beq.n	80076ce <USBD_StdItfReq+0x26>
 80076c2:	2b40      	cmp	r3, #64	; 0x40
 80076c4:	d82e      	bhi.n	8007724 <USBD_StdItfReq+0x7c>
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d001      	beq.n	80076ce <USBD_StdItfReq+0x26>
 80076ca:	2b20      	cmp	r3, #32
 80076cc:	d12a      	bne.n	8007724 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076d4:	3b01      	subs	r3, #1
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	d81d      	bhi.n	8007716 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	889b      	ldrh	r3, [r3, #4]
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d813      	bhi.n	800770c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	6839      	ldr	r1, [r7, #0]
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	4798      	blx	r3
 80076f2:	4603      	mov	r3, r0
 80076f4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	88db      	ldrh	r3, [r3, #6]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d110      	bne.n	8007720 <USBD_StdItfReq+0x78>
 80076fe:	7bfb      	ldrb	r3, [r7, #15]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d10d      	bne.n	8007720 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 fd56 	bl	80081b6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800770a:	e009      	b.n	8007720 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800770c:	6839      	ldr	r1, [r7, #0]
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fc89 	bl	8008026 <USBD_CtlError>
          break;
 8007714:	e004      	b.n	8007720 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007716:	6839      	ldr	r1, [r7, #0]
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 fc84 	bl	8008026 <USBD_CtlError>
          break;
 800771e:	e000      	b.n	8007722 <USBD_StdItfReq+0x7a>
          break;
 8007720:	bf00      	nop
      }
      break;
 8007722:	e004      	b.n	800772e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007724:	6839      	ldr	r1, [r7, #0]
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 fc7d 	bl	8008026 <USBD_CtlError>
      break;
 800772c:	bf00      	nop
  }

  return USBD_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3710      	adds	r7, #16
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007742:	2300      	movs	r3, #0
 8007744:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	889b      	ldrh	r3, [r3, #4]
 800774a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007754:	2b40      	cmp	r3, #64	; 0x40
 8007756:	d007      	beq.n	8007768 <USBD_StdEPReq+0x30>
 8007758:	2b40      	cmp	r3, #64	; 0x40
 800775a:	f200 8146 	bhi.w	80079ea <USBD_StdEPReq+0x2b2>
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00a      	beq.n	8007778 <USBD_StdEPReq+0x40>
 8007762:	2b20      	cmp	r3, #32
 8007764:	f040 8141 	bne.w	80079ea <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	6839      	ldr	r1, [r7, #0]
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	4798      	blx	r3
      break;
 8007776:	e13d      	b.n	80079f4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007780:	2b20      	cmp	r3, #32
 8007782:	d10a      	bne.n	800779a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	6839      	ldr	r1, [r7, #0]
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	4798      	blx	r3
 8007792:	4603      	mov	r3, r0
 8007794:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007796:	7bfb      	ldrb	r3, [r7, #15]
 8007798:	e12d      	b.n	80079f6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	785b      	ldrb	r3, [r3, #1]
 800779e:	2b03      	cmp	r3, #3
 80077a0:	d007      	beq.n	80077b2 <USBD_StdEPReq+0x7a>
 80077a2:	2b03      	cmp	r3, #3
 80077a4:	f300 811b 	bgt.w	80079de <USBD_StdEPReq+0x2a6>
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d072      	beq.n	8007892 <USBD_StdEPReq+0x15a>
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d03a      	beq.n	8007826 <USBD_StdEPReq+0xee>
 80077b0:	e115      	b.n	80079de <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d002      	beq.n	80077c2 <USBD_StdEPReq+0x8a>
 80077bc:	2b03      	cmp	r3, #3
 80077be:	d015      	beq.n	80077ec <USBD_StdEPReq+0xb4>
 80077c0:	e02b      	b.n	800781a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077c2:	7bbb      	ldrb	r3, [r7, #14]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00c      	beq.n	80077e2 <USBD_StdEPReq+0xaa>
 80077c8:	7bbb      	ldrb	r3, [r7, #14]
 80077ca:	2b80      	cmp	r3, #128	; 0x80
 80077cc:	d009      	beq.n	80077e2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80077ce:	7bbb      	ldrb	r3, [r7, #14]
 80077d0:	4619      	mov	r1, r3
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f001 f85e 	bl	8008894 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80077d8:	2180      	movs	r1, #128	; 0x80
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f001 f85a 	bl	8008894 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80077e0:	e020      	b.n	8007824 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80077e2:	6839      	ldr	r1, [r7, #0]
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 fc1e 	bl	8008026 <USBD_CtlError>
              break;
 80077ea:	e01b      	b.n	8007824 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	885b      	ldrh	r3, [r3, #2]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d10e      	bne.n	8007812 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80077f4:	7bbb      	ldrb	r3, [r7, #14]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00b      	beq.n	8007812 <USBD_StdEPReq+0xda>
 80077fa:	7bbb      	ldrb	r3, [r7, #14]
 80077fc:	2b80      	cmp	r3, #128	; 0x80
 80077fe:	d008      	beq.n	8007812 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	88db      	ldrh	r3, [r3, #6]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d104      	bne.n	8007812 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007808:	7bbb      	ldrb	r3, [r7, #14]
 800780a:	4619      	mov	r1, r3
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f001 f841 	bl	8008894 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 fccf 	bl	80081b6 <USBD_CtlSendStatus>

              break;
 8007818:	e004      	b.n	8007824 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800781a:	6839      	ldr	r1, [r7, #0]
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fc02 	bl	8008026 <USBD_CtlError>
              break;
 8007822:	bf00      	nop
          }
          break;
 8007824:	e0e0      	b.n	80079e8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800782c:	2b02      	cmp	r3, #2
 800782e:	d002      	beq.n	8007836 <USBD_StdEPReq+0xfe>
 8007830:	2b03      	cmp	r3, #3
 8007832:	d015      	beq.n	8007860 <USBD_StdEPReq+0x128>
 8007834:	e026      	b.n	8007884 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007836:	7bbb      	ldrb	r3, [r7, #14]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d00c      	beq.n	8007856 <USBD_StdEPReq+0x11e>
 800783c:	7bbb      	ldrb	r3, [r7, #14]
 800783e:	2b80      	cmp	r3, #128	; 0x80
 8007840:	d009      	beq.n	8007856 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007842:	7bbb      	ldrb	r3, [r7, #14]
 8007844:	4619      	mov	r1, r3
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f001 f824 	bl	8008894 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800784c:	2180      	movs	r1, #128	; 0x80
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f001 f820 	bl	8008894 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007854:	e01c      	b.n	8007890 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007856:	6839      	ldr	r1, [r7, #0]
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 fbe4 	bl	8008026 <USBD_CtlError>
              break;
 800785e:	e017      	b.n	8007890 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	885b      	ldrh	r3, [r3, #2]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d112      	bne.n	800788e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007868:	7bbb      	ldrb	r3, [r7, #14]
 800786a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800786e:	2b00      	cmp	r3, #0
 8007870:	d004      	beq.n	800787c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007872:	7bbb      	ldrb	r3, [r7, #14]
 8007874:	4619      	mov	r1, r3
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f001 f82b 	bl	80088d2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 fc9a 	bl	80081b6 <USBD_CtlSendStatus>
              }
              break;
 8007882:	e004      	b.n	800788e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007884:	6839      	ldr	r1, [r7, #0]
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 fbcd 	bl	8008026 <USBD_CtlError>
              break;
 800788c:	e000      	b.n	8007890 <USBD_StdEPReq+0x158>
              break;
 800788e:	bf00      	nop
          }
          break;
 8007890:	e0aa      	b.n	80079e8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007898:	2b02      	cmp	r3, #2
 800789a:	d002      	beq.n	80078a2 <USBD_StdEPReq+0x16a>
 800789c:	2b03      	cmp	r3, #3
 800789e:	d032      	beq.n	8007906 <USBD_StdEPReq+0x1ce>
 80078a0:	e097      	b.n	80079d2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078a2:	7bbb      	ldrb	r3, [r7, #14]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d007      	beq.n	80078b8 <USBD_StdEPReq+0x180>
 80078a8:	7bbb      	ldrb	r3, [r7, #14]
 80078aa:	2b80      	cmp	r3, #128	; 0x80
 80078ac:	d004      	beq.n	80078b8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80078ae:	6839      	ldr	r1, [r7, #0]
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 fbb8 	bl	8008026 <USBD_CtlError>
                break;
 80078b6:	e091      	b.n	80079dc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	da0b      	bge.n	80078d8 <USBD_StdEPReq+0x1a0>
 80078c0:	7bbb      	ldrb	r3, [r7, #14]
 80078c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078c6:	4613      	mov	r3, r2
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	4413      	add	r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	3310      	adds	r3, #16
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	4413      	add	r3, r2
 80078d4:	3304      	adds	r3, #4
 80078d6:	e00b      	b.n	80078f0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80078d8:	7bbb      	ldrb	r3, [r7, #14]
 80078da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078de:	4613      	mov	r3, r2
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	4413      	add	r3, r2
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	4413      	add	r3, r2
 80078ee:	3304      	adds	r3, #4
 80078f0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	2200      	movs	r2, #0
 80078f6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	2202      	movs	r2, #2
 80078fc:	4619      	mov	r1, r3
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 fbfb 	bl	80080fa <USBD_CtlSendData>
              break;
 8007904:	e06a      	b.n	80079dc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007906:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800790a:	2b00      	cmp	r3, #0
 800790c:	da11      	bge.n	8007932 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800790e:	7bbb      	ldrb	r3, [r7, #14]
 8007910:	f003 020f 	and.w	r2, r3, #15
 8007914:	6879      	ldr	r1, [r7, #4]
 8007916:	4613      	mov	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	4413      	add	r3, r2
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	440b      	add	r3, r1
 8007920:	3318      	adds	r3, #24
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d117      	bne.n	8007958 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007928:	6839      	ldr	r1, [r7, #0]
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 fb7b 	bl	8008026 <USBD_CtlError>
                  break;
 8007930:	e054      	b.n	80079dc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007932:	7bbb      	ldrb	r3, [r7, #14]
 8007934:	f003 020f 	and.w	r2, r3, #15
 8007938:	6879      	ldr	r1, [r7, #4]
 800793a:	4613      	mov	r3, r2
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	4413      	add	r3, r2
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	440b      	add	r3, r1
 8007944:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d104      	bne.n	8007958 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800794e:	6839      	ldr	r1, [r7, #0]
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 fb68 	bl	8008026 <USBD_CtlError>
                  break;
 8007956:	e041      	b.n	80079dc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007958:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800795c:	2b00      	cmp	r3, #0
 800795e:	da0b      	bge.n	8007978 <USBD_StdEPReq+0x240>
 8007960:	7bbb      	ldrb	r3, [r7, #14]
 8007962:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007966:	4613      	mov	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	4413      	add	r3, r2
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	3310      	adds	r3, #16
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	4413      	add	r3, r2
 8007974:	3304      	adds	r3, #4
 8007976:	e00b      	b.n	8007990 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007978:	7bbb      	ldrb	r3, [r7, #14]
 800797a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800797e:	4613      	mov	r3, r2
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	4413      	add	r3, r2
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	4413      	add	r3, r2
 800798e:	3304      	adds	r3, #4
 8007990:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007992:	7bbb      	ldrb	r3, [r7, #14]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d002      	beq.n	800799e <USBD_StdEPReq+0x266>
 8007998:	7bbb      	ldrb	r3, [r7, #14]
 800799a:	2b80      	cmp	r3, #128	; 0x80
 800799c:	d103      	bne.n	80079a6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	2200      	movs	r2, #0
 80079a2:	601a      	str	r2, [r3, #0]
 80079a4:	e00e      	b.n	80079c4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80079a6:	7bbb      	ldrb	r3, [r7, #14]
 80079a8:	4619      	mov	r1, r3
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 ffb0 	bl	8008910 <USBD_LL_IsStallEP>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d003      	beq.n	80079be <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	2201      	movs	r2, #1
 80079ba:	601a      	str	r2, [r3, #0]
 80079bc:	e002      	b.n	80079c4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	2200      	movs	r2, #0
 80079c2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	2202      	movs	r2, #2
 80079c8:	4619      	mov	r1, r3
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fb95 	bl	80080fa <USBD_CtlSendData>
              break;
 80079d0:	e004      	b.n	80079dc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80079d2:	6839      	ldr	r1, [r7, #0]
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 fb26 	bl	8008026 <USBD_CtlError>
              break;
 80079da:	bf00      	nop
          }
          break;
 80079dc:	e004      	b.n	80079e8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80079de:	6839      	ldr	r1, [r7, #0]
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 fb20 	bl	8008026 <USBD_CtlError>
          break;
 80079e6:	bf00      	nop
      }
      break;
 80079e8:	e004      	b.n	80079f4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80079ea:	6839      	ldr	r1, [r7, #0]
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 fb1a 	bl	8008026 <USBD_CtlError>
      break;
 80079f2:	bf00      	nop
  }

  return ret;
 80079f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3710      	adds	r7, #16
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
	...

08007a00 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007a12:	2300      	movs	r3, #0
 8007a14:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	885b      	ldrh	r3, [r3, #2]
 8007a1a:	0a1b      	lsrs	r3, r3, #8
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	2b06      	cmp	r3, #6
 8007a22:	f200 8128 	bhi.w	8007c76 <USBD_GetDescriptor+0x276>
 8007a26:	a201      	add	r2, pc, #4	; (adr r2, 8007a2c <USBD_GetDescriptor+0x2c>)
 8007a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a2c:	08007a49 	.word	0x08007a49
 8007a30:	08007a61 	.word	0x08007a61
 8007a34:	08007aa1 	.word	0x08007aa1
 8007a38:	08007c77 	.word	0x08007c77
 8007a3c:	08007c77 	.word	0x08007c77
 8007a40:	08007c17 	.word	0x08007c17
 8007a44:	08007c43 	.word	0x08007c43
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	7c12      	ldrb	r2, [r2, #16]
 8007a54:	f107 0108 	add.w	r1, r7, #8
 8007a58:	4610      	mov	r0, r2
 8007a5a:	4798      	blx	r3
 8007a5c:	60f8      	str	r0, [r7, #12]
      break;
 8007a5e:	e112      	b.n	8007c86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	7c1b      	ldrb	r3, [r3, #16]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d10d      	bne.n	8007a84 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a70:	f107 0208 	add.w	r2, r7, #8
 8007a74:	4610      	mov	r0, r2
 8007a76:	4798      	blx	r3
 8007a78:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	2202      	movs	r2, #2
 8007a80:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007a82:	e100      	b.n	8007c86 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a8c:	f107 0208 	add.w	r2, r7, #8
 8007a90:	4610      	mov	r0, r2
 8007a92:	4798      	blx	r3
 8007a94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	3301      	adds	r3, #1
 8007a9a:	2202      	movs	r2, #2
 8007a9c:	701a      	strb	r2, [r3, #0]
      break;
 8007a9e:	e0f2      	b.n	8007c86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	885b      	ldrh	r3, [r3, #2]
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	2b05      	cmp	r3, #5
 8007aa8:	f200 80ac 	bhi.w	8007c04 <USBD_GetDescriptor+0x204>
 8007aac:	a201      	add	r2, pc, #4	; (adr r2, 8007ab4 <USBD_GetDescriptor+0xb4>)
 8007aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab2:	bf00      	nop
 8007ab4:	08007acd 	.word	0x08007acd
 8007ab8:	08007b01 	.word	0x08007b01
 8007abc:	08007b35 	.word	0x08007b35
 8007ac0:	08007b69 	.word	0x08007b69
 8007ac4:	08007b9d 	.word	0x08007b9d
 8007ac8:	08007bd1 	.word	0x08007bd1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00b      	beq.n	8007af0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	7c12      	ldrb	r2, [r2, #16]
 8007ae4:	f107 0108 	add.w	r1, r7, #8
 8007ae8:	4610      	mov	r0, r2
 8007aea:	4798      	blx	r3
 8007aec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007aee:	e091      	b.n	8007c14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007af0:	6839      	ldr	r1, [r7, #0]
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 fa97 	bl	8008026 <USBD_CtlError>
            err++;
 8007af8:	7afb      	ldrb	r3, [r7, #11]
 8007afa:	3301      	adds	r3, #1
 8007afc:	72fb      	strb	r3, [r7, #11]
          break;
 8007afe:	e089      	b.n	8007c14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00b      	beq.n	8007b24 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	7c12      	ldrb	r2, [r2, #16]
 8007b18:	f107 0108 	add.w	r1, r7, #8
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	4798      	blx	r3
 8007b20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b22:	e077      	b.n	8007c14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b24:	6839      	ldr	r1, [r7, #0]
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fa7d 	bl	8008026 <USBD_CtlError>
            err++;
 8007b2c:	7afb      	ldrb	r3, [r7, #11]
 8007b2e:	3301      	adds	r3, #1
 8007b30:	72fb      	strb	r3, [r7, #11]
          break;
 8007b32:	e06f      	b.n	8007c14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00b      	beq.n	8007b58 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	7c12      	ldrb	r2, [r2, #16]
 8007b4c:	f107 0108 	add.w	r1, r7, #8
 8007b50:	4610      	mov	r0, r2
 8007b52:	4798      	blx	r3
 8007b54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b56:	e05d      	b.n	8007c14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b58:	6839      	ldr	r1, [r7, #0]
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 fa63 	bl	8008026 <USBD_CtlError>
            err++;
 8007b60:	7afb      	ldrb	r3, [r7, #11]
 8007b62:	3301      	adds	r3, #1
 8007b64:	72fb      	strb	r3, [r7, #11]
          break;
 8007b66:	e055      	b.n	8007c14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00b      	beq.n	8007b8c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	7c12      	ldrb	r2, [r2, #16]
 8007b80:	f107 0108 	add.w	r1, r7, #8
 8007b84:	4610      	mov	r0, r2
 8007b86:	4798      	blx	r3
 8007b88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b8a:	e043      	b.n	8007c14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b8c:	6839      	ldr	r1, [r7, #0]
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 fa49 	bl	8008026 <USBD_CtlError>
            err++;
 8007b94:	7afb      	ldrb	r3, [r7, #11]
 8007b96:	3301      	adds	r3, #1
 8007b98:	72fb      	strb	r3, [r7, #11]
          break;
 8007b9a:	e03b      	b.n	8007c14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ba2:	695b      	ldr	r3, [r3, #20]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00b      	beq.n	8007bc0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bae:	695b      	ldr	r3, [r3, #20]
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	7c12      	ldrb	r2, [r2, #16]
 8007bb4:	f107 0108 	add.w	r1, r7, #8
 8007bb8:	4610      	mov	r0, r2
 8007bba:	4798      	blx	r3
 8007bbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bbe:	e029      	b.n	8007c14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bc0:	6839      	ldr	r1, [r7, #0]
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 fa2f 	bl	8008026 <USBD_CtlError>
            err++;
 8007bc8:	7afb      	ldrb	r3, [r7, #11]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	72fb      	strb	r3, [r7, #11]
          break;
 8007bce:	e021      	b.n	8007c14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bd6:	699b      	ldr	r3, [r3, #24]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d00b      	beq.n	8007bf4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007be2:	699b      	ldr	r3, [r3, #24]
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	7c12      	ldrb	r2, [r2, #16]
 8007be8:	f107 0108 	add.w	r1, r7, #8
 8007bec:	4610      	mov	r0, r2
 8007bee:	4798      	blx	r3
 8007bf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bf2:	e00f      	b.n	8007c14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bf4:	6839      	ldr	r1, [r7, #0]
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 fa15 	bl	8008026 <USBD_CtlError>
            err++;
 8007bfc:	7afb      	ldrb	r3, [r7, #11]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	72fb      	strb	r3, [r7, #11]
          break;
 8007c02:	e007      	b.n	8007c14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007c04:	6839      	ldr	r1, [r7, #0]
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fa0d 	bl	8008026 <USBD_CtlError>
          err++;
 8007c0c:	7afb      	ldrb	r3, [r7, #11]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007c12:	e038      	b.n	8007c86 <USBD_GetDescriptor+0x286>
 8007c14:	e037      	b.n	8007c86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	7c1b      	ldrb	r3, [r3, #16]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d109      	bne.n	8007c32 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c26:	f107 0208 	add.w	r2, r7, #8
 8007c2a:	4610      	mov	r0, r2
 8007c2c:	4798      	blx	r3
 8007c2e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c30:	e029      	b.n	8007c86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c32:	6839      	ldr	r1, [r7, #0]
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 f9f6 	bl	8008026 <USBD_CtlError>
        err++;
 8007c3a:	7afb      	ldrb	r3, [r7, #11]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	72fb      	strb	r3, [r7, #11]
      break;
 8007c40:	e021      	b.n	8007c86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	7c1b      	ldrb	r3, [r3, #16]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d10d      	bne.n	8007c66 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c52:	f107 0208 	add.w	r2, r7, #8
 8007c56:	4610      	mov	r0, r2
 8007c58:	4798      	blx	r3
 8007c5a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	2207      	movs	r2, #7
 8007c62:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c64:	e00f      	b.n	8007c86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c66:	6839      	ldr	r1, [r7, #0]
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f9dc 	bl	8008026 <USBD_CtlError>
        err++;
 8007c6e:	7afb      	ldrb	r3, [r7, #11]
 8007c70:	3301      	adds	r3, #1
 8007c72:	72fb      	strb	r3, [r7, #11]
      break;
 8007c74:	e007      	b.n	8007c86 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007c76:	6839      	ldr	r1, [r7, #0]
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f9d4 	bl	8008026 <USBD_CtlError>
      err++;
 8007c7e:	7afb      	ldrb	r3, [r7, #11]
 8007c80:	3301      	adds	r3, #1
 8007c82:	72fb      	strb	r3, [r7, #11]
      break;
 8007c84:	bf00      	nop
  }

  if (err != 0U)
 8007c86:	7afb      	ldrb	r3, [r7, #11]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d11c      	bne.n	8007cc6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007c8c:	893b      	ldrh	r3, [r7, #8]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d011      	beq.n	8007cb6 <USBD_GetDescriptor+0x2b6>
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	88db      	ldrh	r3, [r3, #6]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00d      	beq.n	8007cb6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	88da      	ldrh	r2, [r3, #6]
 8007c9e:	893b      	ldrh	r3, [r7, #8]
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	bf28      	it	cs
 8007ca4:	4613      	movcs	r3, r2
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007caa:	893b      	ldrh	r3, [r7, #8]
 8007cac:	461a      	mov	r2, r3
 8007cae:	68f9      	ldr	r1, [r7, #12]
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 fa22 	bl	80080fa <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	88db      	ldrh	r3, [r3, #6]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d104      	bne.n	8007cc8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 fa79 	bl	80081b6 <USBD_CtlSendStatus>
 8007cc4:	e000      	b.n	8007cc8 <USBD_GetDescriptor+0x2c8>
    return;
 8007cc6:	bf00      	nop
    }
  }
}
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop

08007cd0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	889b      	ldrh	r3, [r3, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d130      	bne.n	8007d44 <USBD_SetAddress+0x74>
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	88db      	ldrh	r3, [r3, #6]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d12c      	bne.n	8007d44 <USBD_SetAddress+0x74>
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	885b      	ldrh	r3, [r3, #2]
 8007cee:	2b7f      	cmp	r3, #127	; 0x7f
 8007cf0:	d828      	bhi.n	8007d44 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	885b      	ldrh	r3, [r3, #2]
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cfc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d04:	2b03      	cmp	r3, #3
 8007d06:	d104      	bne.n	8007d12 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007d08:	6839      	ldr	r1, [r7, #0]
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 f98b 	bl	8008026 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d10:	e01d      	b.n	8007d4e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	7bfa      	ldrb	r2, [r7, #15]
 8007d16:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007d1a:	7bfb      	ldrb	r3, [r7, #15]
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 fe22 	bl	8008968 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 fa46 	bl	80081b6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007d2a:	7bfb      	ldrb	r3, [r7, #15]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d004      	beq.n	8007d3a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2202      	movs	r2, #2
 8007d34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d38:	e009      	b.n	8007d4e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d42:	e004      	b.n	8007d4e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007d44:	6839      	ldr	r1, [r7, #0]
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 f96d 	bl	8008026 <USBD_CtlError>
  }
}
 8007d4c:	bf00      	nop
 8007d4e:	bf00      	nop
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
	...

08007d58 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	885b      	ldrh	r3, [r3, #2]
 8007d66:	b2da      	uxtb	r2, r3
 8007d68:	4b41      	ldr	r3, [pc, #260]	; (8007e70 <USBD_SetConfig+0x118>)
 8007d6a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007d6c:	4b40      	ldr	r3, [pc, #256]	; (8007e70 <USBD_SetConfig+0x118>)
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d904      	bls.n	8007d7e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007d74:	6839      	ldr	r1, [r7, #0]
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 f955 	bl	8008026 <USBD_CtlError>
 8007d7c:	e075      	b.n	8007e6a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d84:	2b02      	cmp	r3, #2
 8007d86:	d002      	beq.n	8007d8e <USBD_SetConfig+0x36>
 8007d88:	2b03      	cmp	r3, #3
 8007d8a:	d023      	beq.n	8007dd4 <USBD_SetConfig+0x7c>
 8007d8c:	e062      	b.n	8007e54 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007d8e:	4b38      	ldr	r3, [pc, #224]	; (8007e70 <USBD_SetConfig+0x118>)
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d01a      	beq.n	8007dcc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007d96:	4b36      	ldr	r3, [pc, #216]	; (8007e70 <USBD_SetConfig+0x118>)
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2203      	movs	r2, #3
 8007da4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007da8:	4b31      	ldr	r3, [pc, #196]	; (8007e70 <USBD_SetConfig+0x118>)
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	4619      	mov	r1, r3
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f7ff f9e8 	bl	8007184 <USBD_SetClassConfig>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b02      	cmp	r3, #2
 8007db8:	d104      	bne.n	8007dc4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007dba:	6839      	ldr	r1, [r7, #0]
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 f932 	bl	8008026 <USBD_CtlError>
            return;
 8007dc2:	e052      	b.n	8007e6a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 f9f6 	bl	80081b6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007dca:	e04e      	b.n	8007e6a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 f9f2 	bl	80081b6 <USBD_CtlSendStatus>
        break;
 8007dd2:	e04a      	b.n	8007e6a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007dd4:	4b26      	ldr	r3, [pc, #152]	; (8007e70 <USBD_SetConfig+0x118>)
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d112      	bne.n	8007e02 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2202      	movs	r2, #2
 8007de0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007de4:	4b22      	ldr	r3, [pc, #136]	; (8007e70 <USBD_SetConfig+0x118>)
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	461a      	mov	r2, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007dee:	4b20      	ldr	r3, [pc, #128]	; (8007e70 <USBD_SetConfig+0x118>)
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	4619      	mov	r1, r3
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f7ff f9e4 	bl	80071c2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 f9db 	bl	80081b6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007e00:	e033      	b.n	8007e6a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007e02:	4b1b      	ldr	r3, [pc, #108]	; (8007e70 <USBD_SetConfig+0x118>)
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	461a      	mov	r2, r3
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d01d      	beq.n	8007e4c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	4619      	mov	r1, r3
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f7ff f9d2 	bl	80071c2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007e1e:	4b14      	ldr	r3, [pc, #80]	; (8007e70 <USBD_SetConfig+0x118>)
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	461a      	mov	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007e28:	4b11      	ldr	r3, [pc, #68]	; (8007e70 <USBD_SetConfig+0x118>)
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f7ff f9a8 	bl	8007184 <USBD_SetClassConfig>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	d104      	bne.n	8007e44 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007e3a:	6839      	ldr	r1, [r7, #0]
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 f8f2 	bl	8008026 <USBD_CtlError>
            return;
 8007e42:	e012      	b.n	8007e6a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 f9b6 	bl	80081b6 <USBD_CtlSendStatus>
        break;
 8007e4a:	e00e      	b.n	8007e6a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 f9b2 	bl	80081b6 <USBD_CtlSendStatus>
        break;
 8007e52:	e00a      	b.n	8007e6a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007e54:	6839      	ldr	r1, [r7, #0]
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 f8e5 	bl	8008026 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007e5c:	4b04      	ldr	r3, [pc, #16]	; (8007e70 <USBD_SetConfig+0x118>)
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	4619      	mov	r1, r3
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f7ff f9ad 	bl	80071c2 <USBD_ClrClassConfig>
        break;
 8007e68:	bf00      	nop
    }
  }
}
 8007e6a:	3708      	adds	r7, #8
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	200002f1 	.word	0x200002f1

08007e74 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	88db      	ldrh	r3, [r3, #6]
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d004      	beq.n	8007e90 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007e86:	6839      	ldr	r1, [r7, #0]
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 f8cc 	bl	8008026 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007e8e:	e022      	b.n	8007ed6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	dc02      	bgt.n	8007ea0 <USBD_GetConfig+0x2c>
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	dc03      	bgt.n	8007ea6 <USBD_GetConfig+0x32>
 8007e9e:	e015      	b.n	8007ecc <USBD_GetConfig+0x58>
 8007ea0:	2b03      	cmp	r3, #3
 8007ea2:	d00b      	beq.n	8007ebc <USBD_GetConfig+0x48>
 8007ea4:	e012      	b.n	8007ecc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	3308      	adds	r3, #8
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 f920 	bl	80080fa <USBD_CtlSendData>
        break;
 8007eba:	e00c      	b.n	8007ed6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	3304      	adds	r3, #4
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 f918 	bl	80080fa <USBD_CtlSendData>
        break;
 8007eca:	e004      	b.n	8007ed6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007ecc:	6839      	ldr	r1, [r7, #0]
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f8a9 	bl	8008026 <USBD_CtlError>
        break;
 8007ed4:	bf00      	nop
}
 8007ed6:	bf00      	nop
 8007ed8:	3708      	adds	r7, #8
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b082      	sub	sp, #8
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
 8007ee6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eee:	3b01      	subs	r3, #1
 8007ef0:	2b02      	cmp	r3, #2
 8007ef2:	d81e      	bhi.n	8007f32 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	88db      	ldrh	r3, [r3, #6]
 8007ef8:	2b02      	cmp	r3, #2
 8007efa:	d004      	beq.n	8007f06 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007efc:	6839      	ldr	r1, [r7, #0]
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 f891 	bl	8008026 <USBD_CtlError>
        break;
 8007f04:	e01a      	b.n	8007f3c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d005      	beq.n	8007f22 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	f043 0202 	orr.w	r2, r3, #2
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	330c      	adds	r3, #12
 8007f26:	2202      	movs	r2, #2
 8007f28:	4619      	mov	r1, r3
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 f8e5 	bl	80080fa <USBD_CtlSendData>
      break;
 8007f30:	e004      	b.n	8007f3c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007f32:	6839      	ldr	r1, [r7, #0]
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f876 	bl	8008026 <USBD_CtlError>
      break;
 8007f3a:	bf00      	nop
  }
}
 8007f3c:	bf00      	nop
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	885b      	ldrh	r3, [r3, #2]
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d106      	bne.n	8007f64 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f929 	bl	80081b6 <USBD_CtlSendStatus>
  }
}
 8007f64:	bf00      	nop
 8007f66:	3708      	adds	r7, #8
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d80b      	bhi.n	8007f9a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	885b      	ldrh	r3, [r3, #2]
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d10c      	bne.n	8007fa4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f90f 	bl	80081b6 <USBD_CtlSendStatus>
      }
      break;
 8007f98:	e004      	b.n	8007fa4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007f9a:	6839      	ldr	r1, [r7, #0]
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 f842 	bl	8008026 <USBD_CtlError>
      break;
 8007fa2:	e000      	b.n	8007fa6 <USBD_ClrFeature+0x3a>
      break;
 8007fa4:	bf00      	nop
  }
}
 8007fa6:	bf00      	nop
 8007fa8:	3708      	adds	r7, #8
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}

08007fae <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007fae:	b480      	push	{r7}
 8007fb0:	b083      	sub	sp, #12
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
 8007fb6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	781a      	ldrb	r2, [r3, #0]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	785a      	ldrb	r2, [r3, #1]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	3302      	adds	r3, #2
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	b29a      	uxth	r2, r3
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	3303      	adds	r3, #3
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	021b      	lsls	r3, r3, #8
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	4413      	add	r3, r2
 8007fde:	b29a      	uxth	r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	3304      	adds	r3, #4
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	b29a      	uxth	r2, r3
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	3305      	adds	r3, #5
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	021b      	lsls	r3, r3, #8
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	4413      	add	r3, r2
 8007ffa:	b29a      	uxth	r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	3306      	adds	r3, #6
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	b29a      	uxth	r2, r3
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	3307      	adds	r3, #7
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	b29b      	uxth	r3, r3
 8008010:	021b      	lsls	r3, r3, #8
 8008012:	b29b      	uxth	r3, r3
 8008014:	4413      	add	r3, r2
 8008016:	b29a      	uxth	r2, r3
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	80da      	strh	r2, [r3, #6]

}
 800801c:	bf00      	nop
 800801e:	370c      	adds	r7, #12
 8008020:	46bd      	mov	sp, r7
 8008022:	bc80      	pop	{r7}
 8008024:	4770      	bx	lr

08008026 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008026:	b580      	push	{r7, lr}
 8008028:	b082      	sub	sp, #8
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
 800802e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008030:	2180      	movs	r1, #128	; 0x80
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 fc2e 	bl	8008894 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008038:	2100      	movs	r1, #0
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fc2a 	bl	8008894 <USBD_LL_StallEP>
}
 8008040:	bf00      	nop
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b086      	sub	sp, #24
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008054:	2300      	movs	r3, #0
 8008056:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d032      	beq.n	80080c4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800805e:	68f8      	ldr	r0, [r7, #12]
 8008060:	f000 f834 	bl	80080cc <USBD_GetLen>
 8008064:	4603      	mov	r3, r0
 8008066:	3301      	adds	r3, #1
 8008068:	b29b      	uxth	r3, r3
 800806a:	005b      	lsls	r3, r3, #1
 800806c:	b29a      	uxth	r2, r3
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008072:	7dfb      	ldrb	r3, [r7, #23]
 8008074:	1c5a      	adds	r2, r3, #1
 8008076:	75fa      	strb	r2, [r7, #23]
 8008078:	461a      	mov	r2, r3
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	4413      	add	r3, r2
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	7812      	ldrb	r2, [r2, #0]
 8008082:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008084:	7dfb      	ldrb	r3, [r7, #23]
 8008086:	1c5a      	adds	r2, r3, #1
 8008088:	75fa      	strb	r2, [r7, #23]
 800808a:	461a      	mov	r2, r3
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	4413      	add	r3, r2
 8008090:	2203      	movs	r2, #3
 8008092:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008094:	e012      	b.n	80080bc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	1c5a      	adds	r2, r3, #1
 800809a:	60fa      	str	r2, [r7, #12]
 800809c:	7dfa      	ldrb	r2, [r7, #23]
 800809e:	1c51      	adds	r1, r2, #1
 80080a0:	75f9      	strb	r1, [r7, #23]
 80080a2:	4611      	mov	r1, r2
 80080a4:	68ba      	ldr	r2, [r7, #8]
 80080a6:	440a      	add	r2, r1
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80080ac:	7dfb      	ldrb	r3, [r7, #23]
 80080ae:	1c5a      	adds	r2, r3, #1
 80080b0:	75fa      	strb	r2, [r7, #23]
 80080b2:	461a      	mov	r2, r3
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	4413      	add	r3, r2
 80080b8:	2200      	movs	r2, #0
 80080ba:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1e8      	bne.n	8008096 <USBD_GetString+0x4e>
    }
  }
}
 80080c4:	bf00      	nop
 80080c6:	3718      	adds	r7, #24
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b085      	sub	sp, #20
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80080d4:	2300      	movs	r3, #0
 80080d6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80080d8:	e005      	b.n	80080e6 <USBD_GetLen+0x1a>
  {
    len++;
 80080da:	7bfb      	ldrb	r3, [r7, #15]
 80080dc:	3301      	adds	r3, #1
 80080de:	73fb      	strb	r3, [r7, #15]
    buf++;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	3301      	adds	r3, #1
 80080e4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d1f5      	bne.n	80080da <USBD_GetLen+0xe>
  }

  return len;
 80080ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3714      	adds	r7, #20
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bc80      	pop	{r7}
 80080f8:	4770      	bx	lr

080080fa <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b084      	sub	sp, #16
 80080fe:	af00      	add	r7, sp, #0
 8008100:	60f8      	str	r0, [r7, #12]
 8008102:	60b9      	str	r1, [r7, #8]
 8008104:	4613      	mov	r3, r2
 8008106:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2202      	movs	r2, #2
 800810c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008110:	88fa      	ldrh	r2, [r7, #6]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008116:	88fa      	ldrh	r2, [r7, #6]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800811c:	88fb      	ldrh	r3, [r7, #6]
 800811e:	68ba      	ldr	r2, [r7, #8]
 8008120:	2100      	movs	r1, #0
 8008122:	68f8      	ldr	r0, [r7, #12]
 8008124:	f000 fc3f 	bl	80089a6 <USBD_LL_Transmit>

  return USBD_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008132:	b580      	push	{r7, lr}
 8008134:	b084      	sub	sp, #16
 8008136:	af00      	add	r7, sp, #0
 8008138:	60f8      	str	r0, [r7, #12]
 800813a:	60b9      	str	r1, [r7, #8]
 800813c:	4613      	mov	r3, r2
 800813e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008140:	88fb      	ldrh	r3, [r7, #6]
 8008142:	68ba      	ldr	r2, [r7, #8]
 8008144:	2100      	movs	r1, #0
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	f000 fc2d 	bl	80089a6 <USBD_LL_Transmit>

  return USBD_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3710      	adds	r7, #16
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b084      	sub	sp, #16
 800815a:	af00      	add	r7, sp, #0
 800815c:	60f8      	str	r0, [r7, #12]
 800815e:	60b9      	str	r1, [r7, #8]
 8008160:	4613      	mov	r3, r2
 8008162:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2203      	movs	r2, #3
 8008168:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800816c:	88fa      	ldrh	r2, [r7, #6]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008174:	88fa      	ldrh	r2, [r7, #6]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800817c:	88fb      	ldrh	r3, [r7, #6]
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	2100      	movs	r1, #0
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f000 fc32 	bl	80089ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b084      	sub	sp, #16
 8008196:	af00      	add	r7, sp, #0
 8008198:	60f8      	str	r0, [r7, #12]
 800819a:	60b9      	str	r1, [r7, #8]
 800819c:	4613      	mov	r3, r2
 800819e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80081a0:	88fb      	ldrh	r3, [r7, #6]
 80081a2:	68ba      	ldr	r2, [r7, #8]
 80081a4:	2100      	movs	r1, #0
 80081a6:	68f8      	ldr	r0, [r7, #12]
 80081a8:	f000 fc20 	bl	80089ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b082      	sub	sp, #8
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2204      	movs	r2, #4
 80081c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80081c6:	2300      	movs	r3, #0
 80081c8:	2200      	movs	r2, #0
 80081ca:	2100      	movs	r1, #0
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 fbea 	bl	80089a6 <USBD_LL_Transmit>

  return USBD_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3708      	adds	r7, #8
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b082      	sub	sp, #8
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2205      	movs	r2, #5
 80081e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081ec:	2300      	movs	r3, #0
 80081ee:	2200      	movs	r2, #0
 80081f0:	2100      	movs	r1, #0
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 fbfa 	bl	80089ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3708      	adds	r7, #8
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
	...

08008204 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008208:	2200      	movs	r2, #0
 800820a:	4912      	ldr	r1, [pc, #72]	; (8008254 <MX_USB_DEVICE_Init+0x50>)
 800820c:	4812      	ldr	r0, [pc, #72]	; (8008258 <MX_USB_DEVICE_Init+0x54>)
 800820e:	f7fe ff5f 	bl	80070d0 <USBD_Init>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d001      	beq.n	800821c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008218:	f7f8 f928 	bl	800046c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800821c:	490f      	ldr	r1, [pc, #60]	; (800825c <MX_USB_DEVICE_Init+0x58>)
 800821e:	480e      	ldr	r0, [pc, #56]	; (8008258 <MX_USB_DEVICE_Init+0x54>)
 8008220:	f7fe ff81 	bl	8007126 <USBD_RegisterClass>
 8008224:	4603      	mov	r3, r0
 8008226:	2b00      	cmp	r3, #0
 8008228:	d001      	beq.n	800822e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800822a:	f7f8 f91f 	bl	800046c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800822e:	490c      	ldr	r1, [pc, #48]	; (8008260 <MX_USB_DEVICE_Init+0x5c>)
 8008230:	4809      	ldr	r0, [pc, #36]	; (8008258 <MX_USB_DEVICE_Init+0x54>)
 8008232:	f7fe fee1 	bl	8006ff8 <USBD_CDC_RegisterInterface>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d001      	beq.n	8008240 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800823c:	f7f8 f916 	bl	800046c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008240:	4805      	ldr	r0, [pc, #20]	; (8008258 <MX_USB_DEVICE_Init+0x54>)
 8008242:	f7fe ff89 	bl	8007158 <USBD_Start>
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d001      	beq.n	8008250 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800824c:	f7f8 f90e 	bl	800046c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008250:	bf00      	nop
 8008252:	bd80      	pop	{r7, pc}
 8008254:	2000012c 	.word	0x2000012c
 8008258:	200005ac 	.word	0x200005ac
 800825c:	20000018 	.word	0x20000018
 8008260:	2000011c 	.word	0x2000011c

08008264 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008268:	2200      	movs	r2, #0
 800826a:	4905      	ldr	r1, [pc, #20]	; (8008280 <CDC_Init_FS+0x1c>)
 800826c:	4805      	ldr	r0, [pc, #20]	; (8008284 <CDC_Init_FS+0x20>)
 800826e:	f7fe fed9 	bl	8007024 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008272:	4905      	ldr	r1, [pc, #20]	; (8008288 <CDC_Init_FS+0x24>)
 8008274:	4803      	ldr	r0, [pc, #12]	; (8008284 <CDC_Init_FS+0x20>)
 8008276:	f7fe feee 	bl	8007056 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800827a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800827c:	4618      	mov	r0, r3
 800827e:	bd80      	pop	{r7, pc}
 8008280:	20000c58 	.word	0x20000c58
 8008284:	200005ac 	.word	0x200005ac
 8008288:	20000870 	.word	0x20000870

0800828c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800828c:	b480      	push	{r7}
 800828e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008290:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008292:	4618      	mov	r0, r3
 8008294:	46bd      	mov	sp, r7
 8008296:	bc80      	pop	{r7}
 8008298:	4770      	bx	lr
	...

0800829c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	4603      	mov	r3, r0
 80082a4:	6039      	str	r1, [r7, #0]
 80082a6:	71fb      	strb	r3, [r7, #7]
 80082a8:	4613      	mov	r3, r2
 80082aa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80082ac:	79fb      	ldrb	r3, [r7, #7]
 80082ae:	2b23      	cmp	r3, #35	; 0x23
 80082b0:	d84a      	bhi.n	8008348 <CDC_Control_FS+0xac>
 80082b2:	a201      	add	r2, pc, #4	; (adr r2, 80082b8 <CDC_Control_FS+0x1c>)
 80082b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b8:	08008349 	.word	0x08008349
 80082bc:	08008349 	.word	0x08008349
 80082c0:	08008349 	.word	0x08008349
 80082c4:	08008349 	.word	0x08008349
 80082c8:	08008349 	.word	0x08008349
 80082cc:	08008349 	.word	0x08008349
 80082d0:	08008349 	.word	0x08008349
 80082d4:	08008349 	.word	0x08008349
 80082d8:	08008349 	.word	0x08008349
 80082dc:	08008349 	.word	0x08008349
 80082e0:	08008349 	.word	0x08008349
 80082e4:	08008349 	.word	0x08008349
 80082e8:	08008349 	.word	0x08008349
 80082ec:	08008349 	.word	0x08008349
 80082f0:	08008349 	.word	0x08008349
 80082f4:	08008349 	.word	0x08008349
 80082f8:	08008349 	.word	0x08008349
 80082fc:	08008349 	.word	0x08008349
 8008300:	08008349 	.word	0x08008349
 8008304:	08008349 	.word	0x08008349
 8008308:	08008349 	.word	0x08008349
 800830c:	08008349 	.word	0x08008349
 8008310:	08008349 	.word	0x08008349
 8008314:	08008349 	.word	0x08008349
 8008318:	08008349 	.word	0x08008349
 800831c:	08008349 	.word	0x08008349
 8008320:	08008349 	.word	0x08008349
 8008324:	08008349 	.word	0x08008349
 8008328:	08008349 	.word	0x08008349
 800832c:	08008349 	.word	0x08008349
 8008330:	08008349 	.word	0x08008349
 8008334:	08008349 	.word	0x08008349
 8008338:	08008349 	.word	0x08008349
 800833c:	08008349 	.word	0x08008349
 8008340:	08008349 	.word	0x08008349
 8008344:	08008349 	.word	0x08008349
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008348:	bf00      	nop
  }

  return (USBD_OK);
 800834a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800834c:	4618      	mov	r0, r3
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	bc80      	pop	{r7}
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop

08008358 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008362:	6879      	ldr	r1, [r7, #4]
 8008364:	4805      	ldr	r0, [pc, #20]	; (800837c <CDC_Receive_FS+0x24>)
 8008366:	f7fe fe76 	bl	8007056 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800836a:	4804      	ldr	r0, [pc, #16]	; (800837c <CDC_Receive_FS+0x24>)
 800836c:	f7fe fe86 	bl	800707c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008370:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008372:	4618      	mov	r0, r3
 8008374:	3708      	adds	r7, #8
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	200005ac 	.word	0x200005ac

08008380 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	4603      	mov	r3, r0
 8008388:	6039      	str	r1, [r7, #0]
 800838a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	2212      	movs	r2, #18
 8008390:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008392:	4b03      	ldr	r3, [pc, #12]	; (80083a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008394:	4618      	mov	r0, r3
 8008396:	370c      	adds	r7, #12
 8008398:	46bd      	mov	sp, r7
 800839a:	bc80      	pop	{r7}
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop
 80083a0:	20000148 	.word	0x20000148

080083a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	4603      	mov	r3, r0
 80083ac:	6039      	str	r1, [r7, #0]
 80083ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	2204      	movs	r2, #4
 80083b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80083b6:	4b03      	ldr	r3, [pc, #12]	; (80083c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	bc80      	pop	{r7}
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop
 80083c4:	2000015c 	.word	0x2000015c

080083c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	4603      	mov	r3, r0
 80083d0:	6039      	str	r1, [r7, #0]
 80083d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80083d4:	79fb      	ldrb	r3, [r7, #7]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d105      	bne.n	80083e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80083da:	683a      	ldr	r2, [r7, #0]
 80083dc:	4907      	ldr	r1, [pc, #28]	; (80083fc <USBD_FS_ProductStrDescriptor+0x34>)
 80083de:	4808      	ldr	r0, [pc, #32]	; (8008400 <USBD_FS_ProductStrDescriptor+0x38>)
 80083e0:	f7ff fe32 	bl	8008048 <USBD_GetString>
 80083e4:	e004      	b.n	80083f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80083e6:	683a      	ldr	r2, [r7, #0]
 80083e8:	4904      	ldr	r1, [pc, #16]	; (80083fc <USBD_FS_ProductStrDescriptor+0x34>)
 80083ea:	4805      	ldr	r0, [pc, #20]	; (8008400 <USBD_FS_ProductStrDescriptor+0x38>)
 80083ec:	f7ff fe2c 	bl	8008048 <USBD_GetString>
  }
  return USBD_StrDesc;
 80083f0:	4b02      	ldr	r3, [pc, #8]	; (80083fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3708      	adds	r7, #8
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	20001040 	.word	0x20001040
 8008400:	08009c58 	.word	0x08009c58

08008404 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	4603      	mov	r3, r0
 800840c:	6039      	str	r1, [r7, #0]
 800840e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008410:	683a      	ldr	r2, [r7, #0]
 8008412:	4904      	ldr	r1, [pc, #16]	; (8008424 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008414:	4804      	ldr	r0, [pc, #16]	; (8008428 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008416:	f7ff fe17 	bl	8008048 <USBD_GetString>
  return USBD_StrDesc;
 800841a:	4b02      	ldr	r3, [pc, #8]	; (8008424 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800841c:	4618      	mov	r0, r3
 800841e:	3708      	adds	r7, #8
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}
 8008424:	20001040 	.word	0x20001040
 8008428:	08009c70 	.word	0x08009c70

0800842c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	4603      	mov	r3, r0
 8008434:	6039      	str	r1, [r7, #0]
 8008436:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	221a      	movs	r2, #26
 800843c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800843e:	f000 f843 	bl	80084c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008442:	4b02      	ldr	r3, [pc, #8]	; (800844c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008444:	4618      	mov	r0, r3
 8008446:	3708      	adds	r7, #8
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}
 800844c:	20000160 	.word	0x20000160

08008450 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
 8008456:	4603      	mov	r3, r0
 8008458:	6039      	str	r1, [r7, #0]
 800845a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800845c:	79fb      	ldrb	r3, [r7, #7]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d105      	bne.n	800846e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008462:	683a      	ldr	r2, [r7, #0]
 8008464:	4907      	ldr	r1, [pc, #28]	; (8008484 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008466:	4808      	ldr	r0, [pc, #32]	; (8008488 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008468:	f7ff fdee 	bl	8008048 <USBD_GetString>
 800846c:	e004      	b.n	8008478 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800846e:	683a      	ldr	r2, [r7, #0]
 8008470:	4904      	ldr	r1, [pc, #16]	; (8008484 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008472:	4805      	ldr	r0, [pc, #20]	; (8008488 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008474:	f7ff fde8 	bl	8008048 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008478:	4b02      	ldr	r3, [pc, #8]	; (8008484 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800847a:	4618      	mov	r0, r3
 800847c:	3708      	adds	r7, #8
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	20001040 	.word	0x20001040
 8008488:	08009c84 	.word	0x08009c84

0800848c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
 8008492:	4603      	mov	r3, r0
 8008494:	6039      	str	r1, [r7, #0]
 8008496:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008498:	79fb      	ldrb	r3, [r7, #7]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d105      	bne.n	80084aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800849e:	683a      	ldr	r2, [r7, #0]
 80084a0:	4907      	ldr	r1, [pc, #28]	; (80084c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80084a2:	4808      	ldr	r0, [pc, #32]	; (80084c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80084a4:	f7ff fdd0 	bl	8008048 <USBD_GetString>
 80084a8:	e004      	b.n	80084b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80084aa:	683a      	ldr	r2, [r7, #0]
 80084ac:	4904      	ldr	r1, [pc, #16]	; (80084c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80084ae:	4805      	ldr	r0, [pc, #20]	; (80084c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80084b0:	f7ff fdca 	bl	8008048 <USBD_GetString>
  }
  return USBD_StrDesc;
 80084b4:	4b02      	ldr	r3, [pc, #8]	; (80084c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3708      	adds	r7, #8
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	20001040 	.word	0x20001040
 80084c4:	08009c90 	.word	0x08009c90

080084c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80084ce:	4b0f      	ldr	r3, [pc, #60]	; (800850c <Get_SerialNum+0x44>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80084d4:	4b0e      	ldr	r3, [pc, #56]	; (8008510 <Get_SerialNum+0x48>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80084da:	4b0e      	ldr	r3, [pc, #56]	; (8008514 <Get_SerialNum+0x4c>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80084e0:	68fa      	ldr	r2, [r7, #12]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4413      	add	r3, r2
 80084e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d009      	beq.n	8008502 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80084ee:	2208      	movs	r2, #8
 80084f0:	4909      	ldr	r1, [pc, #36]	; (8008518 <Get_SerialNum+0x50>)
 80084f2:	68f8      	ldr	r0, [r7, #12]
 80084f4:	f000 f814 	bl	8008520 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80084f8:	2204      	movs	r2, #4
 80084fa:	4908      	ldr	r1, [pc, #32]	; (800851c <Get_SerialNum+0x54>)
 80084fc:	68b8      	ldr	r0, [r7, #8]
 80084fe:	f000 f80f 	bl	8008520 <IntToUnicode>
  }
}
 8008502:	bf00      	nop
 8008504:	3710      	adds	r7, #16
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	1ffff7e8 	.word	0x1ffff7e8
 8008510:	1ffff7ec 	.word	0x1ffff7ec
 8008514:	1ffff7f0 	.word	0x1ffff7f0
 8008518:	20000162 	.word	0x20000162
 800851c:	20000172 	.word	0x20000172

08008520 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008520:	b480      	push	{r7}
 8008522:	b087      	sub	sp, #28
 8008524:	af00      	add	r7, sp, #0
 8008526:	60f8      	str	r0, [r7, #12]
 8008528:	60b9      	str	r1, [r7, #8]
 800852a:	4613      	mov	r3, r2
 800852c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800852e:	2300      	movs	r3, #0
 8008530:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008532:	2300      	movs	r3, #0
 8008534:	75fb      	strb	r3, [r7, #23]
 8008536:	e027      	b.n	8008588 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	0f1b      	lsrs	r3, r3, #28
 800853c:	2b09      	cmp	r3, #9
 800853e:	d80b      	bhi.n	8008558 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	0f1b      	lsrs	r3, r3, #28
 8008544:	b2da      	uxtb	r2, r3
 8008546:	7dfb      	ldrb	r3, [r7, #23]
 8008548:	005b      	lsls	r3, r3, #1
 800854a:	4619      	mov	r1, r3
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	440b      	add	r3, r1
 8008550:	3230      	adds	r2, #48	; 0x30
 8008552:	b2d2      	uxtb	r2, r2
 8008554:	701a      	strb	r2, [r3, #0]
 8008556:	e00a      	b.n	800856e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	0f1b      	lsrs	r3, r3, #28
 800855c:	b2da      	uxtb	r2, r3
 800855e:	7dfb      	ldrb	r3, [r7, #23]
 8008560:	005b      	lsls	r3, r3, #1
 8008562:	4619      	mov	r1, r3
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	440b      	add	r3, r1
 8008568:	3237      	adds	r2, #55	; 0x37
 800856a:	b2d2      	uxtb	r2, r2
 800856c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	011b      	lsls	r3, r3, #4
 8008572:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008574:	7dfb      	ldrb	r3, [r7, #23]
 8008576:	005b      	lsls	r3, r3, #1
 8008578:	3301      	adds	r3, #1
 800857a:	68ba      	ldr	r2, [r7, #8]
 800857c:	4413      	add	r3, r2
 800857e:	2200      	movs	r2, #0
 8008580:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008582:	7dfb      	ldrb	r3, [r7, #23]
 8008584:	3301      	adds	r3, #1
 8008586:	75fb      	strb	r3, [r7, #23]
 8008588:	7dfa      	ldrb	r2, [r7, #23]
 800858a:	79fb      	ldrb	r3, [r7, #7]
 800858c:	429a      	cmp	r2, r3
 800858e:	d3d3      	bcc.n	8008538 <IntToUnicode+0x18>
  }
}
 8008590:	bf00      	nop
 8008592:	bf00      	nop
 8008594:	371c      	adds	r7, #28
 8008596:	46bd      	mov	sp, r7
 8008598:	bc80      	pop	{r7}
 800859a:	4770      	bx	lr

0800859c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a0d      	ldr	r2, [pc, #52]	; (80085e0 <HAL_PCD_MspInit+0x44>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d113      	bne.n	80085d6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80085ae:	4b0d      	ldr	r3, [pc, #52]	; (80085e4 <HAL_PCD_MspInit+0x48>)
 80085b0:	69db      	ldr	r3, [r3, #28]
 80085b2:	4a0c      	ldr	r2, [pc, #48]	; (80085e4 <HAL_PCD_MspInit+0x48>)
 80085b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80085b8:	61d3      	str	r3, [r2, #28]
 80085ba:	4b0a      	ldr	r3, [pc, #40]	; (80085e4 <HAL_PCD_MspInit+0x48>)
 80085bc:	69db      	ldr	r3, [r3, #28]
 80085be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085c2:	60fb      	str	r3, [r7, #12]
 80085c4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80085c6:	2200      	movs	r2, #0
 80085c8:	2100      	movs	r1, #0
 80085ca:	2014      	movs	r0, #20
 80085cc:	f7f8 fb2d 	bl	8000c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80085d0:	2014      	movs	r0, #20
 80085d2:	f7f8 fb46 	bl	8000c62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80085d6:	bf00      	nop
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	bf00      	nop
 80085e0:	40005c00 	.word	0x40005c00
 80085e4:	40021000 	.word	0x40021000

080085e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80085fc:	4619      	mov	r1, r3
 80085fe:	4610      	mov	r0, r2
 8008600:	f7fe fdf2 	bl	80071e8 <USBD_LL_SetupStage>
}
 8008604:	bf00      	nop
 8008606:	3708      	adds	r7, #8
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	460b      	mov	r3, r1
 8008616:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800861e:	78fa      	ldrb	r2, [r7, #3]
 8008620:	6879      	ldr	r1, [r7, #4]
 8008622:	4613      	mov	r3, r2
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	4413      	add	r3, r2
 8008628:	00db      	lsls	r3, r3, #3
 800862a:	440b      	add	r3, r1
 800862c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	78fb      	ldrb	r3, [r7, #3]
 8008634:	4619      	mov	r1, r3
 8008636:	f7fe fe24 	bl	8007282 <USBD_LL_DataOutStage>
}
 800863a:	bf00      	nop
 800863c:	3708      	adds	r7, #8
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b082      	sub	sp, #8
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
 800864a:	460b      	mov	r3, r1
 800864c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008654:	78fa      	ldrb	r2, [r7, #3]
 8008656:	6879      	ldr	r1, [r7, #4]
 8008658:	4613      	mov	r3, r2
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	4413      	add	r3, r2
 800865e:	00db      	lsls	r3, r3, #3
 8008660:	440b      	add	r3, r1
 8008662:	333c      	adds	r3, #60	; 0x3c
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	78fb      	ldrb	r3, [r7, #3]
 8008668:	4619      	mov	r1, r3
 800866a:	f7fe fe7b 	bl	8007364 <USBD_LL_DataInStage>
}
 800866e:	bf00      	nop
 8008670:	3708      	adds	r7, #8
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}

08008676 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b082      	sub	sp, #8
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008684:	4618      	mov	r0, r3
 8008686:	f7fe ff8b 	bl	80075a0 <USBD_LL_SOF>
}
 800868a:	bf00      	nop
 800868c:	3708      	adds	r7, #8
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}

08008692 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008692:	b580      	push	{r7, lr}
 8008694:	b084      	sub	sp, #16
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800869a:	2301      	movs	r3, #1
 800869c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	2b02      	cmp	r3, #2
 80086a4:	d001      	beq.n	80086aa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80086a6:	f7f7 fee1 	bl	800046c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80086b0:	7bfa      	ldrb	r2, [r7, #15]
 80086b2:	4611      	mov	r1, r2
 80086b4:	4618      	mov	r0, r3
 80086b6:	f7fe ff3b 	bl	8007530 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80086c0:	4618      	mov	r0, r3
 80086c2:	f7fe fef4 	bl	80074ae <USBD_LL_Reset>
}
 80086c6:	bf00      	nop
 80086c8:	3710      	adds	r7, #16
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
	...

080086d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80086de:	4618      	mov	r0, r3
 80086e0:	f7fe ff35 	bl	800754e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	699b      	ldr	r3, [r3, #24]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d005      	beq.n	80086f8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80086ec:	4b04      	ldr	r3, [pc, #16]	; (8008700 <HAL_PCD_SuspendCallback+0x30>)
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	4a03      	ldr	r2, [pc, #12]	; (8008700 <HAL_PCD_SuspendCallback+0x30>)
 80086f2:	f043 0306 	orr.w	r3, r3, #6
 80086f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80086f8:	bf00      	nop
 80086fa:	3708      	adds	r7, #8
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	e000ed00 	.word	0xe000ed00

08008704 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008712:	4618      	mov	r0, r3
 8008714:	f7fe ff2f 	bl	8007576 <USBD_LL_Resume>
}
 8008718:	bf00      	nop
 800871a:	3708      	adds	r7, #8
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008728:	4a28      	ldr	r2, [pc, #160]	; (80087cc <USBD_LL_Init+0xac>)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4a26      	ldr	r2, [pc, #152]	; (80087cc <USBD_LL_Init+0xac>)
 8008734:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008738:	4b24      	ldr	r3, [pc, #144]	; (80087cc <USBD_LL_Init+0xac>)
 800873a:	4a25      	ldr	r2, [pc, #148]	; (80087d0 <USBD_LL_Init+0xb0>)
 800873c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800873e:	4b23      	ldr	r3, [pc, #140]	; (80087cc <USBD_LL_Init+0xac>)
 8008740:	2208      	movs	r2, #8
 8008742:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008744:	4b21      	ldr	r3, [pc, #132]	; (80087cc <USBD_LL_Init+0xac>)
 8008746:	2202      	movs	r2, #2
 8008748:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800874a:	4b20      	ldr	r3, [pc, #128]	; (80087cc <USBD_LL_Init+0xac>)
 800874c:	2200      	movs	r2, #0
 800874e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008750:	4b1e      	ldr	r3, [pc, #120]	; (80087cc <USBD_LL_Init+0xac>)
 8008752:	2200      	movs	r2, #0
 8008754:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008756:	4b1d      	ldr	r3, [pc, #116]	; (80087cc <USBD_LL_Init+0xac>)
 8008758:	2200      	movs	r2, #0
 800875a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800875c:	481b      	ldr	r0, [pc, #108]	; (80087cc <USBD_LL_Init+0xac>)
 800875e:	f7f8 fe25 	bl	80013ac <HAL_PCD_Init>
 8008762:	4603      	mov	r3, r0
 8008764:	2b00      	cmp	r3, #0
 8008766:	d001      	beq.n	800876c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008768:	f7f7 fe80 	bl	800046c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008772:	2318      	movs	r3, #24
 8008774:	2200      	movs	r2, #0
 8008776:	2100      	movs	r1, #0
 8008778:	f7fa fa9b 	bl	8002cb2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008782:	2358      	movs	r3, #88	; 0x58
 8008784:	2200      	movs	r2, #0
 8008786:	2180      	movs	r1, #128	; 0x80
 8008788:	f7fa fa93 	bl	8002cb2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008792:	23c0      	movs	r3, #192	; 0xc0
 8008794:	2200      	movs	r2, #0
 8008796:	2181      	movs	r1, #129	; 0x81
 8008798:	f7fa fa8b 	bl	8002cb2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80087a2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80087a6:	2200      	movs	r2, #0
 80087a8:	2101      	movs	r1, #1
 80087aa:	f7fa fa82 	bl	8002cb2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80087b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087b8:	2200      	movs	r2, #0
 80087ba:	2182      	movs	r1, #130	; 0x82
 80087bc:	f7fa fa79 	bl	8002cb2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3708      	adds	r7, #8
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	20001240 	.word	0x20001240
 80087d0:	40005c00 	.word	0x40005c00

080087d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087dc:	2300      	movs	r3, #0
 80087de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087e0:	2300      	movs	r3, #0
 80087e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7f8 fee9 	bl	80015c2 <HAL_PCD_Start>
 80087f0:	4603      	mov	r3, r0
 80087f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087f4:	7bfb      	ldrb	r3, [r7, #15]
 80087f6:	4618      	mov	r0, r3
 80087f8:	f000 f94e 	bl	8008a98 <USBD_Get_USB_Status>
 80087fc:	4603      	mov	r3, r0
 80087fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008800:	7bbb      	ldrb	r3, [r7, #14]
}
 8008802:	4618      	mov	r0, r3
 8008804:	3710      	adds	r7, #16
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}

0800880a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800880a:	b580      	push	{r7, lr}
 800880c:	b084      	sub	sp, #16
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
 8008812:	4608      	mov	r0, r1
 8008814:	4611      	mov	r1, r2
 8008816:	461a      	mov	r2, r3
 8008818:	4603      	mov	r3, r0
 800881a:	70fb      	strb	r3, [r7, #3]
 800881c:	460b      	mov	r3, r1
 800881e:	70bb      	strb	r3, [r7, #2]
 8008820:	4613      	mov	r3, r2
 8008822:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008824:	2300      	movs	r3, #0
 8008826:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008828:	2300      	movs	r3, #0
 800882a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008832:	78bb      	ldrb	r3, [r7, #2]
 8008834:	883a      	ldrh	r2, [r7, #0]
 8008836:	78f9      	ldrb	r1, [r7, #3]
 8008838:	f7f9 f863 	bl	8001902 <HAL_PCD_EP_Open>
 800883c:	4603      	mov	r3, r0
 800883e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008840:	7bfb      	ldrb	r3, [r7, #15]
 8008842:	4618      	mov	r0, r3
 8008844:	f000 f928 	bl	8008a98 <USBD_Get_USB_Status>
 8008848:	4603      	mov	r3, r0
 800884a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800884c:	7bbb      	ldrb	r3, [r7, #14]
}
 800884e:	4618      	mov	r0, r3
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b084      	sub	sp, #16
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
 800885e:	460b      	mov	r3, r1
 8008860:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008862:	2300      	movs	r3, #0
 8008864:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008866:	2300      	movs	r3, #0
 8008868:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008870:	78fa      	ldrb	r2, [r7, #3]
 8008872:	4611      	mov	r1, r2
 8008874:	4618      	mov	r0, r3
 8008876:	f7f9 f8aa 	bl	80019ce <HAL_PCD_EP_Close>
 800887a:	4603      	mov	r3, r0
 800887c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800887e:	7bfb      	ldrb	r3, [r7, #15]
 8008880:	4618      	mov	r0, r3
 8008882:	f000 f909 	bl	8008a98 <USBD_Get_USB_Status>
 8008886:	4603      	mov	r3, r0
 8008888:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800888a:	7bbb      	ldrb	r3, [r7, #14]
}
 800888c:	4618      	mov	r0, r3
 800888e:	3710      	adds	r7, #16
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	460b      	mov	r3, r1
 800889e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088a0:	2300      	movs	r3, #0
 80088a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088a4:	2300      	movs	r3, #0
 80088a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088ae:	78fa      	ldrb	r2, [r7, #3]
 80088b0:	4611      	mov	r1, r2
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7f9 f96a 	bl	8001b8c <HAL_PCD_EP_SetStall>
 80088b8:	4603      	mov	r3, r0
 80088ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088bc:	7bfb      	ldrb	r3, [r7, #15]
 80088be:	4618      	mov	r0, r3
 80088c0:	f000 f8ea 	bl	8008a98 <USBD_Get_USB_Status>
 80088c4:	4603      	mov	r3, r0
 80088c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b084      	sub	sp, #16
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
 80088da:	460b      	mov	r3, r1
 80088dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088de:	2300      	movs	r3, #0
 80088e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088e2:	2300      	movs	r3, #0
 80088e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088ec:	78fa      	ldrb	r2, [r7, #3]
 80088ee:	4611      	mov	r1, r2
 80088f0:	4618      	mov	r0, r3
 80088f2:	f7f9 f9ab 	bl	8001c4c <HAL_PCD_EP_ClrStall>
 80088f6:	4603      	mov	r3, r0
 80088f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088fa:	7bfb      	ldrb	r3, [r7, #15]
 80088fc:	4618      	mov	r0, r3
 80088fe:	f000 f8cb 	bl	8008a98 <USBD_Get_USB_Status>
 8008902:	4603      	mov	r3, r0
 8008904:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008906:	7bbb      	ldrb	r3, [r7, #14]
}
 8008908:	4618      	mov	r0, r3
 800890a:	3710      	adds	r7, #16
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008910:	b480      	push	{r7}
 8008912:	b085      	sub	sp, #20
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	460b      	mov	r3, r1
 800891a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008922:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008924:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008928:	2b00      	cmp	r3, #0
 800892a:	da0c      	bge.n	8008946 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800892c:	78fb      	ldrb	r3, [r7, #3]
 800892e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008932:	68f9      	ldr	r1, [r7, #12]
 8008934:	1c5a      	adds	r2, r3, #1
 8008936:	4613      	mov	r3, r2
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	4413      	add	r3, r2
 800893c:	00db      	lsls	r3, r3, #3
 800893e:	440b      	add	r3, r1
 8008940:	3302      	adds	r3, #2
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	e00b      	b.n	800895e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008946:	78fb      	ldrb	r3, [r7, #3]
 8008948:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800894c:	68f9      	ldr	r1, [r7, #12]
 800894e:	4613      	mov	r3, r2
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	4413      	add	r3, r2
 8008954:	00db      	lsls	r3, r3, #3
 8008956:	440b      	add	r3, r1
 8008958:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800895c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800895e:	4618      	mov	r0, r3
 8008960:	3714      	adds	r7, #20
 8008962:	46bd      	mov	sp, r7
 8008964:	bc80      	pop	{r7}
 8008966:	4770      	bx	lr

08008968 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	460b      	mov	r3, r1
 8008972:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008974:	2300      	movs	r3, #0
 8008976:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008978:	2300      	movs	r3, #0
 800897a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008982:	78fa      	ldrb	r2, [r7, #3]
 8008984:	4611      	mov	r1, r2
 8008986:	4618      	mov	r0, r3
 8008988:	f7f8 ff96 	bl	80018b8 <HAL_PCD_SetAddress>
 800898c:	4603      	mov	r3, r0
 800898e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008990:	7bfb      	ldrb	r3, [r7, #15]
 8008992:	4618      	mov	r0, r3
 8008994:	f000 f880 	bl	8008a98 <USBD_Get_USB_Status>
 8008998:	4603      	mov	r3, r0
 800899a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800899c:	7bbb      	ldrb	r3, [r7, #14]
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3710      	adds	r7, #16
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b086      	sub	sp, #24
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	60f8      	str	r0, [r7, #12]
 80089ae:	607a      	str	r2, [r7, #4]
 80089b0:	461a      	mov	r2, r3
 80089b2:	460b      	mov	r3, r1
 80089b4:	72fb      	strb	r3, [r7, #11]
 80089b6:	4613      	mov	r3, r2
 80089b8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089ba:	2300      	movs	r3, #0
 80089bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089be:	2300      	movs	r3, #0
 80089c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80089c8:	893b      	ldrh	r3, [r7, #8]
 80089ca:	7af9      	ldrb	r1, [r7, #11]
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	f7f9 f89a 	bl	8001b06 <HAL_PCD_EP_Transmit>
 80089d2:	4603      	mov	r3, r0
 80089d4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089d6:	7dfb      	ldrb	r3, [r7, #23]
 80089d8:	4618      	mov	r0, r3
 80089da:	f000 f85d 	bl	8008a98 <USBD_Get_USB_Status>
 80089de:	4603      	mov	r3, r0
 80089e0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80089e2:	7dbb      	ldrb	r3, [r7, #22]
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3718      	adds	r7, #24
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b086      	sub	sp, #24
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	607a      	str	r2, [r7, #4]
 80089f6:	461a      	mov	r2, r3
 80089f8:	460b      	mov	r3, r1
 80089fa:	72fb      	strb	r3, [r7, #11]
 80089fc:	4613      	mov	r3, r2
 80089fe:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a00:	2300      	movs	r3, #0
 8008a02:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a04:	2300      	movs	r3, #0
 8008a06:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a0e:	893b      	ldrh	r3, [r7, #8]
 8008a10:	7af9      	ldrb	r1, [r7, #11]
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	f7f9 f823 	bl	8001a5e <HAL_PCD_EP_Receive>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a1c:	7dfb      	ldrb	r3, [r7, #23]
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f000 f83a 	bl	8008a98 <USBD_Get_USB_Status>
 8008a24:	4603      	mov	r3, r0
 8008a26:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a28:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3718      	adds	r7, #24
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b082      	sub	sp, #8
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
 8008a3a:	460b      	mov	r3, r1
 8008a3c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a44:	78fa      	ldrb	r2, [r7, #3]
 8008a46:	4611      	mov	r1, r2
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f7f9 f845 	bl	8001ad8 <HAL_PCD_EP_GetRxCount>
 8008a4e:	4603      	mov	r3, r0
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3708      	adds	r7, #8
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008a60:	4b02      	ldr	r3, [pc, #8]	; (8008a6c <USBD_static_malloc+0x14>)
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	370c      	adds	r7, #12
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bc80      	pop	{r7}
 8008a6a:	4770      	bx	lr
 8008a6c:	200002f4 	.word	0x200002f4

08008a70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]

}
 8008a78:	bf00      	nop
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bc80      	pop	{r7}
 8008a80:	4770      	bx	lr

08008a82 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a82:	b480      	push	{r7}
 8008a84:	b083      	sub	sp, #12
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008a8e:	bf00      	nop
 8008a90:	370c      	adds	r7, #12
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bc80      	pop	{r7}
 8008a96:	4770      	bx	lr

08008a98 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b085      	sub	sp, #20
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008aa6:	79fb      	ldrb	r3, [r7, #7]
 8008aa8:	2b03      	cmp	r3, #3
 8008aaa:	d817      	bhi.n	8008adc <USBD_Get_USB_Status+0x44>
 8008aac:	a201      	add	r2, pc, #4	; (adr r2, 8008ab4 <USBD_Get_USB_Status+0x1c>)
 8008aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab2:	bf00      	nop
 8008ab4:	08008ac5 	.word	0x08008ac5
 8008ab8:	08008acb 	.word	0x08008acb
 8008abc:	08008ad1 	.word	0x08008ad1
 8008ac0:	08008ad7 	.word	0x08008ad7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ac8:	e00b      	b.n	8008ae2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008aca:	2302      	movs	r3, #2
 8008acc:	73fb      	strb	r3, [r7, #15]
    break;
 8008ace:	e008      	b.n	8008ae2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ad4:	e005      	b.n	8008ae2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008ad6:	2302      	movs	r3, #2
 8008ad8:	73fb      	strb	r3, [r7, #15]
    break;
 8008ada:	e002      	b.n	8008ae2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008adc:	2302      	movs	r3, #2
 8008ade:	73fb      	strb	r3, [r7, #15]
    break;
 8008ae0:	bf00      	nop
  }
  return usb_status;
 8008ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3714      	adds	r7, #20
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bc80      	pop	{r7}
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop

08008af0 <__errno>:
 8008af0:	4b01      	ldr	r3, [pc, #4]	; (8008af8 <__errno+0x8>)
 8008af2:	6818      	ldr	r0, [r3, #0]
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop
 8008af8:	2000017c 	.word	0x2000017c

08008afc <__libc_init_array>:
 8008afc:	b570      	push	{r4, r5, r6, lr}
 8008afe:	2600      	movs	r6, #0
 8008b00:	4d0c      	ldr	r5, [pc, #48]	; (8008b34 <__libc_init_array+0x38>)
 8008b02:	4c0d      	ldr	r4, [pc, #52]	; (8008b38 <__libc_init_array+0x3c>)
 8008b04:	1b64      	subs	r4, r4, r5
 8008b06:	10a4      	asrs	r4, r4, #2
 8008b08:	42a6      	cmp	r6, r4
 8008b0a:	d109      	bne.n	8008b20 <__libc_init_array+0x24>
 8008b0c:	f001 f890 	bl	8009c30 <_init>
 8008b10:	2600      	movs	r6, #0
 8008b12:	4d0a      	ldr	r5, [pc, #40]	; (8008b3c <__libc_init_array+0x40>)
 8008b14:	4c0a      	ldr	r4, [pc, #40]	; (8008b40 <__libc_init_array+0x44>)
 8008b16:	1b64      	subs	r4, r4, r5
 8008b18:	10a4      	asrs	r4, r4, #2
 8008b1a:	42a6      	cmp	r6, r4
 8008b1c:	d105      	bne.n	8008b2a <__libc_init_array+0x2e>
 8008b1e:	bd70      	pop	{r4, r5, r6, pc}
 8008b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b24:	4798      	blx	r3
 8008b26:	3601      	adds	r6, #1
 8008b28:	e7ee      	b.n	8008b08 <__libc_init_array+0xc>
 8008b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b2e:	4798      	blx	r3
 8008b30:	3601      	adds	r6, #1
 8008b32:	e7f2      	b.n	8008b1a <__libc_init_array+0x1e>
 8008b34:	08009efc 	.word	0x08009efc
 8008b38:	08009efc 	.word	0x08009efc
 8008b3c:	08009efc 	.word	0x08009efc
 8008b40:	08009f00 	.word	0x08009f00

08008b44 <memset>:
 8008b44:	4603      	mov	r3, r0
 8008b46:	4402      	add	r2, r0
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d100      	bne.n	8008b4e <memset+0xa>
 8008b4c:	4770      	bx	lr
 8008b4e:	f803 1b01 	strb.w	r1, [r3], #1
 8008b52:	e7f9      	b.n	8008b48 <memset+0x4>

08008b54 <srand>:
 8008b54:	b538      	push	{r3, r4, r5, lr}
 8008b56:	4b10      	ldr	r3, [pc, #64]	; (8008b98 <srand+0x44>)
 8008b58:	4604      	mov	r4, r0
 8008b5a:	681d      	ldr	r5, [r3, #0]
 8008b5c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8008b5e:	b9b3      	cbnz	r3, 8008b8e <srand+0x3a>
 8008b60:	2018      	movs	r0, #24
 8008b62:	f000 f8c1 	bl	8008ce8 <malloc>
 8008b66:	4602      	mov	r2, r0
 8008b68:	63a8      	str	r0, [r5, #56]	; 0x38
 8008b6a:	b920      	cbnz	r0, 8008b76 <srand+0x22>
 8008b6c:	2142      	movs	r1, #66	; 0x42
 8008b6e:	4b0b      	ldr	r3, [pc, #44]	; (8008b9c <srand+0x48>)
 8008b70:	480b      	ldr	r0, [pc, #44]	; (8008ba0 <srand+0x4c>)
 8008b72:	f000 f877 	bl	8008c64 <__assert_func>
 8008b76:	490b      	ldr	r1, [pc, #44]	; (8008ba4 <srand+0x50>)
 8008b78:	4b0b      	ldr	r3, [pc, #44]	; (8008ba8 <srand+0x54>)
 8008b7a:	e9c0 1300 	strd	r1, r3, [r0]
 8008b7e:	4b0b      	ldr	r3, [pc, #44]	; (8008bac <srand+0x58>)
 8008b80:	2100      	movs	r1, #0
 8008b82:	6083      	str	r3, [r0, #8]
 8008b84:	230b      	movs	r3, #11
 8008b86:	8183      	strh	r3, [r0, #12]
 8008b88:	2001      	movs	r0, #1
 8008b8a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8008b92:	611c      	str	r4, [r3, #16]
 8008b94:	615a      	str	r2, [r3, #20]
 8008b96:	bd38      	pop	{r3, r4, r5, pc}
 8008b98:	2000017c 	.word	0x2000017c
 8008b9c:	08009db4 	.word	0x08009db4
 8008ba0:	08009dcb 	.word	0x08009dcb
 8008ba4:	abcd330e 	.word	0xabcd330e
 8008ba8:	e66d1234 	.word	0xe66d1234
 8008bac:	0005deec 	.word	0x0005deec

08008bb0 <rand>:
 8008bb0:	4b17      	ldr	r3, [pc, #92]	; (8008c10 <rand+0x60>)
 8008bb2:	b510      	push	{r4, lr}
 8008bb4:	681c      	ldr	r4, [r3, #0]
 8008bb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008bb8:	b9b3      	cbnz	r3, 8008be8 <rand+0x38>
 8008bba:	2018      	movs	r0, #24
 8008bbc:	f000 f894 	bl	8008ce8 <malloc>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	63a0      	str	r0, [r4, #56]	; 0x38
 8008bc4:	b920      	cbnz	r0, 8008bd0 <rand+0x20>
 8008bc6:	214e      	movs	r1, #78	; 0x4e
 8008bc8:	4b12      	ldr	r3, [pc, #72]	; (8008c14 <rand+0x64>)
 8008bca:	4813      	ldr	r0, [pc, #76]	; (8008c18 <rand+0x68>)
 8008bcc:	f000 f84a 	bl	8008c64 <__assert_func>
 8008bd0:	4912      	ldr	r1, [pc, #72]	; (8008c1c <rand+0x6c>)
 8008bd2:	4b13      	ldr	r3, [pc, #76]	; (8008c20 <rand+0x70>)
 8008bd4:	e9c0 1300 	strd	r1, r3, [r0]
 8008bd8:	4b12      	ldr	r3, [pc, #72]	; (8008c24 <rand+0x74>)
 8008bda:	2100      	movs	r1, #0
 8008bdc:	6083      	str	r3, [r0, #8]
 8008bde:	230b      	movs	r3, #11
 8008be0:	8183      	strh	r3, [r0, #12]
 8008be2:	2001      	movs	r0, #1
 8008be4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008be8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008bea:	480f      	ldr	r0, [pc, #60]	; (8008c28 <rand+0x78>)
 8008bec:	690a      	ldr	r2, [r1, #16]
 8008bee:	694b      	ldr	r3, [r1, #20]
 8008bf0:	4350      	muls	r0, r2
 8008bf2:	4c0e      	ldr	r4, [pc, #56]	; (8008c2c <rand+0x7c>)
 8008bf4:	fb04 0003 	mla	r0, r4, r3, r0
 8008bf8:	fba2 3404 	umull	r3, r4, r2, r4
 8008bfc:	1c5a      	adds	r2, r3, #1
 8008bfe:	4404      	add	r4, r0
 8008c00:	f144 0000 	adc.w	r0, r4, #0
 8008c04:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8008c08:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008c0c:	bd10      	pop	{r4, pc}
 8008c0e:	bf00      	nop
 8008c10:	2000017c 	.word	0x2000017c
 8008c14:	08009db4 	.word	0x08009db4
 8008c18:	08009dcb 	.word	0x08009dcb
 8008c1c:	abcd330e 	.word	0xabcd330e
 8008c20:	e66d1234 	.word	0xe66d1234
 8008c24:	0005deec 	.word	0x0005deec
 8008c28:	5851f42d 	.word	0x5851f42d
 8008c2c:	4c957f2d 	.word	0x4c957f2d

08008c30 <time>:
 8008c30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c32:	4b0b      	ldr	r3, [pc, #44]	; (8008c60 <time+0x30>)
 8008c34:	4604      	mov	r4, r0
 8008c36:	2200      	movs	r2, #0
 8008c38:	4669      	mov	r1, sp
 8008c3a:	6818      	ldr	r0, [r3, #0]
 8008c3c:	f000 f842 	bl	8008cc4 <_gettimeofday_r>
 8008c40:	2800      	cmp	r0, #0
 8008c42:	da05      	bge.n	8008c50 <time+0x20>
 8008c44:	f04f 32ff 	mov.w	r2, #4294967295
 8008c48:	f04f 33ff 	mov.w	r3, #4294967295
 8008c4c:	e9cd 2300 	strd	r2, r3, [sp]
 8008c50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c54:	b10c      	cbz	r4, 8008c5a <time+0x2a>
 8008c56:	e9c4 0100 	strd	r0, r1, [r4]
 8008c5a:	b004      	add	sp, #16
 8008c5c:	bd10      	pop	{r4, pc}
 8008c5e:	bf00      	nop
 8008c60:	2000017c 	.word	0x2000017c

08008c64 <__assert_func>:
 8008c64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c66:	4614      	mov	r4, r2
 8008c68:	461a      	mov	r2, r3
 8008c6a:	4b09      	ldr	r3, [pc, #36]	; (8008c90 <__assert_func+0x2c>)
 8008c6c:	4605      	mov	r5, r0
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	68d8      	ldr	r0, [r3, #12]
 8008c72:	b14c      	cbz	r4, 8008c88 <__assert_func+0x24>
 8008c74:	4b07      	ldr	r3, [pc, #28]	; (8008c94 <__assert_func+0x30>)
 8008c76:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c7a:	9100      	str	r1, [sp, #0]
 8008c7c:	462b      	mov	r3, r5
 8008c7e:	4906      	ldr	r1, [pc, #24]	; (8008c98 <__assert_func+0x34>)
 8008c80:	f000 f80e 	bl	8008ca0 <fiprintf>
 8008c84:	f000 fc9c 	bl	80095c0 <abort>
 8008c88:	4b04      	ldr	r3, [pc, #16]	; (8008c9c <__assert_func+0x38>)
 8008c8a:	461c      	mov	r4, r3
 8008c8c:	e7f3      	b.n	8008c76 <__assert_func+0x12>
 8008c8e:	bf00      	nop
 8008c90:	2000017c 	.word	0x2000017c
 8008c94:	08009e2a 	.word	0x08009e2a
 8008c98:	08009e37 	.word	0x08009e37
 8008c9c:	08009e65 	.word	0x08009e65

08008ca0 <fiprintf>:
 8008ca0:	b40e      	push	{r1, r2, r3}
 8008ca2:	b503      	push	{r0, r1, lr}
 8008ca4:	4601      	mov	r1, r0
 8008ca6:	ab03      	add	r3, sp, #12
 8008ca8:	4805      	ldr	r0, [pc, #20]	; (8008cc0 <fiprintf+0x20>)
 8008caa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cae:	6800      	ldr	r0, [r0, #0]
 8008cb0:	9301      	str	r3, [sp, #4]
 8008cb2:	f000 f8ef 	bl	8008e94 <_vfiprintf_r>
 8008cb6:	b002      	add	sp, #8
 8008cb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cbc:	b003      	add	sp, #12
 8008cbe:	4770      	bx	lr
 8008cc0:	2000017c 	.word	0x2000017c

08008cc4 <_gettimeofday_r>:
 8008cc4:	b538      	push	{r3, r4, r5, lr}
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	4d06      	ldr	r5, [pc, #24]	; (8008ce4 <_gettimeofday_r+0x20>)
 8008cca:	4604      	mov	r4, r0
 8008ccc:	4608      	mov	r0, r1
 8008cce:	4611      	mov	r1, r2
 8008cd0:	602b      	str	r3, [r5, #0]
 8008cd2:	f000 ffa5 	bl	8009c20 <_gettimeofday>
 8008cd6:	1c43      	adds	r3, r0, #1
 8008cd8:	d102      	bne.n	8008ce0 <_gettimeofday_r+0x1c>
 8008cda:	682b      	ldr	r3, [r5, #0]
 8008cdc:	b103      	cbz	r3, 8008ce0 <_gettimeofday_r+0x1c>
 8008cde:	6023      	str	r3, [r4, #0]
 8008ce0:	bd38      	pop	{r3, r4, r5, pc}
 8008ce2:	bf00      	nop
 8008ce4:	2000152c 	.word	0x2000152c

08008ce8 <malloc>:
 8008ce8:	4b02      	ldr	r3, [pc, #8]	; (8008cf4 <malloc+0xc>)
 8008cea:	4601      	mov	r1, r0
 8008cec:	6818      	ldr	r0, [r3, #0]
 8008cee:	f000 b84f 	b.w	8008d90 <_malloc_r>
 8008cf2:	bf00      	nop
 8008cf4:	2000017c 	.word	0x2000017c

08008cf8 <_free_r>:
 8008cf8:	b538      	push	{r3, r4, r5, lr}
 8008cfa:	4605      	mov	r5, r0
 8008cfc:	2900      	cmp	r1, #0
 8008cfe:	d043      	beq.n	8008d88 <_free_r+0x90>
 8008d00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d04:	1f0c      	subs	r4, r1, #4
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	bfb8      	it	lt
 8008d0a:	18e4      	addlt	r4, r4, r3
 8008d0c:	f000 fe8c 	bl	8009a28 <__malloc_lock>
 8008d10:	4a1e      	ldr	r2, [pc, #120]	; (8008d8c <_free_r+0x94>)
 8008d12:	6813      	ldr	r3, [r2, #0]
 8008d14:	4610      	mov	r0, r2
 8008d16:	b933      	cbnz	r3, 8008d26 <_free_r+0x2e>
 8008d18:	6063      	str	r3, [r4, #4]
 8008d1a:	6014      	str	r4, [r2, #0]
 8008d1c:	4628      	mov	r0, r5
 8008d1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d22:	f000 be87 	b.w	8009a34 <__malloc_unlock>
 8008d26:	42a3      	cmp	r3, r4
 8008d28:	d90a      	bls.n	8008d40 <_free_r+0x48>
 8008d2a:	6821      	ldr	r1, [r4, #0]
 8008d2c:	1862      	adds	r2, r4, r1
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	bf01      	itttt	eq
 8008d32:	681a      	ldreq	r2, [r3, #0]
 8008d34:	685b      	ldreq	r3, [r3, #4]
 8008d36:	1852      	addeq	r2, r2, r1
 8008d38:	6022      	streq	r2, [r4, #0]
 8008d3a:	6063      	str	r3, [r4, #4]
 8008d3c:	6004      	str	r4, [r0, #0]
 8008d3e:	e7ed      	b.n	8008d1c <_free_r+0x24>
 8008d40:	461a      	mov	r2, r3
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	b10b      	cbz	r3, 8008d4a <_free_r+0x52>
 8008d46:	42a3      	cmp	r3, r4
 8008d48:	d9fa      	bls.n	8008d40 <_free_r+0x48>
 8008d4a:	6811      	ldr	r1, [r2, #0]
 8008d4c:	1850      	adds	r0, r2, r1
 8008d4e:	42a0      	cmp	r0, r4
 8008d50:	d10b      	bne.n	8008d6a <_free_r+0x72>
 8008d52:	6820      	ldr	r0, [r4, #0]
 8008d54:	4401      	add	r1, r0
 8008d56:	1850      	adds	r0, r2, r1
 8008d58:	4283      	cmp	r3, r0
 8008d5a:	6011      	str	r1, [r2, #0]
 8008d5c:	d1de      	bne.n	8008d1c <_free_r+0x24>
 8008d5e:	6818      	ldr	r0, [r3, #0]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	4401      	add	r1, r0
 8008d64:	6011      	str	r1, [r2, #0]
 8008d66:	6053      	str	r3, [r2, #4]
 8008d68:	e7d8      	b.n	8008d1c <_free_r+0x24>
 8008d6a:	d902      	bls.n	8008d72 <_free_r+0x7a>
 8008d6c:	230c      	movs	r3, #12
 8008d6e:	602b      	str	r3, [r5, #0]
 8008d70:	e7d4      	b.n	8008d1c <_free_r+0x24>
 8008d72:	6820      	ldr	r0, [r4, #0]
 8008d74:	1821      	adds	r1, r4, r0
 8008d76:	428b      	cmp	r3, r1
 8008d78:	bf01      	itttt	eq
 8008d7a:	6819      	ldreq	r1, [r3, #0]
 8008d7c:	685b      	ldreq	r3, [r3, #4]
 8008d7e:	1809      	addeq	r1, r1, r0
 8008d80:	6021      	streq	r1, [r4, #0]
 8008d82:	6063      	str	r3, [r4, #4]
 8008d84:	6054      	str	r4, [r2, #4]
 8008d86:	e7c9      	b.n	8008d1c <_free_r+0x24>
 8008d88:	bd38      	pop	{r3, r4, r5, pc}
 8008d8a:	bf00      	nop
 8008d8c:	20000514 	.word	0x20000514

08008d90 <_malloc_r>:
 8008d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d92:	1ccd      	adds	r5, r1, #3
 8008d94:	f025 0503 	bic.w	r5, r5, #3
 8008d98:	3508      	adds	r5, #8
 8008d9a:	2d0c      	cmp	r5, #12
 8008d9c:	bf38      	it	cc
 8008d9e:	250c      	movcc	r5, #12
 8008da0:	2d00      	cmp	r5, #0
 8008da2:	4606      	mov	r6, r0
 8008da4:	db01      	blt.n	8008daa <_malloc_r+0x1a>
 8008da6:	42a9      	cmp	r1, r5
 8008da8:	d903      	bls.n	8008db2 <_malloc_r+0x22>
 8008daa:	230c      	movs	r3, #12
 8008dac:	6033      	str	r3, [r6, #0]
 8008dae:	2000      	movs	r0, #0
 8008db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008db2:	f000 fe39 	bl	8009a28 <__malloc_lock>
 8008db6:	4921      	ldr	r1, [pc, #132]	; (8008e3c <_malloc_r+0xac>)
 8008db8:	680a      	ldr	r2, [r1, #0]
 8008dba:	4614      	mov	r4, r2
 8008dbc:	b99c      	cbnz	r4, 8008de6 <_malloc_r+0x56>
 8008dbe:	4f20      	ldr	r7, [pc, #128]	; (8008e40 <_malloc_r+0xb0>)
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	b923      	cbnz	r3, 8008dce <_malloc_r+0x3e>
 8008dc4:	4621      	mov	r1, r4
 8008dc6:	4630      	mov	r0, r6
 8008dc8:	f000 fb2a 	bl	8009420 <_sbrk_r>
 8008dcc:	6038      	str	r0, [r7, #0]
 8008dce:	4629      	mov	r1, r5
 8008dd0:	4630      	mov	r0, r6
 8008dd2:	f000 fb25 	bl	8009420 <_sbrk_r>
 8008dd6:	1c43      	adds	r3, r0, #1
 8008dd8:	d123      	bne.n	8008e22 <_malloc_r+0x92>
 8008dda:	230c      	movs	r3, #12
 8008ddc:	4630      	mov	r0, r6
 8008dde:	6033      	str	r3, [r6, #0]
 8008de0:	f000 fe28 	bl	8009a34 <__malloc_unlock>
 8008de4:	e7e3      	b.n	8008dae <_malloc_r+0x1e>
 8008de6:	6823      	ldr	r3, [r4, #0]
 8008de8:	1b5b      	subs	r3, r3, r5
 8008dea:	d417      	bmi.n	8008e1c <_malloc_r+0x8c>
 8008dec:	2b0b      	cmp	r3, #11
 8008dee:	d903      	bls.n	8008df8 <_malloc_r+0x68>
 8008df0:	6023      	str	r3, [r4, #0]
 8008df2:	441c      	add	r4, r3
 8008df4:	6025      	str	r5, [r4, #0]
 8008df6:	e004      	b.n	8008e02 <_malloc_r+0x72>
 8008df8:	6863      	ldr	r3, [r4, #4]
 8008dfa:	42a2      	cmp	r2, r4
 8008dfc:	bf0c      	ite	eq
 8008dfe:	600b      	streq	r3, [r1, #0]
 8008e00:	6053      	strne	r3, [r2, #4]
 8008e02:	4630      	mov	r0, r6
 8008e04:	f000 fe16 	bl	8009a34 <__malloc_unlock>
 8008e08:	f104 000b 	add.w	r0, r4, #11
 8008e0c:	1d23      	adds	r3, r4, #4
 8008e0e:	f020 0007 	bic.w	r0, r0, #7
 8008e12:	1ac2      	subs	r2, r0, r3
 8008e14:	d0cc      	beq.n	8008db0 <_malloc_r+0x20>
 8008e16:	1a1b      	subs	r3, r3, r0
 8008e18:	50a3      	str	r3, [r4, r2]
 8008e1a:	e7c9      	b.n	8008db0 <_malloc_r+0x20>
 8008e1c:	4622      	mov	r2, r4
 8008e1e:	6864      	ldr	r4, [r4, #4]
 8008e20:	e7cc      	b.n	8008dbc <_malloc_r+0x2c>
 8008e22:	1cc4      	adds	r4, r0, #3
 8008e24:	f024 0403 	bic.w	r4, r4, #3
 8008e28:	42a0      	cmp	r0, r4
 8008e2a:	d0e3      	beq.n	8008df4 <_malloc_r+0x64>
 8008e2c:	1a21      	subs	r1, r4, r0
 8008e2e:	4630      	mov	r0, r6
 8008e30:	f000 faf6 	bl	8009420 <_sbrk_r>
 8008e34:	3001      	adds	r0, #1
 8008e36:	d1dd      	bne.n	8008df4 <_malloc_r+0x64>
 8008e38:	e7cf      	b.n	8008dda <_malloc_r+0x4a>
 8008e3a:	bf00      	nop
 8008e3c:	20000514 	.word	0x20000514
 8008e40:	20000518 	.word	0x20000518

08008e44 <__sfputc_r>:
 8008e44:	6893      	ldr	r3, [r2, #8]
 8008e46:	b410      	push	{r4}
 8008e48:	3b01      	subs	r3, #1
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	6093      	str	r3, [r2, #8]
 8008e4e:	da07      	bge.n	8008e60 <__sfputc_r+0x1c>
 8008e50:	6994      	ldr	r4, [r2, #24]
 8008e52:	42a3      	cmp	r3, r4
 8008e54:	db01      	blt.n	8008e5a <__sfputc_r+0x16>
 8008e56:	290a      	cmp	r1, #10
 8008e58:	d102      	bne.n	8008e60 <__sfputc_r+0x1c>
 8008e5a:	bc10      	pop	{r4}
 8008e5c:	f000 baf0 	b.w	8009440 <__swbuf_r>
 8008e60:	6813      	ldr	r3, [r2, #0]
 8008e62:	1c58      	adds	r0, r3, #1
 8008e64:	6010      	str	r0, [r2, #0]
 8008e66:	7019      	strb	r1, [r3, #0]
 8008e68:	4608      	mov	r0, r1
 8008e6a:	bc10      	pop	{r4}
 8008e6c:	4770      	bx	lr

08008e6e <__sfputs_r>:
 8008e6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e70:	4606      	mov	r6, r0
 8008e72:	460f      	mov	r7, r1
 8008e74:	4614      	mov	r4, r2
 8008e76:	18d5      	adds	r5, r2, r3
 8008e78:	42ac      	cmp	r4, r5
 8008e7a:	d101      	bne.n	8008e80 <__sfputs_r+0x12>
 8008e7c:	2000      	movs	r0, #0
 8008e7e:	e007      	b.n	8008e90 <__sfputs_r+0x22>
 8008e80:	463a      	mov	r2, r7
 8008e82:	4630      	mov	r0, r6
 8008e84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e88:	f7ff ffdc 	bl	8008e44 <__sfputc_r>
 8008e8c:	1c43      	adds	r3, r0, #1
 8008e8e:	d1f3      	bne.n	8008e78 <__sfputs_r+0xa>
 8008e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008e94 <_vfiprintf_r>:
 8008e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e98:	460d      	mov	r5, r1
 8008e9a:	4614      	mov	r4, r2
 8008e9c:	4698      	mov	r8, r3
 8008e9e:	4606      	mov	r6, r0
 8008ea0:	b09d      	sub	sp, #116	; 0x74
 8008ea2:	b118      	cbz	r0, 8008eac <_vfiprintf_r+0x18>
 8008ea4:	6983      	ldr	r3, [r0, #24]
 8008ea6:	b90b      	cbnz	r3, 8008eac <_vfiprintf_r+0x18>
 8008ea8:	f000 fcac 	bl	8009804 <__sinit>
 8008eac:	4b89      	ldr	r3, [pc, #548]	; (80090d4 <_vfiprintf_r+0x240>)
 8008eae:	429d      	cmp	r5, r3
 8008eb0:	d11b      	bne.n	8008eea <_vfiprintf_r+0x56>
 8008eb2:	6875      	ldr	r5, [r6, #4]
 8008eb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008eb6:	07d9      	lsls	r1, r3, #31
 8008eb8:	d405      	bmi.n	8008ec6 <_vfiprintf_r+0x32>
 8008eba:	89ab      	ldrh	r3, [r5, #12]
 8008ebc:	059a      	lsls	r2, r3, #22
 8008ebe:	d402      	bmi.n	8008ec6 <_vfiprintf_r+0x32>
 8008ec0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ec2:	f000 fd3d 	bl	8009940 <__retarget_lock_acquire_recursive>
 8008ec6:	89ab      	ldrh	r3, [r5, #12]
 8008ec8:	071b      	lsls	r3, r3, #28
 8008eca:	d501      	bpl.n	8008ed0 <_vfiprintf_r+0x3c>
 8008ecc:	692b      	ldr	r3, [r5, #16]
 8008ece:	b9eb      	cbnz	r3, 8008f0c <_vfiprintf_r+0x78>
 8008ed0:	4629      	mov	r1, r5
 8008ed2:	4630      	mov	r0, r6
 8008ed4:	f000 fb06 	bl	80094e4 <__swsetup_r>
 8008ed8:	b1c0      	cbz	r0, 8008f0c <_vfiprintf_r+0x78>
 8008eda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008edc:	07dc      	lsls	r4, r3, #31
 8008ede:	d50e      	bpl.n	8008efe <_vfiprintf_r+0x6a>
 8008ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee4:	b01d      	add	sp, #116	; 0x74
 8008ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eea:	4b7b      	ldr	r3, [pc, #492]	; (80090d8 <_vfiprintf_r+0x244>)
 8008eec:	429d      	cmp	r5, r3
 8008eee:	d101      	bne.n	8008ef4 <_vfiprintf_r+0x60>
 8008ef0:	68b5      	ldr	r5, [r6, #8]
 8008ef2:	e7df      	b.n	8008eb4 <_vfiprintf_r+0x20>
 8008ef4:	4b79      	ldr	r3, [pc, #484]	; (80090dc <_vfiprintf_r+0x248>)
 8008ef6:	429d      	cmp	r5, r3
 8008ef8:	bf08      	it	eq
 8008efa:	68f5      	ldreq	r5, [r6, #12]
 8008efc:	e7da      	b.n	8008eb4 <_vfiprintf_r+0x20>
 8008efe:	89ab      	ldrh	r3, [r5, #12]
 8008f00:	0598      	lsls	r0, r3, #22
 8008f02:	d4ed      	bmi.n	8008ee0 <_vfiprintf_r+0x4c>
 8008f04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f06:	f000 fd1c 	bl	8009942 <__retarget_lock_release_recursive>
 8008f0a:	e7e9      	b.n	8008ee0 <_vfiprintf_r+0x4c>
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f10:	2320      	movs	r3, #32
 8008f12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f16:	2330      	movs	r3, #48	; 0x30
 8008f18:	f04f 0901 	mov.w	r9, #1
 8008f1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f20:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80090e0 <_vfiprintf_r+0x24c>
 8008f24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f28:	4623      	mov	r3, r4
 8008f2a:	469a      	mov	sl, r3
 8008f2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f30:	b10a      	cbz	r2, 8008f36 <_vfiprintf_r+0xa2>
 8008f32:	2a25      	cmp	r2, #37	; 0x25
 8008f34:	d1f9      	bne.n	8008f2a <_vfiprintf_r+0x96>
 8008f36:	ebba 0b04 	subs.w	fp, sl, r4
 8008f3a:	d00b      	beq.n	8008f54 <_vfiprintf_r+0xc0>
 8008f3c:	465b      	mov	r3, fp
 8008f3e:	4622      	mov	r2, r4
 8008f40:	4629      	mov	r1, r5
 8008f42:	4630      	mov	r0, r6
 8008f44:	f7ff ff93 	bl	8008e6e <__sfputs_r>
 8008f48:	3001      	adds	r0, #1
 8008f4a:	f000 80aa 	beq.w	80090a2 <_vfiprintf_r+0x20e>
 8008f4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f50:	445a      	add	r2, fp
 8008f52:	9209      	str	r2, [sp, #36]	; 0x24
 8008f54:	f89a 3000 	ldrb.w	r3, [sl]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	f000 80a2 	beq.w	80090a2 <_vfiprintf_r+0x20e>
 8008f5e:	2300      	movs	r3, #0
 8008f60:	f04f 32ff 	mov.w	r2, #4294967295
 8008f64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f68:	f10a 0a01 	add.w	sl, sl, #1
 8008f6c:	9304      	str	r3, [sp, #16]
 8008f6e:	9307      	str	r3, [sp, #28]
 8008f70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f74:	931a      	str	r3, [sp, #104]	; 0x68
 8008f76:	4654      	mov	r4, sl
 8008f78:	2205      	movs	r2, #5
 8008f7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f7e:	4858      	ldr	r0, [pc, #352]	; (80090e0 <_vfiprintf_r+0x24c>)
 8008f80:	f000 fd44 	bl	8009a0c <memchr>
 8008f84:	9a04      	ldr	r2, [sp, #16]
 8008f86:	b9d8      	cbnz	r0, 8008fc0 <_vfiprintf_r+0x12c>
 8008f88:	06d1      	lsls	r1, r2, #27
 8008f8a:	bf44      	itt	mi
 8008f8c:	2320      	movmi	r3, #32
 8008f8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f92:	0713      	lsls	r3, r2, #28
 8008f94:	bf44      	itt	mi
 8008f96:	232b      	movmi	r3, #43	; 0x2b
 8008f98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f9c:	f89a 3000 	ldrb.w	r3, [sl]
 8008fa0:	2b2a      	cmp	r3, #42	; 0x2a
 8008fa2:	d015      	beq.n	8008fd0 <_vfiprintf_r+0x13c>
 8008fa4:	4654      	mov	r4, sl
 8008fa6:	2000      	movs	r0, #0
 8008fa8:	f04f 0c0a 	mov.w	ip, #10
 8008fac:	9a07      	ldr	r2, [sp, #28]
 8008fae:	4621      	mov	r1, r4
 8008fb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fb4:	3b30      	subs	r3, #48	; 0x30
 8008fb6:	2b09      	cmp	r3, #9
 8008fb8:	d94e      	bls.n	8009058 <_vfiprintf_r+0x1c4>
 8008fba:	b1b0      	cbz	r0, 8008fea <_vfiprintf_r+0x156>
 8008fbc:	9207      	str	r2, [sp, #28]
 8008fbe:	e014      	b.n	8008fea <_vfiprintf_r+0x156>
 8008fc0:	eba0 0308 	sub.w	r3, r0, r8
 8008fc4:	fa09 f303 	lsl.w	r3, r9, r3
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	46a2      	mov	sl, r4
 8008fcc:	9304      	str	r3, [sp, #16]
 8008fce:	e7d2      	b.n	8008f76 <_vfiprintf_r+0xe2>
 8008fd0:	9b03      	ldr	r3, [sp, #12]
 8008fd2:	1d19      	adds	r1, r3, #4
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	9103      	str	r1, [sp, #12]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	bfbb      	ittet	lt
 8008fdc:	425b      	neglt	r3, r3
 8008fde:	f042 0202 	orrlt.w	r2, r2, #2
 8008fe2:	9307      	strge	r3, [sp, #28]
 8008fe4:	9307      	strlt	r3, [sp, #28]
 8008fe6:	bfb8      	it	lt
 8008fe8:	9204      	strlt	r2, [sp, #16]
 8008fea:	7823      	ldrb	r3, [r4, #0]
 8008fec:	2b2e      	cmp	r3, #46	; 0x2e
 8008fee:	d10c      	bne.n	800900a <_vfiprintf_r+0x176>
 8008ff0:	7863      	ldrb	r3, [r4, #1]
 8008ff2:	2b2a      	cmp	r3, #42	; 0x2a
 8008ff4:	d135      	bne.n	8009062 <_vfiprintf_r+0x1ce>
 8008ff6:	9b03      	ldr	r3, [sp, #12]
 8008ff8:	3402      	adds	r4, #2
 8008ffa:	1d1a      	adds	r2, r3, #4
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	9203      	str	r2, [sp, #12]
 8009000:	2b00      	cmp	r3, #0
 8009002:	bfb8      	it	lt
 8009004:	f04f 33ff 	movlt.w	r3, #4294967295
 8009008:	9305      	str	r3, [sp, #20]
 800900a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80090f0 <_vfiprintf_r+0x25c>
 800900e:	2203      	movs	r2, #3
 8009010:	4650      	mov	r0, sl
 8009012:	7821      	ldrb	r1, [r4, #0]
 8009014:	f000 fcfa 	bl	8009a0c <memchr>
 8009018:	b140      	cbz	r0, 800902c <_vfiprintf_r+0x198>
 800901a:	2340      	movs	r3, #64	; 0x40
 800901c:	eba0 000a 	sub.w	r0, r0, sl
 8009020:	fa03 f000 	lsl.w	r0, r3, r0
 8009024:	9b04      	ldr	r3, [sp, #16]
 8009026:	3401      	adds	r4, #1
 8009028:	4303      	orrs	r3, r0
 800902a:	9304      	str	r3, [sp, #16]
 800902c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009030:	2206      	movs	r2, #6
 8009032:	482c      	ldr	r0, [pc, #176]	; (80090e4 <_vfiprintf_r+0x250>)
 8009034:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009038:	f000 fce8 	bl	8009a0c <memchr>
 800903c:	2800      	cmp	r0, #0
 800903e:	d03f      	beq.n	80090c0 <_vfiprintf_r+0x22c>
 8009040:	4b29      	ldr	r3, [pc, #164]	; (80090e8 <_vfiprintf_r+0x254>)
 8009042:	bb1b      	cbnz	r3, 800908c <_vfiprintf_r+0x1f8>
 8009044:	9b03      	ldr	r3, [sp, #12]
 8009046:	3307      	adds	r3, #7
 8009048:	f023 0307 	bic.w	r3, r3, #7
 800904c:	3308      	adds	r3, #8
 800904e:	9303      	str	r3, [sp, #12]
 8009050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009052:	443b      	add	r3, r7
 8009054:	9309      	str	r3, [sp, #36]	; 0x24
 8009056:	e767      	b.n	8008f28 <_vfiprintf_r+0x94>
 8009058:	460c      	mov	r4, r1
 800905a:	2001      	movs	r0, #1
 800905c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009060:	e7a5      	b.n	8008fae <_vfiprintf_r+0x11a>
 8009062:	2300      	movs	r3, #0
 8009064:	f04f 0c0a 	mov.w	ip, #10
 8009068:	4619      	mov	r1, r3
 800906a:	3401      	adds	r4, #1
 800906c:	9305      	str	r3, [sp, #20]
 800906e:	4620      	mov	r0, r4
 8009070:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009074:	3a30      	subs	r2, #48	; 0x30
 8009076:	2a09      	cmp	r2, #9
 8009078:	d903      	bls.n	8009082 <_vfiprintf_r+0x1ee>
 800907a:	2b00      	cmp	r3, #0
 800907c:	d0c5      	beq.n	800900a <_vfiprintf_r+0x176>
 800907e:	9105      	str	r1, [sp, #20]
 8009080:	e7c3      	b.n	800900a <_vfiprintf_r+0x176>
 8009082:	4604      	mov	r4, r0
 8009084:	2301      	movs	r3, #1
 8009086:	fb0c 2101 	mla	r1, ip, r1, r2
 800908a:	e7f0      	b.n	800906e <_vfiprintf_r+0x1da>
 800908c:	ab03      	add	r3, sp, #12
 800908e:	9300      	str	r3, [sp, #0]
 8009090:	462a      	mov	r2, r5
 8009092:	4630      	mov	r0, r6
 8009094:	4b15      	ldr	r3, [pc, #84]	; (80090ec <_vfiprintf_r+0x258>)
 8009096:	a904      	add	r1, sp, #16
 8009098:	f3af 8000 	nop.w
 800909c:	4607      	mov	r7, r0
 800909e:	1c78      	adds	r0, r7, #1
 80090a0:	d1d6      	bne.n	8009050 <_vfiprintf_r+0x1bc>
 80090a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090a4:	07d9      	lsls	r1, r3, #31
 80090a6:	d405      	bmi.n	80090b4 <_vfiprintf_r+0x220>
 80090a8:	89ab      	ldrh	r3, [r5, #12]
 80090aa:	059a      	lsls	r2, r3, #22
 80090ac:	d402      	bmi.n	80090b4 <_vfiprintf_r+0x220>
 80090ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090b0:	f000 fc47 	bl	8009942 <__retarget_lock_release_recursive>
 80090b4:	89ab      	ldrh	r3, [r5, #12]
 80090b6:	065b      	lsls	r3, r3, #25
 80090b8:	f53f af12 	bmi.w	8008ee0 <_vfiprintf_r+0x4c>
 80090bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090be:	e711      	b.n	8008ee4 <_vfiprintf_r+0x50>
 80090c0:	ab03      	add	r3, sp, #12
 80090c2:	9300      	str	r3, [sp, #0]
 80090c4:	462a      	mov	r2, r5
 80090c6:	4630      	mov	r0, r6
 80090c8:	4b08      	ldr	r3, [pc, #32]	; (80090ec <_vfiprintf_r+0x258>)
 80090ca:	a904      	add	r1, sp, #16
 80090cc:	f000 f882 	bl	80091d4 <_printf_i>
 80090d0:	e7e4      	b.n	800909c <_vfiprintf_r+0x208>
 80090d2:	bf00      	nop
 80090d4:	08009ebc 	.word	0x08009ebc
 80090d8:	08009edc 	.word	0x08009edc
 80090dc:	08009e9c 	.word	0x08009e9c
 80090e0:	08009e66 	.word	0x08009e66
 80090e4:	08009e70 	.word	0x08009e70
 80090e8:	00000000 	.word	0x00000000
 80090ec:	08008e6f 	.word	0x08008e6f
 80090f0:	08009e6c 	.word	0x08009e6c

080090f4 <_printf_common>:
 80090f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090f8:	4616      	mov	r6, r2
 80090fa:	4699      	mov	r9, r3
 80090fc:	688a      	ldr	r2, [r1, #8]
 80090fe:	690b      	ldr	r3, [r1, #16]
 8009100:	4607      	mov	r7, r0
 8009102:	4293      	cmp	r3, r2
 8009104:	bfb8      	it	lt
 8009106:	4613      	movlt	r3, r2
 8009108:	6033      	str	r3, [r6, #0]
 800910a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800910e:	460c      	mov	r4, r1
 8009110:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009114:	b10a      	cbz	r2, 800911a <_printf_common+0x26>
 8009116:	3301      	adds	r3, #1
 8009118:	6033      	str	r3, [r6, #0]
 800911a:	6823      	ldr	r3, [r4, #0]
 800911c:	0699      	lsls	r1, r3, #26
 800911e:	bf42      	ittt	mi
 8009120:	6833      	ldrmi	r3, [r6, #0]
 8009122:	3302      	addmi	r3, #2
 8009124:	6033      	strmi	r3, [r6, #0]
 8009126:	6825      	ldr	r5, [r4, #0]
 8009128:	f015 0506 	ands.w	r5, r5, #6
 800912c:	d106      	bne.n	800913c <_printf_common+0x48>
 800912e:	f104 0a19 	add.w	sl, r4, #25
 8009132:	68e3      	ldr	r3, [r4, #12]
 8009134:	6832      	ldr	r2, [r6, #0]
 8009136:	1a9b      	subs	r3, r3, r2
 8009138:	42ab      	cmp	r3, r5
 800913a:	dc28      	bgt.n	800918e <_printf_common+0x9a>
 800913c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009140:	1e13      	subs	r3, r2, #0
 8009142:	6822      	ldr	r2, [r4, #0]
 8009144:	bf18      	it	ne
 8009146:	2301      	movne	r3, #1
 8009148:	0692      	lsls	r2, r2, #26
 800914a:	d42d      	bmi.n	80091a8 <_printf_common+0xb4>
 800914c:	4649      	mov	r1, r9
 800914e:	4638      	mov	r0, r7
 8009150:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009154:	47c0      	blx	r8
 8009156:	3001      	adds	r0, #1
 8009158:	d020      	beq.n	800919c <_printf_common+0xa8>
 800915a:	6823      	ldr	r3, [r4, #0]
 800915c:	68e5      	ldr	r5, [r4, #12]
 800915e:	f003 0306 	and.w	r3, r3, #6
 8009162:	2b04      	cmp	r3, #4
 8009164:	bf18      	it	ne
 8009166:	2500      	movne	r5, #0
 8009168:	6832      	ldr	r2, [r6, #0]
 800916a:	f04f 0600 	mov.w	r6, #0
 800916e:	68a3      	ldr	r3, [r4, #8]
 8009170:	bf08      	it	eq
 8009172:	1aad      	subeq	r5, r5, r2
 8009174:	6922      	ldr	r2, [r4, #16]
 8009176:	bf08      	it	eq
 8009178:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800917c:	4293      	cmp	r3, r2
 800917e:	bfc4      	itt	gt
 8009180:	1a9b      	subgt	r3, r3, r2
 8009182:	18ed      	addgt	r5, r5, r3
 8009184:	341a      	adds	r4, #26
 8009186:	42b5      	cmp	r5, r6
 8009188:	d11a      	bne.n	80091c0 <_printf_common+0xcc>
 800918a:	2000      	movs	r0, #0
 800918c:	e008      	b.n	80091a0 <_printf_common+0xac>
 800918e:	2301      	movs	r3, #1
 8009190:	4652      	mov	r2, sl
 8009192:	4649      	mov	r1, r9
 8009194:	4638      	mov	r0, r7
 8009196:	47c0      	blx	r8
 8009198:	3001      	adds	r0, #1
 800919a:	d103      	bne.n	80091a4 <_printf_common+0xb0>
 800919c:	f04f 30ff 	mov.w	r0, #4294967295
 80091a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091a4:	3501      	adds	r5, #1
 80091a6:	e7c4      	b.n	8009132 <_printf_common+0x3e>
 80091a8:	2030      	movs	r0, #48	; 0x30
 80091aa:	18e1      	adds	r1, r4, r3
 80091ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091b0:	1c5a      	adds	r2, r3, #1
 80091b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091b6:	4422      	add	r2, r4
 80091b8:	3302      	adds	r3, #2
 80091ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091be:	e7c5      	b.n	800914c <_printf_common+0x58>
 80091c0:	2301      	movs	r3, #1
 80091c2:	4622      	mov	r2, r4
 80091c4:	4649      	mov	r1, r9
 80091c6:	4638      	mov	r0, r7
 80091c8:	47c0      	blx	r8
 80091ca:	3001      	adds	r0, #1
 80091cc:	d0e6      	beq.n	800919c <_printf_common+0xa8>
 80091ce:	3601      	adds	r6, #1
 80091d0:	e7d9      	b.n	8009186 <_printf_common+0x92>
	...

080091d4 <_printf_i>:
 80091d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091d8:	460c      	mov	r4, r1
 80091da:	7e27      	ldrb	r7, [r4, #24]
 80091dc:	4691      	mov	r9, r2
 80091de:	2f78      	cmp	r7, #120	; 0x78
 80091e0:	4680      	mov	r8, r0
 80091e2:	469a      	mov	sl, r3
 80091e4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80091e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091ea:	d807      	bhi.n	80091fc <_printf_i+0x28>
 80091ec:	2f62      	cmp	r7, #98	; 0x62
 80091ee:	d80a      	bhi.n	8009206 <_printf_i+0x32>
 80091f0:	2f00      	cmp	r7, #0
 80091f2:	f000 80d9 	beq.w	80093a8 <_printf_i+0x1d4>
 80091f6:	2f58      	cmp	r7, #88	; 0x58
 80091f8:	f000 80a4 	beq.w	8009344 <_printf_i+0x170>
 80091fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009200:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009204:	e03a      	b.n	800927c <_printf_i+0xa8>
 8009206:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800920a:	2b15      	cmp	r3, #21
 800920c:	d8f6      	bhi.n	80091fc <_printf_i+0x28>
 800920e:	a001      	add	r0, pc, #4	; (adr r0, 8009214 <_printf_i+0x40>)
 8009210:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009214:	0800926d 	.word	0x0800926d
 8009218:	08009281 	.word	0x08009281
 800921c:	080091fd 	.word	0x080091fd
 8009220:	080091fd 	.word	0x080091fd
 8009224:	080091fd 	.word	0x080091fd
 8009228:	080091fd 	.word	0x080091fd
 800922c:	08009281 	.word	0x08009281
 8009230:	080091fd 	.word	0x080091fd
 8009234:	080091fd 	.word	0x080091fd
 8009238:	080091fd 	.word	0x080091fd
 800923c:	080091fd 	.word	0x080091fd
 8009240:	0800938f 	.word	0x0800938f
 8009244:	080092b1 	.word	0x080092b1
 8009248:	08009371 	.word	0x08009371
 800924c:	080091fd 	.word	0x080091fd
 8009250:	080091fd 	.word	0x080091fd
 8009254:	080093b1 	.word	0x080093b1
 8009258:	080091fd 	.word	0x080091fd
 800925c:	080092b1 	.word	0x080092b1
 8009260:	080091fd 	.word	0x080091fd
 8009264:	080091fd 	.word	0x080091fd
 8009268:	08009379 	.word	0x08009379
 800926c:	680b      	ldr	r3, [r1, #0]
 800926e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009272:	1d1a      	adds	r2, r3, #4
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	600a      	str	r2, [r1, #0]
 8009278:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800927c:	2301      	movs	r3, #1
 800927e:	e0a4      	b.n	80093ca <_printf_i+0x1f6>
 8009280:	6825      	ldr	r5, [r4, #0]
 8009282:	6808      	ldr	r0, [r1, #0]
 8009284:	062e      	lsls	r6, r5, #24
 8009286:	f100 0304 	add.w	r3, r0, #4
 800928a:	d50a      	bpl.n	80092a2 <_printf_i+0xce>
 800928c:	6805      	ldr	r5, [r0, #0]
 800928e:	600b      	str	r3, [r1, #0]
 8009290:	2d00      	cmp	r5, #0
 8009292:	da03      	bge.n	800929c <_printf_i+0xc8>
 8009294:	232d      	movs	r3, #45	; 0x2d
 8009296:	426d      	negs	r5, r5
 8009298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800929c:	230a      	movs	r3, #10
 800929e:	485e      	ldr	r0, [pc, #376]	; (8009418 <_printf_i+0x244>)
 80092a0:	e019      	b.n	80092d6 <_printf_i+0x102>
 80092a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80092a6:	6805      	ldr	r5, [r0, #0]
 80092a8:	600b      	str	r3, [r1, #0]
 80092aa:	bf18      	it	ne
 80092ac:	b22d      	sxthne	r5, r5
 80092ae:	e7ef      	b.n	8009290 <_printf_i+0xbc>
 80092b0:	680b      	ldr	r3, [r1, #0]
 80092b2:	6825      	ldr	r5, [r4, #0]
 80092b4:	1d18      	adds	r0, r3, #4
 80092b6:	6008      	str	r0, [r1, #0]
 80092b8:	0628      	lsls	r0, r5, #24
 80092ba:	d501      	bpl.n	80092c0 <_printf_i+0xec>
 80092bc:	681d      	ldr	r5, [r3, #0]
 80092be:	e002      	b.n	80092c6 <_printf_i+0xf2>
 80092c0:	0669      	lsls	r1, r5, #25
 80092c2:	d5fb      	bpl.n	80092bc <_printf_i+0xe8>
 80092c4:	881d      	ldrh	r5, [r3, #0]
 80092c6:	2f6f      	cmp	r7, #111	; 0x6f
 80092c8:	bf0c      	ite	eq
 80092ca:	2308      	moveq	r3, #8
 80092cc:	230a      	movne	r3, #10
 80092ce:	4852      	ldr	r0, [pc, #328]	; (8009418 <_printf_i+0x244>)
 80092d0:	2100      	movs	r1, #0
 80092d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80092d6:	6866      	ldr	r6, [r4, #4]
 80092d8:	2e00      	cmp	r6, #0
 80092da:	bfa8      	it	ge
 80092dc:	6821      	ldrge	r1, [r4, #0]
 80092de:	60a6      	str	r6, [r4, #8]
 80092e0:	bfa4      	itt	ge
 80092e2:	f021 0104 	bicge.w	r1, r1, #4
 80092e6:	6021      	strge	r1, [r4, #0]
 80092e8:	b90d      	cbnz	r5, 80092ee <_printf_i+0x11a>
 80092ea:	2e00      	cmp	r6, #0
 80092ec:	d04d      	beq.n	800938a <_printf_i+0x1b6>
 80092ee:	4616      	mov	r6, r2
 80092f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80092f4:	fb03 5711 	mls	r7, r3, r1, r5
 80092f8:	5dc7      	ldrb	r7, [r0, r7]
 80092fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80092fe:	462f      	mov	r7, r5
 8009300:	42bb      	cmp	r3, r7
 8009302:	460d      	mov	r5, r1
 8009304:	d9f4      	bls.n	80092f0 <_printf_i+0x11c>
 8009306:	2b08      	cmp	r3, #8
 8009308:	d10b      	bne.n	8009322 <_printf_i+0x14e>
 800930a:	6823      	ldr	r3, [r4, #0]
 800930c:	07df      	lsls	r7, r3, #31
 800930e:	d508      	bpl.n	8009322 <_printf_i+0x14e>
 8009310:	6923      	ldr	r3, [r4, #16]
 8009312:	6861      	ldr	r1, [r4, #4]
 8009314:	4299      	cmp	r1, r3
 8009316:	bfde      	ittt	le
 8009318:	2330      	movle	r3, #48	; 0x30
 800931a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800931e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009322:	1b92      	subs	r2, r2, r6
 8009324:	6122      	str	r2, [r4, #16]
 8009326:	464b      	mov	r3, r9
 8009328:	4621      	mov	r1, r4
 800932a:	4640      	mov	r0, r8
 800932c:	f8cd a000 	str.w	sl, [sp]
 8009330:	aa03      	add	r2, sp, #12
 8009332:	f7ff fedf 	bl	80090f4 <_printf_common>
 8009336:	3001      	adds	r0, #1
 8009338:	d14c      	bne.n	80093d4 <_printf_i+0x200>
 800933a:	f04f 30ff 	mov.w	r0, #4294967295
 800933e:	b004      	add	sp, #16
 8009340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009344:	4834      	ldr	r0, [pc, #208]	; (8009418 <_printf_i+0x244>)
 8009346:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800934a:	680e      	ldr	r6, [r1, #0]
 800934c:	6823      	ldr	r3, [r4, #0]
 800934e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009352:	061f      	lsls	r7, r3, #24
 8009354:	600e      	str	r6, [r1, #0]
 8009356:	d514      	bpl.n	8009382 <_printf_i+0x1ae>
 8009358:	07d9      	lsls	r1, r3, #31
 800935a:	bf44      	itt	mi
 800935c:	f043 0320 	orrmi.w	r3, r3, #32
 8009360:	6023      	strmi	r3, [r4, #0]
 8009362:	b91d      	cbnz	r5, 800936c <_printf_i+0x198>
 8009364:	6823      	ldr	r3, [r4, #0]
 8009366:	f023 0320 	bic.w	r3, r3, #32
 800936a:	6023      	str	r3, [r4, #0]
 800936c:	2310      	movs	r3, #16
 800936e:	e7af      	b.n	80092d0 <_printf_i+0xfc>
 8009370:	6823      	ldr	r3, [r4, #0]
 8009372:	f043 0320 	orr.w	r3, r3, #32
 8009376:	6023      	str	r3, [r4, #0]
 8009378:	2378      	movs	r3, #120	; 0x78
 800937a:	4828      	ldr	r0, [pc, #160]	; (800941c <_printf_i+0x248>)
 800937c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009380:	e7e3      	b.n	800934a <_printf_i+0x176>
 8009382:	065e      	lsls	r6, r3, #25
 8009384:	bf48      	it	mi
 8009386:	b2ad      	uxthmi	r5, r5
 8009388:	e7e6      	b.n	8009358 <_printf_i+0x184>
 800938a:	4616      	mov	r6, r2
 800938c:	e7bb      	b.n	8009306 <_printf_i+0x132>
 800938e:	680b      	ldr	r3, [r1, #0]
 8009390:	6826      	ldr	r6, [r4, #0]
 8009392:	1d1d      	adds	r5, r3, #4
 8009394:	6960      	ldr	r0, [r4, #20]
 8009396:	600d      	str	r5, [r1, #0]
 8009398:	0635      	lsls	r5, r6, #24
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	d501      	bpl.n	80093a2 <_printf_i+0x1ce>
 800939e:	6018      	str	r0, [r3, #0]
 80093a0:	e002      	b.n	80093a8 <_printf_i+0x1d4>
 80093a2:	0671      	lsls	r1, r6, #25
 80093a4:	d5fb      	bpl.n	800939e <_printf_i+0x1ca>
 80093a6:	8018      	strh	r0, [r3, #0]
 80093a8:	2300      	movs	r3, #0
 80093aa:	4616      	mov	r6, r2
 80093ac:	6123      	str	r3, [r4, #16]
 80093ae:	e7ba      	b.n	8009326 <_printf_i+0x152>
 80093b0:	680b      	ldr	r3, [r1, #0]
 80093b2:	1d1a      	adds	r2, r3, #4
 80093b4:	600a      	str	r2, [r1, #0]
 80093b6:	681e      	ldr	r6, [r3, #0]
 80093b8:	2100      	movs	r1, #0
 80093ba:	4630      	mov	r0, r6
 80093bc:	6862      	ldr	r2, [r4, #4]
 80093be:	f000 fb25 	bl	8009a0c <memchr>
 80093c2:	b108      	cbz	r0, 80093c8 <_printf_i+0x1f4>
 80093c4:	1b80      	subs	r0, r0, r6
 80093c6:	6060      	str	r0, [r4, #4]
 80093c8:	6863      	ldr	r3, [r4, #4]
 80093ca:	6123      	str	r3, [r4, #16]
 80093cc:	2300      	movs	r3, #0
 80093ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093d2:	e7a8      	b.n	8009326 <_printf_i+0x152>
 80093d4:	4632      	mov	r2, r6
 80093d6:	4649      	mov	r1, r9
 80093d8:	4640      	mov	r0, r8
 80093da:	6923      	ldr	r3, [r4, #16]
 80093dc:	47d0      	blx	sl
 80093de:	3001      	adds	r0, #1
 80093e0:	d0ab      	beq.n	800933a <_printf_i+0x166>
 80093e2:	6823      	ldr	r3, [r4, #0]
 80093e4:	079b      	lsls	r3, r3, #30
 80093e6:	d413      	bmi.n	8009410 <_printf_i+0x23c>
 80093e8:	68e0      	ldr	r0, [r4, #12]
 80093ea:	9b03      	ldr	r3, [sp, #12]
 80093ec:	4298      	cmp	r0, r3
 80093ee:	bfb8      	it	lt
 80093f0:	4618      	movlt	r0, r3
 80093f2:	e7a4      	b.n	800933e <_printf_i+0x16a>
 80093f4:	2301      	movs	r3, #1
 80093f6:	4632      	mov	r2, r6
 80093f8:	4649      	mov	r1, r9
 80093fa:	4640      	mov	r0, r8
 80093fc:	47d0      	blx	sl
 80093fe:	3001      	adds	r0, #1
 8009400:	d09b      	beq.n	800933a <_printf_i+0x166>
 8009402:	3501      	adds	r5, #1
 8009404:	68e3      	ldr	r3, [r4, #12]
 8009406:	9903      	ldr	r1, [sp, #12]
 8009408:	1a5b      	subs	r3, r3, r1
 800940a:	42ab      	cmp	r3, r5
 800940c:	dcf2      	bgt.n	80093f4 <_printf_i+0x220>
 800940e:	e7eb      	b.n	80093e8 <_printf_i+0x214>
 8009410:	2500      	movs	r5, #0
 8009412:	f104 0619 	add.w	r6, r4, #25
 8009416:	e7f5      	b.n	8009404 <_printf_i+0x230>
 8009418:	08009e77 	.word	0x08009e77
 800941c:	08009e88 	.word	0x08009e88

08009420 <_sbrk_r>:
 8009420:	b538      	push	{r3, r4, r5, lr}
 8009422:	2300      	movs	r3, #0
 8009424:	4d05      	ldr	r5, [pc, #20]	; (800943c <_sbrk_r+0x1c>)
 8009426:	4604      	mov	r4, r0
 8009428:	4608      	mov	r0, r1
 800942a:	602b      	str	r3, [r5, #0]
 800942c:	f7f7 f99e 	bl	800076c <_sbrk>
 8009430:	1c43      	adds	r3, r0, #1
 8009432:	d102      	bne.n	800943a <_sbrk_r+0x1a>
 8009434:	682b      	ldr	r3, [r5, #0]
 8009436:	b103      	cbz	r3, 800943a <_sbrk_r+0x1a>
 8009438:	6023      	str	r3, [r4, #0]
 800943a:	bd38      	pop	{r3, r4, r5, pc}
 800943c:	2000152c 	.word	0x2000152c

08009440 <__swbuf_r>:
 8009440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009442:	460e      	mov	r6, r1
 8009444:	4614      	mov	r4, r2
 8009446:	4605      	mov	r5, r0
 8009448:	b118      	cbz	r0, 8009452 <__swbuf_r+0x12>
 800944a:	6983      	ldr	r3, [r0, #24]
 800944c:	b90b      	cbnz	r3, 8009452 <__swbuf_r+0x12>
 800944e:	f000 f9d9 	bl	8009804 <__sinit>
 8009452:	4b21      	ldr	r3, [pc, #132]	; (80094d8 <__swbuf_r+0x98>)
 8009454:	429c      	cmp	r4, r3
 8009456:	d12b      	bne.n	80094b0 <__swbuf_r+0x70>
 8009458:	686c      	ldr	r4, [r5, #4]
 800945a:	69a3      	ldr	r3, [r4, #24]
 800945c:	60a3      	str	r3, [r4, #8]
 800945e:	89a3      	ldrh	r3, [r4, #12]
 8009460:	071a      	lsls	r2, r3, #28
 8009462:	d52f      	bpl.n	80094c4 <__swbuf_r+0x84>
 8009464:	6923      	ldr	r3, [r4, #16]
 8009466:	b36b      	cbz	r3, 80094c4 <__swbuf_r+0x84>
 8009468:	6923      	ldr	r3, [r4, #16]
 800946a:	6820      	ldr	r0, [r4, #0]
 800946c:	b2f6      	uxtb	r6, r6
 800946e:	1ac0      	subs	r0, r0, r3
 8009470:	6963      	ldr	r3, [r4, #20]
 8009472:	4637      	mov	r7, r6
 8009474:	4283      	cmp	r3, r0
 8009476:	dc04      	bgt.n	8009482 <__swbuf_r+0x42>
 8009478:	4621      	mov	r1, r4
 800947a:	4628      	mov	r0, r5
 800947c:	f000 f92e 	bl	80096dc <_fflush_r>
 8009480:	bb30      	cbnz	r0, 80094d0 <__swbuf_r+0x90>
 8009482:	68a3      	ldr	r3, [r4, #8]
 8009484:	3001      	adds	r0, #1
 8009486:	3b01      	subs	r3, #1
 8009488:	60a3      	str	r3, [r4, #8]
 800948a:	6823      	ldr	r3, [r4, #0]
 800948c:	1c5a      	adds	r2, r3, #1
 800948e:	6022      	str	r2, [r4, #0]
 8009490:	701e      	strb	r6, [r3, #0]
 8009492:	6963      	ldr	r3, [r4, #20]
 8009494:	4283      	cmp	r3, r0
 8009496:	d004      	beq.n	80094a2 <__swbuf_r+0x62>
 8009498:	89a3      	ldrh	r3, [r4, #12]
 800949a:	07db      	lsls	r3, r3, #31
 800949c:	d506      	bpl.n	80094ac <__swbuf_r+0x6c>
 800949e:	2e0a      	cmp	r6, #10
 80094a0:	d104      	bne.n	80094ac <__swbuf_r+0x6c>
 80094a2:	4621      	mov	r1, r4
 80094a4:	4628      	mov	r0, r5
 80094a6:	f000 f919 	bl	80096dc <_fflush_r>
 80094aa:	b988      	cbnz	r0, 80094d0 <__swbuf_r+0x90>
 80094ac:	4638      	mov	r0, r7
 80094ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094b0:	4b0a      	ldr	r3, [pc, #40]	; (80094dc <__swbuf_r+0x9c>)
 80094b2:	429c      	cmp	r4, r3
 80094b4:	d101      	bne.n	80094ba <__swbuf_r+0x7a>
 80094b6:	68ac      	ldr	r4, [r5, #8]
 80094b8:	e7cf      	b.n	800945a <__swbuf_r+0x1a>
 80094ba:	4b09      	ldr	r3, [pc, #36]	; (80094e0 <__swbuf_r+0xa0>)
 80094bc:	429c      	cmp	r4, r3
 80094be:	bf08      	it	eq
 80094c0:	68ec      	ldreq	r4, [r5, #12]
 80094c2:	e7ca      	b.n	800945a <__swbuf_r+0x1a>
 80094c4:	4621      	mov	r1, r4
 80094c6:	4628      	mov	r0, r5
 80094c8:	f000 f80c 	bl	80094e4 <__swsetup_r>
 80094cc:	2800      	cmp	r0, #0
 80094ce:	d0cb      	beq.n	8009468 <__swbuf_r+0x28>
 80094d0:	f04f 37ff 	mov.w	r7, #4294967295
 80094d4:	e7ea      	b.n	80094ac <__swbuf_r+0x6c>
 80094d6:	bf00      	nop
 80094d8:	08009ebc 	.word	0x08009ebc
 80094dc:	08009edc 	.word	0x08009edc
 80094e0:	08009e9c 	.word	0x08009e9c

080094e4 <__swsetup_r>:
 80094e4:	4b32      	ldr	r3, [pc, #200]	; (80095b0 <__swsetup_r+0xcc>)
 80094e6:	b570      	push	{r4, r5, r6, lr}
 80094e8:	681d      	ldr	r5, [r3, #0]
 80094ea:	4606      	mov	r6, r0
 80094ec:	460c      	mov	r4, r1
 80094ee:	b125      	cbz	r5, 80094fa <__swsetup_r+0x16>
 80094f0:	69ab      	ldr	r3, [r5, #24]
 80094f2:	b913      	cbnz	r3, 80094fa <__swsetup_r+0x16>
 80094f4:	4628      	mov	r0, r5
 80094f6:	f000 f985 	bl	8009804 <__sinit>
 80094fa:	4b2e      	ldr	r3, [pc, #184]	; (80095b4 <__swsetup_r+0xd0>)
 80094fc:	429c      	cmp	r4, r3
 80094fe:	d10f      	bne.n	8009520 <__swsetup_r+0x3c>
 8009500:	686c      	ldr	r4, [r5, #4]
 8009502:	89a3      	ldrh	r3, [r4, #12]
 8009504:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009508:	0719      	lsls	r1, r3, #28
 800950a:	d42c      	bmi.n	8009566 <__swsetup_r+0x82>
 800950c:	06dd      	lsls	r5, r3, #27
 800950e:	d411      	bmi.n	8009534 <__swsetup_r+0x50>
 8009510:	2309      	movs	r3, #9
 8009512:	6033      	str	r3, [r6, #0]
 8009514:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009518:	f04f 30ff 	mov.w	r0, #4294967295
 800951c:	81a3      	strh	r3, [r4, #12]
 800951e:	e03e      	b.n	800959e <__swsetup_r+0xba>
 8009520:	4b25      	ldr	r3, [pc, #148]	; (80095b8 <__swsetup_r+0xd4>)
 8009522:	429c      	cmp	r4, r3
 8009524:	d101      	bne.n	800952a <__swsetup_r+0x46>
 8009526:	68ac      	ldr	r4, [r5, #8]
 8009528:	e7eb      	b.n	8009502 <__swsetup_r+0x1e>
 800952a:	4b24      	ldr	r3, [pc, #144]	; (80095bc <__swsetup_r+0xd8>)
 800952c:	429c      	cmp	r4, r3
 800952e:	bf08      	it	eq
 8009530:	68ec      	ldreq	r4, [r5, #12]
 8009532:	e7e6      	b.n	8009502 <__swsetup_r+0x1e>
 8009534:	0758      	lsls	r0, r3, #29
 8009536:	d512      	bpl.n	800955e <__swsetup_r+0x7a>
 8009538:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800953a:	b141      	cbz	r1, 800954e <__swsetup_r+0x6a>
 800953c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009540:	4299      	cmp	r1, r3
 8009542:	d002      	beq.n	800954a <__swsetup_r+0x66>
 8009544:	4630      	mov	r0, r6
 8009546:	f7ff fbd7 	bl	8008cf8 <_free_r>
 800954a:	2300      	movs	r3, #0
 800954c:	6363      	str	r3, [r4, #52]	; 0x34
 800954e:	89a3      	ldrh	r3, [r4, #12]
 8009550:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009554:	81a3      	strh	r3, [r4, #12]
 8009556:	2300      	movs	r3, #0
 8009558:	6063      	str	r3, [r4, #4]
 800955a:	6923      	ldr	r3, [r4, #16]
 800955c:	6023      	str	r3, [r4, #0]
 800955e:	89a3      	ldrh	r3, [r4, #12]
 8009560:	f043 0308 	orr.w	r3, r3, #8
 8009564:	81a3      	strh	r3, [r4, #12]
 8009566:	6923      	ldr	r3, [r4, #16]
 8009568:	b94b      	cbnz	r3, 800957e <__swsetup_r+0x9a>
 800956a:	89a3      	ldrh	r3, [r4, #12]
 800956c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009574:	d003      	beq.n	800957e <__swsetup_r+0x9a>
 8009576:	4621      	mov	r1, r4
 8009578:	4630      	mov	r0, r6
 800957a:	f000 fa07 	bl	800998c <__smakebuf_r>
 800957e:	89a0      	ldrh	r0, [r4, #12]
 8009580:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009584:	f010 0301 	ands.w	r3, r0, #1
 8009588:	d00a      	beq.n	80095a0 <__swsetup_r+0xbc>
 800958a:	2300      	movs	r3, #0
 800958c:	60a3      	str	r3, [r4, #8]
 800958e:	6963      	ldr	r3, [r4, #20]
 8009590:	425b      	negs	r3, r3
 8009592:	61a3      	str	r3, [r4, #24]
 8009594:	6923      	ldr	r3, [r4, #16]
 8009596:	b943      	cbnz	r3, 80095aa <__swsetup_r+0xc6>
 8009598:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800959c:	d1ba      	bne.n	8009514 <__swsetup_r+0x30>
 800959e:	bd70      	pop	{r4, r5, r6, pc}
 80095a0:	0781      	lsls	r1, r0, #30
 80095a2:	bf58      	it	pl
 80095a4:	6963      	ldrpl	r3, [r4, #20]
 80095a6:	60a3      	str	r3, [r4, #8]
 80095a8:	e7f4      	b.n	8009594 <__swsetup_r+0xb0>
 80095aa:	2000      	movs	r0, #0
 80095ac:	e7f7      	b.n	800959e <__swsetup_r+0xba>
 80095ae:	bf00      	nop
 80095b0:	2000017c 	.word	0x2000017c
 80095b4:	08009ebc 	.word	0x08009ebc
 80095b8:	08009edc 	.word	0x08009edc
 80095bc:	08009e9c 	.word	0x08009e9c

080095c0 <abort>:
 80095c0:	2006      	movs	r0, #6
 80095c2:	b508      	push	{r3, lr}
 80095c4:	f000 fa64 	bl	8009a90 <raise>
 80095c8:	2001      	movs	r0, #1
 80095ca:	f7f7 f85c 	bl	8000686 <_exit>
	...

080095d0 <__sflush_r>:
 80095d0:	898a      	ldrh	r2, [r1, #12]
 80095d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095d6:	4605      	mov	r5, r0
 80095d8:	0710      	lsls	r0, r2, #28
 80095da:	460c      	mov	r4, r1
 80095dc:	d458      	bmi.n	8009690 <__sflush_r+0xc0>
 80095de:	684b      	ldr	r3, [r1, #4]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	dc05      	bgt.n	80095f0 <__sflush_r+0x20>
 80095e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	dc02      	bgt.n	80095f0 <__sflush_r+0x20>
 80095ea:	2000      	movs	r0, #0
 80095ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095f2:	2e00      	cmp	r6, #0
 80095f4:	d0f9      	beq.n	80095ea <__sflush_r+0x1a>
 80095f6:	2300      	movs	r3, #0
 80095f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80095fc:	682f      	ldr	r7, [r5, #0]
 80095fe:	602b      	str	r3, [r5, #0]
 8009600:	d032      	beq.n	8009668 <__sflush_r+0x98>
 8009602:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009604:	89a3      	ldrh	r3, [r4, #12]
 8009606:	075a      	lsls	r2, r3, #29
 8009608:	d505      	bpl.n	8009616 <__sflush_r+0x46>
 800960a:	6863      	ldr	r3, [r4, #4]
 800960c:	1ac0      	subs	r0, r0, r3
 800960e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009610:	b10b      	cbz	r3, 8009616 <__sflush_r+0x46>
 8009612:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009614:	1ac0      	subs	r0, r0, r3
 8009616:	2300      	movs	r3, #0
 8009618:	4602      	mov	r2, r0
 800961a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800961c:	4628      	mov	r0, r5
 800961e:	6a21      	ldr	r1, [r4, #32]
 8009620:	47b0      	blx	r6
 8009622:	1c43      	adds	r3, r0, #1
 8009624:	89a3      	ldrh	r3, [r4, #12]
 8009626:	d106      	bne.n	8009636 <__sflush_r+0x66>
 8009628:	6829      	ldr	r1, [r5, #0]
 800962a:	291d      	cmp	r1, #29
 800962c:	d82c      	bhi.n	8009688 <__sflush_r+0xb8>
 800962e:	4a2a      	ldr	r2, [pc, #168]	; (80096d8 <__sflush_r+0x108>)
 8009630:	40ca      	lsrs	r2, r1
 8009632:	07d6      	lsls	r6, r2, #31
 8009634:	d528      	bpl.n	8009688 <__sflush_r+0xb8>
 8009636:	2200      	movs	r2, #0
 8009638:	6062      	str	r2, [r4, #4]
 800963a:	6922      	ldr	r2, [r4, #16]
 800963c:	04d9      	lsls	r1, r3, #19
 800963e:	6022      	str	r2, [r4, #0]
 8009640:	d504      	bpl.n	800964c <__sflush_r+0x7c>
 8009642:	1c42      	adds	r2, r0, #1
 8009644:	d101      	bne.n	800964a <__sflush_r+0x7a>
 8009646:	682b      	ldr	r3, [r5, #0]
 8009648:	b903      	cbnz	r3, 800964c <__sflush_r+0x7c>
 800964a:	6560      	str	r0, [r4, #84]	; 0x54
 800964c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800964e:	602f      	str	r7, [r5, #0]
 8009650:	2900      	cmp	r1, #0
 8009652:	d0ca      	beq.n	80095ea <__sflush_r+0x1a>
 8009654:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009658:	4299      	cmp	r1, r3
 800965a:	d002      	beq.n	8009662 <__sflush_r+0x92>
 800965c:	4628      	mov	r0, r5
 800965e:	f7ff fb4b 	bl	8008cf8 <_free_r>
 8009662:	2000      	movs	r0, #0
 8009664:	6360      	str	r0, [r4, #52]	; 0x34
 8009666:	e7c1      	b.n	80095ec <__sflush_r+0x1c>
 8009668:	6a21      	ldr	r1, [r4, #32]
 800966a:	2301      	movs	r3, #1
 800966c:	4628      	mov	r0, r5
 800966e:	47b0      	blx	r6
 8009670:	1c41      	adds	r1, r0, #1
 8009672:	d1c7      	bne.n	8009604 <__sflush_r+0x34>
 8009674:	682b      	ldr	r3, [r5, #0]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d0c4      	beq.n	8009604 <__sflush_r+0x34>
 800967a:	2b1d      	cmp	r3, #29
 800967c:	d001      	beq.n	8009682 <__sflush_r+0xb2>
 800967e:	2b16      	cmp	r3, #22
 8009680:	d101      	bne.n	8009686 <__sflush_r+0xb6>
 8009682:	602f      	str	r7, [r5, #0]
 8009684:	e7b1      	b.n	80095ea <__sflush_r+0x1a>
 8009686:	89a3      	ldrh	r3, [r4, #12]
 8009688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800968c:	81a3      	strh	r3, [r4, #12]
 800968e:	e7ad      	b.n	80095ec <__sflush_r+0x1c>
 8009690:	690f      	ldr	r7, [r1, #16]
 8009692:	2f00      	cmp	r7, #0
 8009694:	d0a9      	beq.n	80095ea <__sflush_r+0x1a>
 8009696:	0793      	lsls	r3, r2, #30
 8009698:	bf18      	it	ne
 800969a:	2300      	movne	r3, #0
 800969c:	680e      	ldr	r6, [r1, #0]
 800969e:	bf08      	it	eq
 80096a0:	694b      	ldreq	r3, [r1, #20]
 80096a2:	eba6 0807 	sub.w	r8, r6, r7
 80096a6:	600f      	str	r7, [r1, #0]
 80096a8:	608b      	str	r3, [r1, #8]
 80096aa:	f1b8 0f00 	cmp.w	r8, #0
 80096ae:	dd9c      	ble.n	80095ea <__sflush_r+0x1a>
 80096b0:	4643      	mov	r3, r8
 80096b2:	463a      	mov	r2, r7
 80096b4:	4628      	mov	r0, r5
 80096b6:	6a21      	ldr	r1, [r4, #32]
 80096b8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80096ba:	47b0      	blx	r6
 80096bc:	2800      	cmp	r0, #0
 80096be:	dc06      	bgt.n	80096ce <__sflush_r+0xfe>
 80096c0:	89a3      	ldrh	r3, [r4, #12]
 80096c2:	f04f 30ff 	mov.w	r0, #4294967295
 80096c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096ca:	81a3      	strh	r3, [r4, #12]
 80096cc:	e78e      	b.n	80095ec <__sflush_r+0x1c>
 80096ce:	4407      	add	r7, r0
 80096d0:	eba8 0800 	sub.w	r8, r8, r0
 80096d4:	e7e9      	b.n	80096aa <__sflush_r+0xda>
 80096d6:	bf00      	nop
 80096d8:	20400001 	.word	0x20400001

080096dc <_fflush_r>:
 80096dc:	b538      	push	{r3, r4, r5, lr}
 80096de:	690b      	ldr	r3, [r1, #16]
 80096e0:	4605      	mov	r5, r0
 80096e2:	460c      	mov	r4, r1
 80096e4:	b913      	cbnz	r3, 80096ec <_fflush_r+0x10>
 80096e6:	2500      	movs	r5, #0
 80096e8:	4628      	mov	r0, r5
 80096ea:	bd38      	pop	{r3, r4, r5, pc}
 80096ec:	b118      	cbz	r0, 80096f6 <_fflush_r+0x1a>
 80096ee:	6983      	ldr	r3, [r0, #24]
 80096f0:	b90b      	cbnz	r3, 80096f6 <_fflush_r+0x1a>
 80096f2:	f000 f887 	bl	8009804 <__sinit>
 80096f6:	4b14      	ldr	r3, [pc, #80]	; (8009748 <_fflush_r+0x6c>)
 80096f8:	429c      	cmp	r4, r3
 80096fa:	d11b      	bne.n	8009734 <_fflush_r+0x58>
 80096fc:	686c      	ldr	r4, [r5, #4]
 80096fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d0ef      	beq.n	80096e6 <_fflush_r+0xa>
 8009706:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009708:	07d0      	lsls	r0, r2, #31
 800970a:	d404      	bmi.n	8009716 <_fflush_r+0x3a>
 800970c:	0599      	lsls	r1, r3, #22
 800970e:	d402      	bmi.n	8009716 <_fflush_r+0x3a>
 8009710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009712:	f000 f915 	bl	8009940 <__retarget_lock_acquire_recursive>
 8009716:	4628      	mov	r0, r5
 8009718:	4621      	mov	r1, r4
 800971a:	f7ff ff59 	bl	80095d0 <__sflush_r>
 800971e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009720:	4605      	mov	r5, r0
 8009722:	07da      	lsls	r2, r3, #31
 8009724:	d4e0      	bmi.n	80096e8 <_fflush_r+0xc>
 8009726:	89a3      	ldrh	r3, [r4, #12]
 8009728:	059b      	lsls	r3, r3, #22
 800972a:	d4dd      	bmi.n	80096e8 <_fflush_r+0xc>
 800972c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800972e:	f000 f908 	bl	8009942 <__retarget_lock_release_recursive>
 8009732:	e7d9      	b.n	80096e8 <_fflush_r+0xc>
 8009734:	4b05      	ldr	r3, [pc, #20]	; (800974c <_fflush_r+0x70>)
 8009736:	429c      	cmp	r4, r3
 8009738:	d101      	bne.n	800973e <_fflush_r+0x62>
 800973a:	68ac      	ldr	r4, [r5, #8]
 800973c:	e7df      	b.n	80096fe <_fflush_r+0x22>
 800973e:	4b04      	ldr	r3, [pc, #16]	; (8009750 <_fflush_r+0x74>)
 8009740:	429c      	cmp	r4, r3
 8009742:	bf08      	it	eq
 8009744:	68ec      	ldreq	r4, [r5, #12]
 8009746:	e7da      	b.n	80096fe <_fflush_r+0x22>
 8009748:	08009ebc 	.word	0x08009ebc
 800974c:	08009edc 	.word	0x08009edc
 8009750:	08009e9c 	.word	0x08009e9c

08009754 <std>:
 8009754:	2300      	movs	r3, #0
 8009756:	b510      	push	{r4, lr}
 8009758:	4604      	mov	r4, r0
 800975a:	e9c0 3300 	strd	r3, r3, [r0]
 800975e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009762:	6083      	str	r3, [r0, #8]
 8009764:	8181      	strh	r1, [r0, #12]
 8009766:	6643      	str	r3, [r0, #100]	; 0x64
 8009768:	81c2      	strh	r2, [r0, #14]
 800976a:	6183      	str	r3, [r0, #24]
 800976c:	4619      	mov	r1, r3
 800976e:	2208      	movs	r2, #8
 8009770:	305c      	adds	r0, #92	; 0x5c
 8009772:	f7ff f9e7 	bl	8008b44 <memset>
 8009776:	4b05      	ldr	r3, [pc, #20]	; (800978c <std+0x38>)
 8009778:	6224      	str	r4, [r4, #32]
 800977a:	6263      	str	r3, [r4, #36]	; 0x24
 800977c:	4b04      	ldr	r3, [pc, #16]	; (8009790 <std+0x3c>)
 800977e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009780:	4b04      	ldr	r3, [pc, #16]	; (8009794 <std+0x40>)
 8009782:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009784:	4b04      	ldr	r3, [pc, #16]	; (8009798 <std+0x44>)
 8009786:	6323      	str	r3, [r4, #48]	; 0x30
 8009788:	bd10      	pop	{r4, pc}
 800978a:	bf00      	nop
 800978c:	08009ac9 	.word	0x08009ac9
 8009790:	08009aeb 	.word	0x08009aeb
 8009794:	08009b23 	.word	0x08009b23
 8009798:	08009b47 	.word	0x08009b47

0800979c <_cleanup_r>:
 800979c:	4901      	ldr	r1, [pc, #4]	; (80097a4 <_cleanup_r+0x8>)
 800979e:	f000 b8af 	b.w	8009900 <_fwalk_reent>
 80097a2:	bf00      	nop
 80097a4:	080096dd 	.word	0x080096dd

080097a8 <__sfmoreglue>:
 80097a8:	b570      	push	{r4, r5, r6, lr}
 80097aa:	2568      	movs	r5, #104	; 0x68
 80097ac:	1e4a      	subs	r2, r1, #1
 80097ae:	4355      	muls	r5, r2
 80097b0:	460e      	mov	r6, r1
 80097b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80097b6:	f7ff faeb 	bl	8008d90 <_malloc_r>
 80097ba:	4604      	mov	r4, r0
 80097bc:	b140      	cbz	r0, 80097d0 <__sfmoreglue+0x28>
 80097be:	2100      	movs	r1, #0
 80097c0:	e9c0 1600 	strd	r1, r6, [r0]
 80097c4:	300c      	adds	r0, #12
 80097c6:	60a0      	str	r0, [r4, #8]
 80097c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80097cc:	f7ff f9ba 	bl	8008b44 <memset>
 80097d0:	4620      	mov	r0, r4
 80097d2:	bd70      	pop	{r4, r5, r6, pc}

080097d4 <__sfp_lock_acquire>:
 80097d4:	4801      	ldr	r0, [pc, #4]	; (80097dc <__sfp_lock_acquire+0x8>)
 80097d6:	f000 b8b3 	b.w	8009940 <__retarget_lock_acquire_recursive>
 80097da:	bf00      	nop
 80097dc:	20001538 	.word	0x20001538

080097e0 <__sfp_lock_release>:
 80097e0:	4801      	ldr	r0, [pc, #4]	; (80097e8 <__sfp_lock_release+0x8>)
 80097e2:	f000 b8ae 	b.w	8009942 <__retarget_lock_release_recursive>
 80097e6:	bf00      	nop
 80097e8:	20001538 	.word	0x20001538

080097ec <__sinit_lock_acquire>:
 80097ec:	4801      	ldr	r0, [pc, #4]	; (80097f4 <__sinit_lock_acquire+0x8>)
 80097ee:	f000 b8a7 	b.w	8009940 <__retarget_lock_acquire_recursive>
 80097f2:	bf00      	nop
 80097f4:	20001533 	.word	0x20001533

080097f8 <__sinit_lock_release>:
 80097f8:	4801      	ldr	r0, [pc, #4]	; (8009800 <__sinit_lock_release+0x8>)
 80097fa:	f000 b8a2 	b.w	8009942 <__retarget_lock_release_recursive>
 80097fe:	bf00      	nop
 8009800:	20001533 	.word	0x20001533

08009804 <__sinit>:
 8009804:	b510      	push	{r4, lr}
 8009806:	4604      	mov	r4, r0
 8009808:	f7ff fff0 	bl	80097ec <__sinit_lock_acquire>
 800980c:	69a3      	ldr	r3, [r4, #24]
 800980e:	b11b      	cbz	r3, 8009818 <__sinit+0x14>
 8009810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009814:	f7ff bff0 	b.w	80097f8 <__sinit_lock_release>
 8009818:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800981c:	6523      	str	r3, [r4, #80]	; 0x50
 800981e:	4b13      	ldr	r3, [pc, #76]	; (800986c <__sinit+0x68>)
 8009820:	4a13      	ldr	r2, [pc, #76]	; (8009870 <__sinit+0x6c>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	62a2      	str	r2, [r4, #40]	; 0x28
 8009826:	42a3      	cmp	r3, r4
 8009828:	bf08      	it	eq
 800982a:	2301      	moveq	r3, #1
 800982c:	4620      	mov	r0, r4
 800982e:	bf08      	it	eq
 8009830:	61a3      	streq	r3, [r4, #24]
 8009832:	f000 f81f 	bl	8009874 <__sfp>
 8009836:	6060      	str	r0, [r4, #4]
 8009838:	4620      	mov	r0, r4
 800983a:	f000 f81b 	bl	8009874 <__sfp>
 800983e:	60a0      	str	r0, [r4, #8]
 8009840:	4620      	mov	r0, r4
 8009842:	f000 f817 	bl	8009874 <__sfp>
 8009846:	2200      	movs	r2, #0
 8009848:	2104      	movs	r1, #4
 800984a:	60e0      	str	r0, [r4, #12]
 800984c:	6860      	ldr	r0, [r4, #4]
 800984e:	f7ff ff81 	bl	8009754 <std>
 8009852:	2201      	movs	r2, #1
 8009854:	2109      	movs	r1, #9
 8009856:	68a0      	ldr	r0, [r4, #8]
 8009858:	f7ff ff7c 	bl	8009754 <std>
 800985c:	2202      	movs	r2, #2
 800985e:	2112      	movs	r1, #18
 8009860:	68e0      	ldr	r0, [r4, #12]
 8009862:	f7ff ff77 	bl	8009754 <std>
 8009866:	2301      	movs	r3, #1
 8009868:	61a3      	str	r3, [r4, #24]
 800986a:	e7d1      	b.n	8009810 <__sinit+0xc>
 800986c:	08009db0 	.word	0x08009db0
 8009870:	0800979d 	.word	0x0800979d

08009874 <__sfp>:
 8009874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009876:	4607      	mov	r7, r0
 8009878:	f7ff ffac 	bl	80097d4 <__sfp_lock_acquire>
 800987c:	4b1e      	ldr	r3, [pc, #120]	; (80098f8 <__sfp+0x84>)
 800987e:	681e      	ldr	r6, [r3, #0]
 8009880:	69b3      	ldr	r3, [r6, #24]
 8009882:	b913      	cbnz	r3, 800988a <__sfp+0x16>
 8009884:	4630      	mov	r0, r6
 8009886:	f7ff ffbd 	bl	8009804 <__sinit>
 800988a:	3648      	adds	r6, #72	; 0x48
 800988c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009890:	3b01      	subs	r3, #1
 8009892:	d503      	bpl.n	800989c <__sfp+0x28>
 8009894:	6833      	ldr	r3, [r6, #0]
 8009896:	b30b      	cbz	r3, 80098dc <__sfp+0x68>
 8009898:	6836      	ldr	r6, [r6, #0]
 800989a:	e7f7      	b.n	800988c <__sfp+0x18>
 800989c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80098a0:	b9d5      	cbnz	r5, 80098d8 <__sfp+0x64>
 80098a2:	4b16      	ldr	r3, [pc, #88]	; (80098fc <__sfp+0x88>)
 80098a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80098a8:	60e3      	str	r3, [r4, #12]
 80098aa:	6665      	str	r5, [r4, #100]	; 0x64
 80098ac:	f000 f847 	bl	800993e <__retarget_lock_init_recursive>
 80098b0:	f7ff ff96 	bl	80097e0 <__sfp_lock_release>
 80098b4:	2208      	movs	r2, #8
 80098b6:	4629      	mov	r1, r5
 80098b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80098bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80098c0:	6025      	str	r5, [r4, #0]
 80098c2:	61a5      	str	r5, [r4, #24]
 80098c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80098c8:	f7ff f93c 	bl	8008b44 <memset>
 80098cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80098d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80098d4:	4620      	mov	r0, r4
 80098d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098d8:	3468      	adds	r4, #104	; 0x68
 80098da:	e7d9      	b.n	8009890 <__sfp+0x1c>
 80098dc:	2104      	movs	r1, #4
 80098de:	4638      	mov	r0, r7
 80098e0:	f7ff ff62 	bl	80097a8 <__sfmoreglue>
 80098e4:	4604      	mov	r4, r0
 80098e6:	6030      	str	r0, [r6, #0]
 80098e8:	2800      	cmp	r0, #0
 80098ea:	d1d5      	bne.n	8009898 <__sfp+0x24>
 80098ec:	f7ff ff78 	bl	80097e0 <__sfp_lock_release>
 80098f0:	230c      	movs	r3, #12
 80098f2:	603b      	str	r3, [r7, #0]
 80098f4:	e7ee      	b.n	80098d4 <__sfp+0x60>
 80098f6:	bf00      	nop
 80098f8:	08009db0 	.word	0x08009db0
 80098fc:	ffff0001 	.word	0xffff0001

08009900 <_fwalk_reent>:
 8009900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009904:	4606      	mov	r6, r0
 8009906:	4688      	mov	r8, r1
 8009908:	2700      	movs	r7, #0
 800990a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800990e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009912:	f1b9 0901 	subs.w	r9, r9, #1
 8009916:	d505      	bpl.n	8009924 <_fwalk_reent+0x24>
 8009918:	6824      	ldr	r4, [r4, #0]
 800991a:	2c00      	cmp	r4, #0
 800991c:	d1f7      	bne.n	800990e <_fwalk_reent+0xe>
 800991e:	4638      	mov	r0, r7
 8009920:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009924:	89ab      	ldrh	r3, [r5, #12]
 8009926:	2b01      	cmp	r3, #1
 8009928:	d907      	bls.n	800993a <_fwalk_reent+0x3a>
 800992a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800992e:	3301      	adds	r3, #1
 8009930:	d003      	beq.n	800993a <_fwalk_reent+0x3a>
 8009932:	4629      	mov	r1, r5
 8009934:	4630      	mov	r0, r6
 8009936:	47c0      	blx	r8
 8009938:	4307      	orrs	r7, r0
 800993a:	3568      	adds	r5, #104	; 0x68
 800993c:	e7e9      	b.n	8009912 <_fwalk_reent+0x12>

0800993e <__retarget_lock_init_recursive>:
 800993e:	4770      	bx	lr

08009940 <__retarget_lock_acquire_recursive>:
 8009940:	4770      	bx	lr

08009942 <__retarget_lock_release_recursive>:
 8009942:	4770      	bx	lr

08009944 <__swhatbuf_r>:
 8009944:	b570      	push	{r4, r5, r6, lr}
 8009946:	460e      	mov	r6, r1
 8009948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800994c:	4614      	mov	r4, r2
 800994e:	2900      	cmp	r1, #0
 8009950:	461d      	mov	r5, r3
 8009952:	b096      	sub	sp, #88	; 0x58
 8009954:	da07      	bge.n	8009966 <__swhatbuf_r+0x22>
 8009956:	2300      	movs	r3, #0
 8009958:	602b      	str	r3, [r5, #0]
 800995a:	89b3      	ldrh	r3, [r6, #12]
 800995c:	061a      	lsls	r2, r3, #24
 800995e:	d410      	bmi.n	8009982 <__swhatbuf_r+0x3e>
 8009960:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009964:	e00e      	b.n	8009984 <__swhatbuf_r+0x40>
 8009966:	466a      	mov	r2, sp
 8009968:	f000 f914 	bl	8009b94 <_fstat_r>
 800996c:	2800      	cmp	r0, #0
 800996e:	dbf2      	blt.n	8009956 <__swhatbuf_r+0x12>
 8009970:	9a01      	ldr	r2, [sp, #4]
 8009972:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009976:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800997a:	425a      	negs	r2, r3
 800997c:	415a      	adcs	r2, r3
 800997e:	602a      	str	r2, [r5, #0]
 8009980:	e7ee      	b.n	8009960 <__swhatbuf_r+0x1c>
 8009982:	2340      	movs	r3, #64	; 0x40
 8009984:	2000      	movs	r0, #0
 8009986:	6023      	str	r3, [r4, #0]
 8009988:	b016      	add	sp, #88	; 0x58
 800998a:	bd70      	pop	{r4, r5, r6, pc}

0800998c <__smakebuf_r>:
 800998c:	898b      	ldrh	r3, [r1, #12]
 800998e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009990:	079d      	lsls	r5, r3, #30
 8009992:	4606      	mov	r6, r0
 8009994:	460c      	mov	r4, r1
 8009996:	d507      	bpl.n	80099a8 <__smakebuf_r+0x1c>
 8009998:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800999c:	6023      	str	r3, [r4, #0]
 800999e:	6123      	str	r3, [r4, #16]
 80099a0:	2301      	movs	r3, #1
 80099a2:	6163      	str	r3, [r4, #20]
 80099a4:	b002      	add	sp, #8
 80099a6:	bd70      	pop	{r4, r5, r6, pc}
 80099a8:	466a      	mov	r2, sp
 80099aa:	ab01      	add	r3, sp, #4
 80099ac:	f7ff ffca 	bl	8009944 <__swhatbuf_r>
 80099b0:	9900      	ldr	r1, [sp, #0]
 80099b2:	4605      	mov	r5, r0
 80099b4:	4630      	mov	r0, r6
 80099b6:	f7ff f9eb 	bl	8008d90 <_malloc_r>
 80099ba:	b948      	cbnz	r0, 80099d0 <__smakebuf_r+0x44>
 80099bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099c0:	059a      	lsls	r2, r3, #22
 80099c2:	d4ef      	bmi.n	80099a4 <__smakebuf_r+0x18>
 80099c4:	f023 0303 	bic.w	r3, r3, #3
 80099c8:	f043 0302 	orr.w	r3, r3, #2
 80099cc:	81a3      	strh	r3, [r4, #12]
 80099ce:	e7e3      	b.n	8009998 <__smakebuf_r+0xc>
 80099d0:	4b0d      	ldr	r3, [pc, #52]	; (8009a08 <__smakebuf_r+0x7c>)
 80099d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80099d4:	89a3      	ldrh	r3, [r4, #12]
 80099d6:	6020      	str	r0, [r4, #0]
 80099d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099dc:	81a3      	strh	r3, [r4, #12]
 80099de:	9b00      	ldr	r3, [sp, #0]
 80099e0:	6120      	str	r0, [r4, #16]
 80099e2:	6163      	str	r3, [r4, #20]
 80099e4:	9b01      	ldr	r3, [sp, #4]
 80099e6:	b15b      	cbz	r3, 8009a00 <__smakebuf_r+0x74>
 80099e8:	4630      	mov	r0, r6
 80099ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099ee:	f000 f8e3 	bl	8009bb8 <_isatty_r>
 80099f2:	b128      	cbz	r0, 8009a00 <__smakebuf_r+0x74>
 80099f4:	89a3      	ldrh	r3, [r4, #12]
 80099f6:	f023 0303 	bic.w	r3, r3, #3
 80099fa:	f043 0301 	orr.w	r3, r3, #1
 80099fe:	81a3      	strh	r3, [r4, #12]
 8009a00:	89a0      	ldrh	r0, [r4, #12]
 8009a02:	4305      	orrs	r5, r0
 8009a04:	81a5      	strh	r5, [r4, #12]
 8009a06:	e7cd      	b.n	80099a4 <__smakebuf_r+0x18>
 8009a08:	0800979d 	.word	0x0800979d

08009a0c <memchr>:
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	b510      	push	{r4, lr}
 8009a10:	b2c9      	uxtb	r1, r1
 8009a12:	4402      	add	r2, r0
 8009a14:	4293      	cmp	r3, r2
 8009a16:	4618      	mov	r0, r3
 8009a18:	d101      	bne.n	8009a1e <memchr+0x12>
 8009a1a:	2000      	movs	r0, #0
 8009a1c:	e003      	b.n	8009a26 <memchr+0x1a>
 8009a1e:	7804      	ldrb	r4, [r0, #0]
 8009a20:	3301      	adds	r3, #1
 8009a22:	428c      	cmp	r4, r1
 8009a24:	d1f6      	bne.n	8009a14 <memchr+0x8>
 8009a26:	bd10      	pop	{r4, pc}

08009a28 <__malloc_lock>:
 8009a28:	4801      	ldr	r0, [pc, #4]	; (8009a30 <__malloc_lock+0x8>)
 8009a2a:	f7ff bf89 	b.w	8009940 <__retarget_lock_acquire_recursive>
 8009a2e:	bf00      	nop
 8009a30:	20001534 	.word	0x20001534

08009a34 <__malloc_unlock>:
 8009a34:	4801      	ldr	r0, [pc, #4]	; (8009a3c <__malloc_unlock+0x8>)
 8009a36:	f7ff bf84 	b.w	8009942 <__retarget_lock_release_recursive>
 8009a3a:	bf00      	nop
 8009a3c:	20001534 	.word	0x20001534

08009a40 <_raise_r>:
 8009a40:	291f      	cmp	r1, #31
 8009a42:	b538      	push	{r3, r4, r5, lr}
 8009a44:	4604      	mov	r4, r0
 8009a46:	460d      	mov	r5, r1
 8009a48:	d904      	bls.n	8009a54 <_raise_r+0x14>
 8009a4a:	2316      	movs	r3, #22
 8009a4c:	6003      	str	r3, [r0, #0]
 8009a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a52:	bd38      	pop	{r3, r4, r5, pc}
 8009a54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009a56:	b112      	cbz	r2, 8009a5e <_raise_r+0x1e>
 8009a58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a5c:	b94b      	cbnz	r3, 8009a72 <_raise_r+0x32>
 8009a5e:	4620      	mov	r0, r4
 8009a60:	f000 f830 	bl	8009ac4 <_getpid_r>
 8009a64:	462a      	mov	r2, r5
 8009a66:	4601      	mov	r1, r0
 8009a68:	4620      	mov	r0, r4
 8009a6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a6e:	f000 b817 	b.w	8009aa0 <_kill_r>
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d00a      	beq.n	8009a8c <_raise_r+0x4c>
 8009a76:	1c59      	adds	r1, r3, #1
 8009a78:	d103      	bne.n	8009a82 <_raise_r+0x42>
 8009a7a:	2316      	movs	r3, #22
 8009a7c:	6003      	str	r3, [r0, #0]
 8009a7e:	2001      	movs	r0, #1
 8009a80:	e7e7      	b.n	8009a52 <_raise_r+0x12>
 8009a82:	2400      	movs	r4, #0
 8009a84:	4628      	mov	r0, r5
 8009a86:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009a8a:	4798      	blx	r3
 8009a8c:	2000      	movs	r0, #0
 8009a8e:	e7e0      	b.n	8009a52 <_raise_r+0x12>

08009a90 <raise>:
 8009a90:	4b02      	ldr	r3, [pc, #8]	; (8009a9c <raise+0xc>)
 8009a92:	4601      	mov	r1, r0
 8009a94:	6818      	ldr	r0, [r3, #0]
 8009a96:	f7ff bfd3 	b.w	8009a40 <_raise_r>
 8009a9a:	bf00      	nop
 8009a9c:	2000017c 	.word	0x2000017c

08009aa0 <_kill_r>:
 8009aa0:	b538      	push	{r3, r4, r5, lr}
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	4d06      	ldr	r5, [pc, #24]	; (8009ac0 <_kill_r+0x20>)
 8009aa6:	4604      	mov	r4, r0
 8009aa8:	4608      	mov	r0, r1
 8009aaa:	4611      	mov	r1, r2
 8009aac:	602b      	str	r3, [r5, #0]
 8009aae:	f7f6 fdda 	bl	8000666 <_kill>
 8009ab2:	1c43      	adds	r3, r0, #1
 8009ab4:	d102      	bne.n	8009abc <_kill_r+0x1c>
 8009ab6:	682b      	ldr	r3, [r5, #0]
 8009ab8:	b103      	cbz	r3, 8009abc <_kill_r+0x1c>
 8009aba:	6023      	str	r3, [r4, #0]
 8009abc:	bd38      	pop	{r3, r4, r5, pc}
 8009abe:	bf00      	nop
 8009ac0:	2000152c 	.word	0x2000152c

08009ac4 <_getpid_r>:
 8009ac4:	f7f6 bdc8 	b.w	8000658 <_getpid>

08009ac8 <__sread>:
 8009ac8:	b510      	push	{r4, lr}
 8009aca:	460c      	mov	r4, r1
 8009acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ad0:	f000 f894 	bl	8009bfc <_read_r>
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	bfab      	itete	ge
 8009ad8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009ada:	89a3      	ldrhlt	r3, [r4, #12]
 8009adc:	181b      	addge	r3, r3, r0
 8009ade:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009ae2:	bfac      	ite	ge
 8009ae4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009ae6:	81a3      	strhlt	r3, [r4, #12]
 8009ae8:	bd10      	pop	{r4, pc}

08009aea <__swrite>:
 8009aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aee:	461f      	mov	r7, r3
 8009af0:	898b      	ldrh	r3, [r1, #12]
 8009af2:	4605      	mov	r5, r0
 8009af4:	05db      	lsls	r3, r3, #23
 8009af6:	460c      	mov	r4, r1
 8009af8:	4616      	mov	r6, r2
 8009afa:	d505      	bpl.n	8009b08 <__swrite+0x1e>
 8009afc:	2302      	movs	r3, #2
 8009afe:	2200      	movs	r2, #0
 8009b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b04:	f000 f868 	bl	8009bd8 <_lseek_r>
 8009b08:	89a3      	ldrh	r3, [r4, #12]
 8009b0a:	4632      	mov	r2, r6
 8009b0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b10:	81a3      	strh	r3, [r4, #12]
 8009b12:	4628      	mov	r0, r5
 8009b14:	463b      	mov	r3, r7
 8009b16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b1e:	f000 b817 	b.w	8009b50 <_write_r>

08009b22 <__sseek>:
 8009b22:	b510      	push	{r4, lr}
 8009b24:	460c      	mov	r4, r1
 8009b26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b2a:	f000 f855 	bl	8009bd8 <_lseek_r>
 8009b2e:	1c43      	adds	r3, r0, #1
 8009b30:	89a3      	ldrh	r3, [r4, #12]
 8009b32:	bf15      	itete	ne
 8009b34:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b3e:	81a3      	strheq	r3, [r4, #12]
 8009b40:	bf18      	it	ne
 8009b42:	81a3      	strhne	r3, [r4, #12]
 8009b44:	bd10      	pop	{r4, pc}

08009b46 <__sclose>:
 8009b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b4a:	f000 b813 	b.w	8009b74 <_close_r>
	...

08009b50 <_write_r>:
 8009b50:	b538      	push	{r3, r4, r5, lr}
 8009b52:	4604      	mov	r4, r0
 8009b54:	4608      	mov	r0, r1
 8009b56:	4611      	mov	r1, r2
 8009b58:	2200      	movs	r2, #0
 8009b5a:	4d05      	ldr	r5, [pc, #20]	; (8009b70 <_write_r+0x20>)
 8009b5c:	602a      	str	r2, [r5, #0]
 8009b5e:	461a      	mov	r2, r3
 8009b60:	f7f6 fdb8 	bl	80006d4 <_write>
 8009b64:	1c43      	adds	r3, r0, #1
 8009b66:	d102      	bne.n	8009b6e <_write_r+0x1e>
 8009b68:	682b      	ldr	r3, [r5, #0]
 8009b6a:	b103      	cbz	r3, 8009b6e <_write_r+0x1e>
 8009b6c:	6023      	str	r3, [r4, #0]
 8009b6e:	bd38      	pop	{r3, r4, r5, pc}
 8009b70:	2000152c 	.word	0x2000152c

08009b74 <_close_r>:
 8009b74:	b538      	push	{r3, r4, r5, lr}
 8009b76:	2300      	movs	r3, #0
 8009b78:	4d05      	ldr	r5, [pc, #20]	; (8009b90 <_close_r+0x1c>)
 8009b7a:	4604      	mov	r4, r0
 8009b7c:	4608      	mov	r0, r1
 8009b7e:	602b      	str	r3, [r5, #0]
 8009b80:	f7f6 fdc4 	bl	800070c <_close>
 8009b84:	1c43      	adds	r3, r0, #1
 8009b86:	d102      	bne.n	8009b8e <_close_r+0x1a>
 8009b88:	682b      	ldr	r3, [r5, #0]
 8009b8a:	b103      	cbz	r3, 8009b8e <_close_r+0x1a>
 8009b8c:	6023      	str	r3, [r4, #0]
 8009b8e:	bd38      	pop	{r3, r4, r5, pc}
 8009b90:	2000152c 	.word	0x2000152c

08009b94 <_fstat_r>:
 8009b94:	b538      	push	{r3, r4, r5, lr}
 8009b96:	2300      	movs	r3, #0
 8009b98:	4d06      	ldr	r5, [pc, #24]	; (8009bb4 <_fstat_r+0x20>)
 8009b9a:	4604      	mov	r4, r0
 8009b9c:	4608      	mov	r0, r1
 8009b9e:	4611      	mov	r1, r2
 8009ba0:	602b      	str	r3, [r5, #0]
 8009ba2:	f7f6 fdbe 	bl	8000722 <_fstat>
 8009ba6:	1c43      	adds	r3, r0, #1
 8009ba8:	d102      	bne.n	8009bb0 <_fstat_r+0x1c>
 8009baa:	682b      	ldr	r3, [r5, #0]
 8009bac:	b103      	cbz	r3, 8009bb0 <_fstat_r+0x1c>
 8009bae:	6023      	str	r3, [r4, #0]
 8009bb0:	bd38      	pop	{r3, r4, r5, pc}
 8009bb2:	bf00      	nop
 8009bb4:	2000152c 	.word	0x2000152c

08009bb8 <_isatty_r>:
 8009bb8:	b538      	push	{r3, r4, r5, lr}
 8009bba:	2300      	movs	r3, #0
 8009bbc:	4d05      	ldr	r5, [pc, #20]	; (8009bd4 <_isatty_r+0x1c>)
 8009bbe:	4604      	mov	r4, r0
 8009bc0:	4608      	mov	r0, r1
 8009bc2:	602b      	str	r3, [r5, #0]
 8009bc4:	f7f6 fdbc 	bl	8000740 <_isatty>
 8009bc8:	1c43      	adds	r3, r0, #1
 8009bca:	d102      	bne.n	8009bd2 <_isatty_r+0x1a>
 8009bcc:	682b      	ldr	r3, [r5, #0]
 8009bce:	b103      	cbz	r3, 8009bd2 <_isatty_r+0x1a>
 8009bd0:	6023      	str	r3, [r4, #0]
 8009bd2:	bd38      	pop	{r3, r4, r5, pc}
 8009bd4:	2000152c 	.word	0x2000152c

08009bd8 <_lseek_r>:
 8009bd8:	b538      	push	{r3, r4, r5, lr}
 8009bda:	4604      	mov	r4, r0
 8009bdc:	4608      	mov	r0, r1
 8009bde:	4611      	mov	r1, r2
 8009be0:	2200      	movs	r2, #0
 8009be2:	4d05      	ldr	r5, [pc, #20]	; (8009bf8 <_lseek_r+0x20>)
 8009be4:	602a      	str	r2, [r5, #0]
 8009be6:	461a      	mov	r2, r3
 8009be8:	f7f6 fdb4 	bl	8000754 <_lseek>
 8009bec:	1c43      	adds	r3, r0, #1
 8009bee:	d102      	bne.n	8009bf6 <_lseek_r+0x1e>
 8009bf0:	682b      	ldr	r3, [r5, #0]
 8009bf2:	b103      	cbz	r3, 8009bf6 <_lseek_r+0x1e>
 8009bf4:	6023      	str	r3, [r4, #0]
 8009bf6:	bd38      	pop	{r3, r4, r5, pc}
 8009bf8:	2000152c 	.word	0x2000152c

08009bfc <_read_r>:
 8009bfc:	b538      	push	{r3, r4, r5, lr}
 8009bfe:	4604      	mov	r4, r0
 8009c00:	4608      	mov	r0, r1
 8009c02:	4611      	mov	r1, r2
 8009c04:	2200      	movs	r2, #0
 8009c06:	4d05      	ldr	r5, [pc, #20]	; (8009c1c <_read_r+0x20>)
 8009c08:	602a      	str	r2, [r5, #0]
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	f7f6 fd45 	bl	800069a <_read>
 8009c10:	1c43      	adds	r3, r0, #1
 8009c12:	d102      	bne.n	8009c1a <_read_r+0x1e>
 8009c14:	682b      	ldr	r3, [r5, #0]
 8009c16:	b103      	cbz	r3, 8009c1a <_read_r+0x1e>
 8009c18:	6023      	str	r3, [r4, #0]
 8009c1a:	bd38      	pop	{r3, r4, r5, pc}
 8009c1c:	2000152c 	.word	0x2000152c

08009c20 <_gettimeofday>:
 8009c20:	2258      	movs	r2, #88	; 0x58
 8009c22:	4b02      	ldr	r3, [pc, #8]	; (8009c2c <_gettimeofday+0xc>)
 8009c24:	f04f 30ff 	mov.w	r0, #4294967295
 8009c28:	601a      	str	r2, [r3, #0]
 8009c2a:	4770      	bx	lr
 8009c2c:	2000152c 	.word	0x2000152c

08009c30 <_init>:
 8009c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c32:	bf00      	nop
 8009c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c36:	bc08      	pop	{r3}
 8009c38:	469e      	mov	lr, r3
 8009c3a:	4770      	bx	lr

08009c3c <_fini>:
 8009c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c3e:	bf00      	nop
 8009c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c42:	bc08      	pop	{r3}
 8009c44:	469e      	mov	lr, r3
 8009c46:	4770      	bx	lr
